diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7ffe97b343433946a23bd5ce2bf8c763df1f044f..731643254c9cdf51c7eee017b3518053f60ca2cf 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,8 +1,10 @@
 project(umbrello)
 
+cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)
+
 # KDE Application Version, managed by release script
 set (KDE_APPLICATIONS_VERSION_MAJOR "16")
-set (KDE_APPLICATIONS_VERSION_MINOR "04")
+set (KDE_APPLICATIONS_VERSION_MINOR "05")
 set (KDE_APPLICATIONS_VERSION_MICRO "1")
 
 set(UMBRELLO_VERSION_MAJOR "2")
@@ -15,153 +17,56 @@ option(BUILD_CURSOR_ICONS "Create cursor icons from svg source" OFF)
 
 option(BUILD_ICONS_INTO_SIZE_RELATED_DIRS "place icons into separate directories (for debugging purpose)" OFF)
 
-option(BUILD_KF5 "Build for KDE Frameworks 5" ON)
-
 # where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked
 list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)
 include(Macros)
 
-set(CMAKE_AUTORCC ON)
-
-if(NOT BUILD_KF5)
-    cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
-
-    set(CMAKE_AUTOMOC ON)
-    set(CMAKE_INCLUDE_CURRENT_DIR ON)
-    find_package(Qt4 4.4.3 REQUIRED QtCore QtGui QtXml QtTest)
-
-    set(KDE4_BUILD_TESTS ON)  # for unit tests
-
-    # search packages used by KDE
-    find_package(KDE4 REQUIRED)
-    include(KDE4Defaults)
-    include(MacroLibrary)
-
-    # The FindKDE4.cmake module sets _KDE4_PLATFORM_DEFINITIONS with
-    # definitions like _GNU_SOURCE that are needed on each platform.
-    set(CMAKE_REQUIRED_DEFINITIONS ${_KDE4_PLATFORM_DEFINITIONS} -DQT_STRICT_ITERATORS)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-
-    add_definitions (
-        ${KDE4_DEFINITIONS}
-    )
-
-    include_directories(
-        ${KDE4_INCLUDES}
-    )
+# we need some parts of the ECM CMake helpers
+find_package(ECM 1.1.0 REQUIRED NO_MODULE)
+list(APPEND CMAKE_MODULE_PATH ${ECM_MODULE_PATH})
+
+include(KDEInstallDirs)
+include(KDECompilerSettings NO_POLICY_SCOPE)
+include(KDECMakeSettings)
+include(FeatureSummary)
+include(ECMInstallIcons)
+include(ECMSetupVersion)
+include(ECMOptionalAddSubdirectory)
+include(ECMAddAppIcon)
+include(ECMAddTests)
+
+# search packages used by Qt
+set(QT_MIN_VERSION "5.2.0")
+find_package(Qt5 ${QT_MIN_VERSION} REQUIRED COMPONENTS
+    Core
+    Gui
+    PrintSupport
+    Svg
+    Test
+    Widgets
+    Xml
+)
 
-    if(KDE4_BUILD_TESTS)
-        enable_testing()
-        set(BUILD_UNITTESTS 1)
-    endif()
+# search packages used by KDE
+find_package(KF5 REQUIRED COMPONENTS
+    Archive
+    Completion
+    Config
+    CoreAddons
+    DocTools
+    I18n
+    IconThemes
+    KIO
+    TextEditor
+    WidgetsAddons
+    XmlGui
+)
 
-    macro(ki18n_wrap_ui)
-        kde4_add_ui_files(${ARGN})
-    endmacro(ki18n_wrap_ui)
-
-    macro(kconfig_add_kcfg_files)
-        kde4_add_kcfg_files(${ARGN})
-    endmacro(kconfig_add_kcfg_files)
-
-    macro(ecm_optional_add_subdirectory)
-        add_subdirectory(${ARGN})
-    endmacro(ecm_optional_add_subdirectory)
-
-    macro(ecm_add_test)
-        set(sources)
-        set(libs)
-        set(name_prefix)
-        set(test_name)
-        set(mode 0)
-        set(guimode "NOGUI")
-        foreach(a ${ARGN})
-            if(a STREQUAL "LINK_LIBRARIES")
-                set(mode 1)
-            elseif(a STREQUAL "NAME_PREFIX")
-                set(mode 2)
-            elseif(a STREQUAL "GUI")
-                set(guimode "GUI")
-                set(mode 3)
-            elseif(a STREQUAL "TEST_NAME")
-                set(mode 4)
-            elseif (mode EQUAL 0)
-                list(APPEND sources ${a})
-            elseif(mode EQUAL 1)
-                list(APPEND libs ${a})
-            elseif(mode EQUAL 2)
-                set(name_prefix ${a})
-            elseif(mode EQUAL 4)
-                set(test_name ${a})
-            endif()
-        endforeach(a)
-
-        set(targetname ${test_name})
-        if(name_prefix)
-            set(testname ${name_prefix}-${targetname})
-        else()
-            set(testname ${targetname})
-        endif()
-        kde4_add_unit_test(${targetname} TESTNAME ${testname} ${guimode} ${sources})
-        target_link_libraries(${targetname} ${libs})
-    endmacro(ecm_add_test)
-
-    macro(ecm_add_executable)
-        kde4_add_executable(${ARGN})
-    endmacro(ecm_add_executable)
-
-    macro_display_feature_log()
-    KDE4_NO_ENABLE_FINAL(umbrello)
-else()
-    cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)
-
-    # we need some parts of the ECM CMake helpers
-    find_package(ECM 1.1.0 REQUIRED NO_MODULE)
-    list(APPEND CMAKE_MODULE_PATH ${ECM_MODULE_PATH})
-
-    include(KDEInstallDirs)
-    include(KDECompilerSettings NO_POLICY_SCOPE)
-    include(KDECMakeSettings)
-    include(FeatureSummary)
-    include(ECMInstallIcons)
-    include(ECMSetupVersion)
-    include(ECMOptionalAddSubdirectory)
-    include(ECMAddAppIcon)
-    include(ECMAddTests)
-
-    # search packages used by Qt
-    set(QT_MIN_VERSION "5.2.0")
-    find_package(Qt5 ${QT_MIN_VERSION} REQUIRED COMPONENTS
-        Core
-        Gui
-        PrintSupport
-        Svg
-        Test
-        Widgets
-        Xml
-    )
-
-    # search packages used by KDE
-    find_package(KF5 REQUIRED COMPONENTS
-        Archive
-        Completion
-        Config
-        CoreAddons
-        DocTools
-        I18n
-        IconThemes
-        KIO
-        TextEditor
-        WidgetsAddons
-        XmlGui
-    )
-
-    macro(ecm_add_executable)
-        add_executable(${ARGN})
-    endmacro(ecm_add_executable)
-
-    set(BUILD_UNITTESTS 1)
-endif()
+macro(ecm_add_executable)
+    add_executable(${ARGN})
+endmacro(ecm_add_executable)
 
+set(BUILD_UNITTESTS 1)
 
 # use some compile flags
 add_definitions(
diff --git a/doc/CMakeLists.txt b/doc/CMakeLists.txt
index 41e19c9c2daf88e2bbdedd84030a4e0db5d0348e..0ac8b40332be67acea87fd82cdbc99ac933b8e89 100644
--- a/doc/CMakeLists.txt
+++ b/doc/CMakeLists.txt
@@ -1,10 +1,6 @@
 ########### install files ###############
-if(BUILD_KF5)
-    file(READ "index.docbook" index_file)
-    string(REPLACE "4.2" "4.5" index_file "${index_file}")
-    string(REPLACE "kdex.dtd" "kdedbx45.dtd" index_file "${index_file}")
-    file(WRITE "index-kf5.docbook" "${index_file}")
-    kdoctools_create_handbook(index-kf5.docbook INSTALL_DESTINATION ${HTML_INSTALL_DIR}/en SUBDIR umbrello)
-else()
-    kde4_create_handbook(index.docbook INSTALL_DESTINATION ${HTML_INSTALL_DIR}/en SUBDIR umbrello)
-endif()
+file(READ "index.docbook" index_file)
+string(REPLACE "4.2" "4.5" index_file "${index_file}")
+string(REPLACE "kdex.dtd" "kdedbx45.dtd" index_file "${index_file}")
+file(WRITE "index-kf5.docbook" "${index_file}")
+kdoctools_create_handbook(index-kf5.docbook INSTALL_DESTINATION ${HTML_INSTALL_DIR}/en SUBDIR umbrello)
diff --git a/doc/index-kf5.docbook b/doc/index-kf5.docbook
new file mode 100644
index 0000000000000000000000000000000000000000..685d8984cd6ebc534c0b9ced65467acfb1088492
--- /dev/null
+++ b/doc/index-kf5.docbook
@@ -0,0 +1,71 @@
+<?xml version="1.0" ?>
+
+<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.5-Based Variant V1.1//EN"
+ "dtd/kdedbx45.dtd" [
+ <!ENTITY umbrello "<application>Umbrello &UML; Modeller</application>">
+ <!ENTITY kappname "&umbrello;">
+ <!ENTITY packagename "kdesdk">
+ <!ENTITY UML "<acronym>UML</acronym>">
+ <!ENTITY introduction-chapter SYSTEM "introduction.docbook">
+ <!ENTITY uml-basics-chapter SYSTEM "uml_basics.docbook">
+ <!ENTITY working-with-umbrello-chapter SYSTEM "working_with_umbrello.docbook">
+ <!ENTITY code-import-and-generation-chapter SYSTEM "code_import_and_generation.docbook">
+ <!ENTITY other-features-chapter SYSTEM "other_features.docbook">
+ <!ENTITY authors-chapter SYSTEM "authors.docbook">
+ <!ENTITY credits-chapter SYSTEM "credits.docbook">
+ <!ENTITY % addindex "IGNORE">
+ <!ENTITY % English "INCLUDE"><!-- change language only here -->
+  <!-- Do not define any other entities; instead, use the entities
+       from kde-genent.entities and $LANG/user.entities. -->
+]>
+
+<book id="Umbrello" lang="&language;">
+<bookinfo>
+<title>&umbrello; Handbook</title>
+
+<authorgroup>
+<corpauthor>&umbrello; Authors</corpauthor>
+<!-- TRANS:ROLES_OF_TRANSLATORS -->
+</authorgroup>
+
+<copyright>
+<year>2001</year>
+<holder>Paul Hensgen</holder>
+</copyright>
+<copyright>
+<year>2002, 2003</year>
+<holder>&umbrello; Authors</holder>
+</copyright>
+
+
+<date>2013-06-01</date>
+<releaseinfo>2.11.0</releaseinfo>
+
+<abstract>
+<para>
+&umbrello; helps the software development
+process by using the industry standard Unified Modelling Language (&UML;) 
+to enable you to create diagrams for designing and documenting your systems.
+</para>
+</abstract>
+
+<keywordset>
+<keyword>KDE</keyword>
+<keyword>UML</keyword>
+<keyword>modelling</keyword>
+<keyword>diagrams</keyword>
+<keyword>software development</keyword>
+<keyword>development</keyword>
+</keywordset>
+
+</bookinfo>
+
+&introduction-chapter;
+&uml-basics-chapter;
+&working-with-umbrello-chapter;
+&code-import-and-generation-chapter;
+&other-features-chapter;
+&authors-chapter;
+&credits-chapter;
+
+</book>
diff --git a/lib/cppparser/ast.cpp b/lib/cppparser/ast.cpp
index e0c734bed7f94f9dcba2b2e4da7bbad9faa6cd75..6bc07e15d2ef39a133c3ec8c44ad95114da78d2a 100644
--- a/lib/cppparser/ast.cpp
+++ b/lib/cppparser/ast.cpp
@@ -18,10 +18,6 @@
 
 #include "ast.h"
 #include <QStringList>
-#if QT_VERSION >= 0x050000
-#else
-#include <kdebug.h>
-#endif
 
 QString nodeTypeToString(int type)
 {
diff --git a/lib/cppparser/ast.h b/lib/cppparser/ast.h
index 3203a6356b3e06f3f53ab7a1f4bc12b85f4041ea..6eb56c683eb18dd46525c910c6ca2e659bcd434c 100644
--- a/lib/cppparser/ast.h
+++ b/lib/cppparser/ast.h
@@ -20,14 +20,9 @@
 #define __ast_h
 
 #include <QtGlobal>
-
-#if QT_VERSION >= 0x050000
 #include <QExplicitlySharedDataPointer>
 #define KShared QSharedData
 #define KSharedPtr QExplicitlySharedDataPointer
-#else
-#include <KSharedPtr>
-#endif
 
 #include <memory>
 #include <QString>
diff --git a/lib/cppparser/lexercache.h b/lib/cppparser/lexercache.h
index 3a9d3ea90b18ac65c051697454ab430b0765806e..b792b56ab4bcb02d262f7b2e6b72f4f22dc425c0 100644
--- a/lib/cppparser/lexercache.h
+++ b/lib/cppparser/lexercache.h
@@ -15,10 +15,6 @@
 #ifndef LEXERCACHE_H
 #define LEXERCACHE_H
 #include <hashedstring.h>
-#if QT_VERSION >= 0x050000
-#else
-#include <kdebug.h>
-#endif
 #include "macro.h"
 #include <qdatetime.h>
 #include <qfileinfo.h>
diff --git a/lib/cppparser/parser.cpp b/lib/cppparser/parser.cpp
index 644f2be6b807dcd418acec9f00177664cf656c69..e04f248a0ae7468e593927f4ac1129f662ca5a22 100644
--- a/lib/cppparser/parser.cpp
+++ b/lib/cppparser/parser.cpp
@@ -26,11 +26,6 @@
 #include <QString>
 #include <QStringList>
 
-#if QT_VERSION >= 0x050000
-#else
-#include <kdebug.h>
-#endif
-
 #include <KLocalizedString>
 
 using namespace std;
diff --git a/lib/cppparser/tree_parser.cpp b/lib/cppparser/tree_parser.cpp
index 62020e76a680686c47ab35f2e930c1a24eb4312b..3c71a49172874c209a97c2f1e4e4986646917a76 100644
--- a/lib/cppparser/tree_parser.cpp
+++ b/lib/cppparser/tree_parser.cpp
@@ -20,11 +20,6 @@
 #include "debug_utils.h"
 #include "driver.h"
 
-#if QT_VERSION >= 0x050000
-#else
-#include <kdebug.h>
-#endif
-
 #define DBG_TPAR  DEBUG(QLatin1String("TreeParser"))
 DEBUG_REGISTER_DISABLED(TreeParser)
 
diff --git a/lib/interfaces/hashedstring.cpp b/lib/interfaces/hashedstring.cpp
index f67c85aeecb0a48ce43366a75aa2ee00d851a6bd..ca3cbc76845354c116efe1d38ee00e8b428069b8 100644
--- a/lib/interfaces/hashedstring.cpp
+++ b/lib/interfaces/hashedstring.cpp
@@ -179,12 +179,7 @@ void HashedStringSet::makeDataPrivate()
         m_data = new HashedStringSetData();
         return ;
     }
-#if QT_VERSION >= 0x050000
     m_data.detach();
-#else
-    if (m_data.count() != 1)
-        m_data = new HashedStringSetData(*m_data);
-#endif
 }
 
 bool HashedStringSet::operator[] (const HashedString& rhs) const
diff --git a/patchsToApply/b b/patchsToApply/b
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/patchsToApply/fixDataTypeWidgets b/patchsToApply/fixDataTypeWidgets
new file mode 100644
index 0000000000000000000000000000000000000000..fdee9b4620bcb0a6d9e47aafc71667209e005f62
--- /dev/null
+++ b/patchsToApply/fixDataTypeWidgets
@@ -0,0 +1,2743 @@
+diff --git a/umbrello/CMakeLists.txt b/umbrello/CMakeLists.txt
+index 10cd5a39f7c212666922ad0ca29dc6f578ab3ed4..09b80bf08300bea92222a8b78fed28833660c887 100644
+--- a/umbrello/CMakeLists.txt
++++ b/umbrello/CMakeLists.txt
+@@ -240,6 +240,8 @@ set(libdialogs_SRCS
+     dialogs/widgets/umlpackagewidget.cpp
+     dialogs/widgets/umlstereotypewidget.cpp
+     dialogs/widgets/visibilityenumwidget.cpp
++    dialogs/widgets/umltypequalifierswidget.cpp
++    dialogs/widgets/umltypemodifierwidget.cpp
+ )
+ 
+ ki18n_wrap_ui(  libdialogs_SRCS
+@@ -251,6 +253,12 @@ ki18n_wrap_ui(  libdialogs_SRCS
+     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/codeimportoptionspage.ui
+     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/diagrampropertiespage.ui
+     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/umlrolepropertiesbase.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umlattributedialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umlentityattributedialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umltemplatedialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umloperationdialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/widgets/umltypequalifierswidget.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/widgets/visibilityenumwidget.ui
+ )
+ 
+ set(librefactoring_SRCS
+diff --git a/umbrello/basictypes.cpp b/umbrello/basictypes.cpp
+index 85d819201593897d2068dde4aeafb434e3927008..3d8b58dba299ffaa2c734c967469153c4cf79e71 100644
+--- a/umbrello/basictypes.cpp
++++ b/umbrello/basictypes.cpp
+@@ -153,6 +153,114 @@ Enum fromInt(int item)
+ }
+ 
+ }  // end namespace Visibility
++//-----------------------------------------------------------------------------
++namespace TypeQualifiers{
++
++/**
++     * Convert Type Qualifiers item into QString representation.
++     * @param item       item to convert
++     * @return QString representation of TypeQualifier
++     */
++QString toString(Enum item)
++{
++    switch (item) {
++    case Const:
++        return QLatin1String("const ");
++    case Volatile:
++        return QLatin1String("volatile ");
++    case Mutable:
++        return QLatin1String("mutable ");
++    case ConstVolatile:
++        return QLatin1String("const volatile ");
++    case None:
++    default:
++        return QLatin1String("");
++    }
++}
++
++/**
++     * Convert a string item into TypeQualifier representation.
++     * @param item   item to convert
++     * @return TypeQualifier enum
++     */
++Enum fromString(const QString& item)
++{
++    if(item == QLatin1String(""))
++        return None;
++    else if(item == QLatin1String("const"))
++        return Const;
++    else if(item == QLatin1String("volatile"))
++        return Volatile;
++    else if(item == QLatin1String("mutable"))
++        return Mutable;
++    else if(item == QLatin1String("const volatile"))
++        return ConstVolatile;
++    else
++        return None;
++}
++
++/**
++     * Convert a integer item into TypeQualifier representation.
++     * @param item   integer value to convert
++     * @return TypeQualifier enum
++     */
++Enum fromInt(int item)
++{
++    return Enum(item);
++}
++
++}  // end namespace TypeQualifier
++
++//-----------------------------------------------------------------------------
++namespace TypeModifiers{
++
++/**
++     * Convert Type Modifiers item into QString representation.
++     * @param item       item to convert
++     * @return QString representation of TypeQualifier
++     */
++QString toString(Enum item)
++{
++    switch (item) {
++    case Pointer:
++        return QLatin1String("*");
++    case Reference:
++        return QLatin1String("&");
++    case None:
++    default:
++        return QLatin1String("");
++
++    }
++}
++
++/**
++     * Convert a string item into TypeModifier representation.
++     * @param item   item to convert
++     * @return TypeModifier enum
++     */
++Enum fromString(const QString& item)
++{
++    if(item == QLatin1String(""))
++        return None;
++    if(item == QLatin1String("*"))
++        return Pointer;
++    if(item == QLatin1String("&"))
++        return Reference;
++    else
++        return None;
++}
++
++/**
++     * Convert a integer item into TypeModifier representation.
++     * @param item   integer value to convert
++     * @return TypeModifier enum
++     */
++Enum fromInt(int item)
++{
++    return Enum(item);
++}
++
++}  // end namespace TypeModifiers
+ 
+ //-----------------------------------------------------------------------------
+ 
+diff --git a/umbrello/basictypes.h b/umbrello/basictypes.h
+index 62492988792752f6987e4410c6ae01dd9a5eb659..a387e67069cf2ab8954c087d7bf78c67d74b5fe4 100644
+--- a/umbrello/basictypes.h
++++ b/umbrello/basictypes.h
+@@ -68,6 +68,33 @@ namespace Uml
+         Enum fromInt(int item);
+     }
+ 
++    namespace TypeQualifiers {
++
++        enum Enum{
++            None,
++            Const,
++            Volatile,
++            Mutable,
++            ConstVolatile
++        };
++
++        QString toString(Enum item);
++        Enum fromString(const QString& item);
++        Enum fromInt(int item);
++    }
++
++    namespace TypeModifiers{
++        enum Enum{
++            None,
++            Pointer,
++            Reference
++        };
++
++        QString toString(Enum item);
++        Enum fromString(const QString& item);
++        Enum fromInte(int item);
++    }
++
+     /**
+      * Supported diagram types.
+      */
+diff --git a/umbrello/dialogs/pages/classgeneralpage.cpp b/umbrello/dialogs/pages/classgeneralpage.cpp
+index ec8bfcb98942ff48fe6685cfcd2c022a94122dfb..57534bbffbcb94ff3d4b9560937ad729a82afbf8 100644
+--- a/umbrello/dialogs/pages/classgeneralpage.cpp
++++ b/umbrello/dialogs/pages/classgeneralpage.cpp
+@@ -93,7 +93,8 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLObject* o)
+     m_nameWidget->addToLayout(m_pNameLayout, 0);
+ 
+     if (t != UMLObject::ot_Stereotype) {
+-        m_stereotypeWidget = new UMLStereotypeWidget(m_pObject);
++        m_stereotypeWidget = new UMLStereotypeWidget();
++        m_stereotypeWidget->setUMLObject(m_pObject);
+         if (t == UMLObject::ot_Interface || t == UMLObject::ot_Datatype || t == UMLObject::ot_Enum) {
+             m_stereotypeWidget->setEditable(false);
+         }
+@@ -143,11 +144,13 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLObject* o)
+ 
+     // setup scope
+     if (t != UMLObject::ot_Stereotype) {
+-        m_visibilityEnumWidget = new VisibilityEnumWidget(m_pObject, this);
++        m_visibilityEnumWidget = new VisibilityEnumWidget();
++        m_visibilityEnumWidget->setUMLObject(m_pObject);
+         m_visibilityEnumWidget->addToLayout(topLayout);
+     }
+ 
+-    m_docWidget = new DocumentationWidget(m_pObject, this);
++    m_docWidget = new DocumentationWidget();
++    m_docWidget->setUMLObject(m_pObject);
+     topLayout->addWidget(m_docWidget);
+ }
+ 
+@@ -252,7 +255,8 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLWidget* widget
+     m_nameWidget->addToLayout(m_pNameLayout, 0);
+ 
+     if (widget->umlObject()) {
+-        m_stereotypeWidget = new UMLStereotypeWidget(widget->umlObject());
++        m_stereotypeWidget = new UMLStereotypeWidget();
++        m_stereotypeWidget->setUMLObject(widget->umlObject());
+         m_stereotypeWidget->addToLayout(m_pNameLayout, 1);
+     }
+ 
+diff --git a/umbrello/dialogs/parameterpropertiesdialog.cpp b/umbrello/dialogs/parameterpropertiesdialog.cpp
+index a6468b4339680f626498d3b606d355a8ddc7707e..61730d7151a308d5542f08b5788702fa002fdf10 100644
+--- a/umbrello/dialogs/parameterpropertiesdialog.cpp
++++ b/umbrello/dialogs/parameterpropertiesdialog.cpp
+@@ -71,7 +71,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
+     propLayout->setSpacing(10);
+     propLayout->setMargin(margin);
+ 
+-    m_datatypeWidget = new UMLDatatypeWidget(m_pAtt);
++    m_datatypeWidget = new UMLDatatypeWidget();
++    m_datatypeWidget->setAttribute(m_pAtt);
+     m_datatypeWidget->addToLayout(propLayout, 0);
+ 
+     Dialog_Utils::makeLabeledEditField(propLayout, 1,
+@@ -82,7 +83,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
+                                     m_pInitialL, i18n("&Initial value:"),
+                                     m_pInitialLE, attr->getInitialValue());
+ 
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pAtt);
++    m_stereotypeWidget = new UMLStereotypeWidget();
++    m_stereotypeWidget->setUMLObject(m_pAtt);
+     m_stereotypeWidget->addToLayout(propLayout, 3);
+ 
+     m_pKindGB =  new QGroupBox(i18n("Passing Direction"));
+@@ -102,7 +104,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
+ 
+     topLayout->addWidget(m_pKindGB);
+ 
+-    m_docWidget = new DocumentationWidget(m_pAtt);
++    m_docWidget = new DocumentationWidget();
++    m_docWidget->setUMLObject(m_pAtt);
+     topLayout->addWidget(m_docWidget);
+ 
+     // Check the proper Kind radiobutton.
+diff --git a/umbrello/dialogs/umlattributedialog.cpp b/umbrello/dialogs/umlattributedialog.cpp
+index cb16c946714ed36ed8f36aa70b0c52f411e706d4..33ba6995d0253224bee7a2fc1d153cc7fac9dce8 100644
+--- a/umbrello/dialogs/umlattributedialog.cpp
++++ b/umbrello/dialogs/umlattributedialog.cpp
+@@ -14,21 +14,14 @@
+ // app includes
+ #include "attribute.h"
+ #include "classifier.h"
+-#include "documentationwidget.h"
+ #include "template.h"
+ #include "umldoc.h"
+ #include "uml.h"
+-#include "umldatatypewidget.h"
+-#include "umlstereotypewidget.h"
+-#include "visibilityenumwidget.h"
+ #include "dialog_utils.h"
+ #include "object_factory.h"
+ #include "import_utils.h"
+ 
+ // kde includes
+-#include <klineedit.h>
+-#include <kcombobox.h>
+-#include <kcompletion.h>
+ #include <KLocalizedString>
+ #include <KMessageBox>
+ 
+@@ -42,11 +35,14 @@
+ #include <QRadioButton>
+ #include <QVBoxLayout>
+ 
+-UMLAttributeDialog::UMLAttributeDialog(QWidget * pParent, UMLAttribute * pAttribute)
++UMLAttributeDialog::UMLAttributeDialog(QWidget *pParent, UMLAttribute *pAttribute)
+   : SinglePageDialogBase(pParent)
++  , ui(new Ui::UMLAttributeDialog)
++  , m_pAttribute(pAttribute)
+ {
+     setCaption(i18n("Attribute Properties"));
+-    m_pAttribute = pAttribute;
++    activeLanguage = UMLApp::app()->activeLanguage();
++    ui->setupUi(mainWidget());
+     setupDialog();
+ }
+ 
+@@ -59,45 +55,19 @@ UMLAttributeDialog::~UMLAttributeDialog()
+  */
+ void UMLAttributeDialog::setupDialog()
+ {
+-    int margin = fontMetrics().height();
+-
+-    QFrame * frame = new QFrame(this);
+-    setMainWidget(frame);
+-    QVBoxLayout * mainLayout = new QVBoxLayout(frame);
+-
+-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout * valuesLayout = new QGridLayout(m_pValuesGB);
+-    valuesLayout->setMargin(margin);
+-    valuesLayout->setSpacing(10);
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
+-    m_datatypeWidget->addToLayout(valuesLayout, 0);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
+-                                    m_pNameL, i18nc("attribute name", "&Name:"),
+-                                    m_pNameLE, m_pAttribute->name());
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 2,
+-                                    m_pInitialL, i18n("&Initial value:"),
+-                                    m_pInitialLE, m_pAttribute->getInitialValue());
+-
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pAttribute);
+-    m_stereotypeWidget->addToLayout(valuesLayout, 3);
+-
+-    m_pStaticCB = new QCheckBox(i18n("Classifier &scope (\"static\")"), m_pValuesGB);
+-    m_pStaticCB->setChecked(m_pAttribute->isStatic());
+-    valuesLayout->addWidget(m_pStaticCB, 4, 0);
+-
+-    mainLayout->addWidget(m_pValuesGB);
+-    m_visibilityEnumWidget = new VisibilityEnumWidget(m_pAttribute, this);
+-    m_visibilityEnumWidget->addToLayout(mainLayout);
+-
+-    m_docWidget = new DocumentationWidget(m_pAttribute, this);
+-    mainLayout->addWidget(m_docWidget);
+-
+-    m_pNameLE->setFocus();
+-    connect(m_pNameLE, SIGNAL(textChanged(QString)), SLOT(slotNameChanged(QString)));
+-    slotNameChanged(m_pNameLE->text());
++    ui->dataTypeWidget->setClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
++    if(activeLanguage == Uml::ProgrammingLanguage::Cpp){
++        ui->typeQualifiersWidget->setUMLClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
++        ui->typeModifierWidget->setUMLClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
++        ui->cb_classifierScopeStatic->setVisible(true);
++    }else{
++        ui->cb_classifierScopeStatic->setVisible(false);
++        ui->typeModifierWidget->setVisible(false);
++        ui->typeQualifiersWidget->setVisible(false);
++    }
++    ui->stereotypeWidget->setUMLObject(m_pAttribute);
++    ui->visibilityWidget->setUMLObject(m_pAttribute);
++    ui->documentationWidget->setUMLObject(m_pAttribute);
+ }
+ 
+ void UMLAttributeDialog::slotNameChanged(const QString &_text)
+@@ -111,11 +81,11 @@ void UMLAttributeDialog::slotNameChanged(const QString &_text)
+  */
+ bool UMLAttributeDialog::apply()
+ {
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if (name.isEmpty()) {
+         KMessageBox::error(this, i18n("You have entered an invalid attribute name."),
+                            i18n("Attribute Name Invalid"), 0);
+-        m_pNameLE->setText(m_pAttribute->name());
++        ui->tb_name->setText(m_pAttribute->name());
+         return false;
+     }
+     UMLClassifier * pConcept = dynamic_cast<UMLClassifier *>(m_pAttribute->parent());
+@@ -123,21 +93,24 @@ bool UMLAttributeDialog::apply()
+     if (o && o != m_pAttribute) {
+         KMessageBox::error(this, i18n("The attribute name you have chosen is already being used in this operation."),
+                            i18n("Attribute Name Not Unique"), 0);
+-        m_pNameLE->setText(m_pAttribute->name());
++        ui->tb_name->setText(m_pAttribute->name());
+         return false;
+     }
+     m_pAttribute->setName(name);
+-    m_visibilityEnumWidget->apply();
++    ui->visibilityWidget->apply();
+ 
+     // Set the scope as the default in the option state
+     Settings::optionState().classState.defaultAttributeScope = m_pAttribute->visibility();
+ 
+-    m_pAttribute->setInitialValue(m_pInitialLE->text());
+-    m_stereotypeWidget->apply();
+-    m_pAttribute->setStatic(m_pStaticCB->isChecked());
+-
+-    m_datatypeWidget->apply();
+-    m_docWidget->apply();
++    m_pAttribute->setInitialValue(ui->tb_initialValue->text());
++    ui->stereotypeWidget->apply();
++    ui->documentationWidget->apply();
++    if(activeLanguage == Uml::ProgrammingLanguage::Cpp){
++        ui->typeQualifiersWidget->apply();
++        ui->typeModifierWidget->apply();
++        m_pAttribute->setStatic(ui->cb_classifierScopeStatic->isChecked());
++    }
++    ui->dataTypeWidget->apply();
+ 
+     return true;
+ }
+diff --git a/umbrello/dialogs/umlattributedialog.h b/umbrello/dialogs/umlattributedialog.h
+index 7e0166036cfed65941bfa5f6081916cfe35263de..c02ee41ec29daf84beb54d8327729700172ff694 100644
+--- a/umbrello/dialogs/umlattributedialog.h
++++ b/umbrello/dialogs/umlattributedialog.h
+@@ -12,17 +12,8 @@
+ #define UMLATTRIBUTEDIALOG_H
+ 
+ #include "singlepagedialogbase.h"
+-
+-class DocumentationWidget;
+-class QCheckBox;
+-class QGroupBox;
+-class QRadioButton;
+-class QLabel;
+-class UMLAttribute;
+-class KLineEdit;
+-class UMLDatatypeWidget;
+-class UMLStereotypeWidget;
+-class VisibilityEnumWidget;
++#include "basictypes.h"
++#include "ui_umlattributedialog.h"
+ 
+ /**
+  * @author Paul Hensgen
+@@ -35,6 +26,10 @@ public:
+     UMLAttributeDialog(QWidget * pParent, UMLAttribute * pAttribute);
+     ~UMLAttributeDialog();
+ 
++private:
++    Ui::UMLAttributeDialog *ui;
++    Uml::ProgrammingLanguage::Enum activeLanguage;
++
+ protected:
+     void setupDialog();
+     bool apply();
+@@ -44,18 +39,9 @@ protected:
+      */
+     UMLAttribute * m_pAttribute;
+ 
+-    //GUI Widgets
+-    QGroupBox * m_pValuesGB;
+-    QLabel * m_pNameL, * m_pInitialL;
+-    KLineEdit * m_pNameLE, * m_pInitialLE;
+-    QCheckBox* m_pStaticCB;
+-    UMLDatatypeWidget *m_datatypeWidget;
+-    UMLStereotypeWidget *m_stereotypeWidget;
+-    VisibilityEnumWidget *m_visibilityEnumWidget;
+-    DocumentationWidget *m_docWidget;
+-
+ public slots:
+     void slotNameChanged(const QString &);
++
+ };
+ 
+ #endif
+diff --git a/umbrello/dialogs/umlattributedialog.ui b/umbrello/dialogs/umlattributedialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..40c81ef4fcd261c2bf52573e02997a8d9c319944
+--- /dev/null
++++ b/umbrello/dialogs/umlattributedialog.ui
+@@ -0,0 +1,145 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLAttributeDialog</class>
++ <widget class="QWidget" name="UMLAttributeDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>464</width>
++    <height>300</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout_3">
++   <item>
++    <widget class="QLabel" name="label">
++     <property name="text">
++      <string>General Properties</string>
++     </property>
++     <property name="alignment">
++      <set>Qt::AlignCenter</set>
++     </property>
++    </widget>
++   </item>
++   <item>
++    <layout class="QHBoxLayout" name="horizontalLayout_3">
++     <item>
++      <layout class="QVBoxLayout" name="verticalLayout">
++       <item>
++        <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
++       </item>
++       <item>
++        <layout class="QHBoxLayout" name="horizontalLayout_2">
++         <item>
++          <widget class="QLabel" name="label_3">
++           <property name="text">
++            <string>Name:</string>
++           </property>
++          </widget>
++         </item>
++         <item>
++          <widget class="QLineEdit" name="tb_name"/>
++         </item>
++        </layout>
++       </item>
++      </layout>
++     </item>
++     <item>
++      <layout class="QVBoxLayout" name="verticalLayout_2">
++       <item>
++        <widget class="UMLTypeModifierWidget" name="typeModifierWidget" native="true"/>
++       </item>
++       <item>
++        <layout class="QHBoxLayout" name="horizontalLayout">
++         <item>
++          <widget class="QLabel" name="label_4">
++           <property name="text">
++            <string>Initial Value:</string>
++           </property>
++          </widget>
++         </item>
++         <item>
++          <widget class="QLineEdit" name="tb_initialValue"/>
++         </item>
++        </layout>
++       </item>
++      </layout>
++     </item>
++    </layout>
++   </item>
++   <item>
++    <layout class="QHBoxLayout" name="horizontalLayout_5">
++     <item>
++      <widget class="VisibilityEnumWidget" name="visibilityWidget" native="true"/>
++     </item>
++     <item>
++      <widget class="UmlTypeQualifiersWidget" name="typeQualifiersWidget" native="true"/>
++     </item>
++    </layout>
++   </item>
++   <item>
++    <widget class="QCheckBox" name="cb_classifierScopeStatic">
++     <property name="text">
++      <string>Classifier Scope(&quot;static&quot;)</string>
++     </property>
++    </widget>
++   </item>
++   <item>
++    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true">
++     <property name="sizePolicy">
++      <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++       <horstretch>0</horstretch>
++       <verstretch>0</verstretch>
++      </sizepolicy>
++     </property>
++    </widget>
++   </item>
++   <item>
++    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>VisibilityEnumWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/visibilityenumwidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>DocumentationWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/documentationwidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UmlTypeQualifiersWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umltypequalifierswidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLTypeModifierWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umltypemodifierwidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/umlentityattributedialog.cpp b/umbrello/dialogs/umlentityattributedialog.cpp
+index 0923c6819a3614677bd03396f88c949324142736..4c27b0f80fca535cbce572e1b8d8999df6727410 100644
+--- a/umbrello/dialogs/umlentityattributedialog.cpp
++++ b/umbrello/dialogs/umlentityattributedialog.cpp
+@@ -43,9 +43,11 @@
+ 
+ UMLEntityAttributeDialog::UMLEntityAttributeDialog(QWidget * pParent, UMLEntityAttribute * pEntityAttribute)
+   : SinglePageDialogBase(pParent)
++  , ui(new Ui::UMLEntityAttributeDialog)
++  , m_pEntityAttribute(pEntityAttribute)
+ {
+     setCaption(i18n("Entity Attribute Properties"));
+-    m_pEntityAttribute = pEntityAttribute;
++    ui->setupUi(mainWidget());
+     setupDialog();
+ }
+ 
+@@ -58,69 +60,19 @@ UMLEntityAttributeDialog::~UMLEntityAttributeDialog()
+  */
+ void UMLEntityAttributeDialog::setupDialog()
+ {
+-    int margin = fontMetrics().height();
+-    QFrame *frame = new QFrame(this);
+-    setMainWidget(frame);
+-    QVBoxLayout * mainLayout = new QVBoxLayout(frame);
+-
+-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout * valuesLayout = new QGridLayout(m_pValuesGB);
+-    valuesLayout->setMargin(margin);
+-    valuesLayout->setSpacing(10);
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(m_pEntityAttribute);
+-    m_datatypeWidget->addToLayout(valuesLayout, 0);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
+-                                    m_pNameL, i18nc("name of entity attribute", "&Name:"),
+-                                    m_pNameLE, m_pEntityAttribute->name());
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 2,
+-                                    m_pInitialL, i18n("&Default value:"),
+-                                    m_pInitialLE, m_pEntityAttribute->getInitialValue());
+-
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pEntityAttribute);
+-    m_stereotypeWidget->addToLayout(valuesLayout, 3);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 4,
+-                                    m_pValuesL, i18n("Length/Values:"),
+-                                    m_pValuesLE, m_pEntityAttribute->getValues());
+-
+-    m_pAutoIncrementCB = new QCheckBox(i18n("&Auto increment"), m_pValuesGB);
+-    m_pAutoIncrementCB->setChecked(m_pEntityAttribute->getAutoIncrement());
+-    valuesLayout->addWidget(m_pAutoIncrementCB, 5, 0);
+-
+-    m_pNullCB = new QCheckBox(i18n("Allow &null"), m_pValuesGB);
+-    m_pNullCB->setChecked(m_pEntityAttribute->getNull());
+-    valuesLayout->addWidget(m_pNullCB, 6, 0);
++    ui->dataTypeWidget->setEntityAttribute(m_pEntityAttribute);
++    ui->stereotypeWidget->setUMLObject(m_pEntityAttribute);
++    ui->ck_autoIncrement->setChecked(m_pEntityAttribute->getAutoIncrement());
++    ui->ck_allowNull->setChecked(m_pEntityAttribute->getNull());
+ 
+     // enable/disable isNull depending on the state of Auto Increment Check Box
+-    slotAutoIncrementStateChanged(m_pAutoIncrementCB->isChecked());
+-
+-    m_pAttributesL = new QLabel(i18n("Attributes:"), m_pValuesGB);
+-    valuesLayout->addWidget(m_pAttributesL, 7, 0);
+-
+-    m_pAttributesCB = new KComboBox(true, m_pValuesGB);
+-#if QT_VERSION < 0x050000
+-    m_pAttributesCB->setCompletionMode(KGlobalSettings::CompletionPopup);
+-#endif
+-    valuesLayout->addWidget(m_pAttributesCB, 7, 1);
+-    m_pAttributesL->setBuddy(m_pAttributesCB);
++    slotAutoIncrementStateChanged(ui->ck_autoIncrement->isChecked());
+ 
+     insertAttribute(m_pEntityAttribute->getAttributes());
+-    insertAttribute(QString::fromLatin1("binary"), m_pAttributesCB->count());
+-    insertAttribute(QString::fromLatin1("unsigned"), m_pAttributesCB->count());
+-    insertAttribute(QString::fromLatin1("unsigned zerofill"), m_pAttributesCB->count());
+-
+-    mainLayout->addWidget(m_pValuesGB);
+-
+-    m_pScopeGB = new QGroupBox(i18n("Indexing"), frame);
+-    QHBoxLayout* scopeLayout = new QHBoxLayout(m_pScopeGB);
+-    scopeLayout->setMargin(margin);
+-
+-    m_pNoneRB = new QRadioButton(i18n("&Not Indexed"), m_pScopeGB);
+-    scopeLayout->addWidget(m_pNoneRB);
+-
++    insertAttribute(QString::fromLatin1("binary"), ui->cb_attributesTypes->count());
++    insertAttribute(QString::fromLatin1("unsigned"), ui->cb_attributesTypes->count());
++    insertAttribute(QString::fromLatin1("unsigned zerofill"), ui->cb_attributesTypes->count());
++#if 0
+     /*
+     m_pPublicRB = new QRadioButton(i18n("&Primary"), m_pScopeGB);
+     scopeLayout->addWidget(m_pPublicRB);
+@@ -129,10 +81,6 @@ void UMLEntityAttributeDialog::setupDialog()
+     scopeLayout->addWidget(m_pProtectedRB);
+     */
+ 
+-    m_pPrivateRB = new QRadioButton(i18n("&Indexed"), m_pScopeGB);
+-    scopeLayout->addWidget(m_pPrivateRB);
+-
+-    mainLayout->addWidget(m_pScopeGB);
+     UMLEntityAttribute::DBIndex_Type scope = m_pEntityAttribute->indexType();
+ 
+     /*
+@@ -152,6 +100,11 @@ void UMLEntityAttributeDialog::setupDialog()
+     connect(m_pNameLE, SIGNAL(textChanged(QString)), SLOT(slotNameChanged(QString)));
+     connect(m_pAutoIncrementCB, SIGNAL(clicked(bool)), this, SLOT(slotAutoIncrementStateChanged(bool)));
+     slotNameChanged(m_pNameLE->text());
++#endif
++    ui->tb_name->setFocus();
++    connect(ui->tb_name, &QLineEdit::textChanged, this, &UMLEntityAttributeDialog::slotNameChanged);
++    connect(ui->ck_autoIncrement, &QCheckBox::clicked, this, &UMLEntityAttributeDialog::slotAutoIncrementStateChanged);
++    slotNameChanged(ui->tb_name->text());
+ }
+ 
+ void UMLEntityAttributeDialog::slotNameChanged(const QString &_text)
+@@ -165,11 +118,11 @@ void UMLEntityAttributeDialog::slotNameChanged(const QString &_text)
+  */
+ bool UMLEntityAttributeDialog::apply()
+ {
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if (name.isEmpty()) {
+         KMessageBox::error(this, i18n("You have entered an invalid entity attribute name."),
+                            i18n("Entity Attribute Name Invalid"), 0);
+-        m_pNameLE->setText(m_pEntityAttribute->name());
++        ui->tb_name->setText(m_pEntityAttribute->name());
+         return false;
+     }
+     UMLClassifier * pConcept = dynamic_cast<UMLClassifier *>(m_pEntityAttribute->parent());
+@@ -177,17 +130,17 @@ bool UMLEntityAttributeDialog::apply()
+     if (o && o != m_pEntityAttribute) {
+         KMessageBox::error(this, i18n("The entity attribute name you have chosen is already being used in this operation."),
+                            i18n("Entity Attribute Name Not Unique"), 0);
+-        m_pNameLE->setText(m_pEntityAttribute->name());
++        ui->tb_name->setText(m_pEntityAttribute->name());
+         return false;
+     }
+     m_pEntityAttribute->setName(name);
+-    m_pEntityAttribute->setInitialValue(m_pInitialLE->text());
+-    m_stereotypeWidget->apply();
+-    m_pEntityAttribute->setValues(m_pValuesLE->text());
+-    m_pEntityAttribute->setAttributes(m_pAttributesCB->currentText());
+-    m_pEntityAttribute->setAutoIncrement(m_pAutoIncrementCB->isChecked());
+-    m_pEntityAttribute->setNull(m_pNullCB->isChecked());
+-
++    m_pEntityAttribute->setInitialValue(ui->tb_defaultValue->text());
++    ui->stereotypeWidget->apply();
++    m_pEntityAttribute->setValues(ui->tb_lenghtValues->text());
++    m_pEntityAttribute->setAttributes(ui->cb_attributesTypes->currentText());
++    m_pEntityAttribute->setAutoIncrement(ui->ck_autoIncrement->isChecked());
++    m_pEntityAttribute->setNull(ui->ck_allowNull->isChecked());
++#if 0
+     /*
+     if (m_pPublicRB->isChecked()) {
+         m_pEntityAttribute->setIndexType(UMLEntityAttribute::Primary);
+@@ -201,8 +154,8 @@ bool UMLEntityAttributeDialog::apply()
+     } else {
+         m_pEntityAttribute->setIndexType(UMLEntityAttribute::None);
+     }
+-
+-    m_datatypeWidget->apply();
++#endif
++    ui->dataTypeWidget->apply();
+     return true;
+ }
+ 
+@@ -211,8 +164,7 @@ bool UMLEntityAttributeDialog::apply()
+  */
+ void UMLEntityAttributeDialog::insertAttribute(const QString& type, int index)
+ {
+-    m_pAttributesCB->insertItem(index, type);
+-    m_pAttributesCB->completionObject()->addItem(type);
++    ui->cb_attributesTypes->insertItem(index, type);
+ }
+ 
+ /**
+@@ -221,10 +173,10 @@ void UMLEntityAttributeDialog::insertAttribute(const QString& type, int index)
+ void UMLEntityAttributeDialog::slotAutoIncrementStateChanged(bool checked)
+ {
+     if (checked == true) {
+-        m_pNullCB->setChecked(false);
+-        m_pNullCB->setEnabled(false);
++        ui->ck_allowNull->setChecked(false);
++        ui->ck_allowNull->setEnabled(false);
+     } else if (checked == false) {
+-        m_pNullCB->setEnabled(true);
++        ui->ck_allowNull->setEnabled(true);
+     }
+ 
+ }
+diff --git a/umbrello/dialogs/umlentityattributedialog.h b/umbrello/dialogs/umlentityattributedialog.h
+index 3233dea2f5a08a1b8fdaf5a0adc63418a0df96f5..865909cf0fc932ca71171479c8351738d8330f06 100644
+--- a/umbrello/dialogs/umlentityattributedialog.h
++++ b/umbrello/dialogs/umlentityattributedialog.h
+@@ -12,6 +12,7 @@
+ #define UMLENTITYATTRIBUTEDIALOG_H
+ 
+ #include "singlepagedialogbase.h"
++#include "ui_umlentityattributedialog.h"
+ 
+ class QCheckBox;
+ class QGroupBox;
+@@ -34,6 +35,9 @@ public:
+     UMLEntityAttributeDialog(QWidget* pParent, UMLEntityAttribute* pEntityAttribute);
+     ~UMLEntityAttributeDialog();
+ 
++private:
++    Ui::UMLEntityAttributeDialog *ui;
++
+ protected:
+ 
+     void setupDialog();
+@@ -47,18 +51,6 @@ protected:
+      */
+     UMLEntityAttribute * m_pEntityAttribute;
+ 
+-    //GUI Widgets
+-    QGroupBox * m_pAttsGB, * m_pValuesGB;
+-    QGroupBox * m_pScopeGB;
+-    QRadioButton * m_pPublicRB, * m_pPrivateRB,  * m_pProtectedRB, * m_pNoneRB;
+-    QLabel * m_pNameL, * m_pInitialL, * m_pValuesL, * m_pAttributesL ;
+-    KComboBox * m_pAttributesCB;
+-    KLineEdit * m_pNameLE, * m_pInitialLE, * m_pValuesLE;
+-    QCheckBox* m_pAutoIncrementCB;
+-    QCheckBox* m_pNullCB;
+-    UMLDatatypeWidget *m_datatypeWidget;
+-    UMLStereotypeWidget *m_stereotypeWidget;
+-
+ public slots:
+     void slotAutoIncrementStateChanged(bool checked);
+     void slotNameChanged(const QString &);
+diff --git a/umbrello/dialogs/umlentityattributedialog.ui b/umbrello/dialogs/umlentityattributedialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..dc9b7b03d7ad0cfb0665e1c585888c874d807cd0
+--- /dev/null
++++ b/umbrello/dialogs/umlentityattributedialog.ui
+@@ -0,0 +1,137 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLEntityAttributeDialog</class>
++ <widget class="QWidget" name="UMLEntityAttributeDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>286</width>
++    <height>386</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <property name="layoutDirection">
++   <enum>Qt::LeftToRight</enum>
++  </property>
++  <layout class="QGridLayout" name="gridLayout">
++   <item row="4" column="3">
++    <widget class="QLineEdit" name="tb_defaultValue"/>
++   </item>
++   <item row="8" column="0" colspan="4">
++    <widget class="QCheckBox" name="ck_allowNull">
++     <property name="text">
++      <string>Allow Null</string>
++     </property>
++    </widget>
++   </item>
++   <item row="0" column="0" colspan="4">
++    <widget class="QLabel" name="label">
++     <property name="layoutDirection">
++      <enum>Qt::LeftToRight</enum>
++     </property>
++     <property name="text">
++      <string>General Properties</string>
++     </property>
++     <property name="alignment">
++      <set>Qt::AlignCenter</set>
++     </property>
++    </widget>
++   </item>
++   <item row="3" column="3">
++    <widget class="QLineEdit" name="tb_name"/>
++   </item>
++   <item row="6" column="0" colspan="3">
++    <widget class="QLabel" name="label_4">
++     <property name="text">
++      <string>Lenght/Values:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="10" column="0" colspan="4">
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>Indexing</string>
++     </property>
++     <layout class="QHBoxLayout" name="horizontalLayout_5">
++      <item>
++       <widget class="QRadioButton" name="radioButton">
++        <property name="text">
++         <string>Not Inde&amp;xed</string>
++        </property>
++        <property name="checked">
++         <bool>true</bool>
++        </property>
++       </widget>
++      </item>
++      <item>
++       <widget class="QRadioButton" name="radioButton_2">
++        <property name="text">
++         <string>Indexed</string>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++   <item row="3" column="0">
++    <widget class="QLabel" name="label_2">
++     <property name="text">
++      <string>Name:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="4" column="0" colspan="3">
++    <widget class="QLabel" name="label_3">
++     <property name="text">
++      <string>Default Value:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="1" column="0" colspan="4">
++    <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
++   </item>
++   <item row="9" column="0" colspan="2">
++    <widget class="QLabel" name="label_5">
++     <property name="text">
++      <string>Attributes:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="9" column="2" colspan="2">
++    <widget class="QComboBox" name="cb_attributesTypes"/>
++   </item>
++   <item row="7" column="0" colspan="4">
++    <widget class="QCheckBox" name="ck_autoIncrement">
++     <property name="text">
++      <string>Auto Increment:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="5" column="0" colspan="4">
++    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true"/>
++   </item>
++   <item row="6" column="3">
++    <widget class="QLineEdit" name="tb_lenghtValues"/>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/umloperationdialog.cpp b/umbrello/dialogs/umloperationdialog.cpp
+index 685fa30bc7d8d013b5c4c00437a486b16a78b160..741b8d7018eb06a7bbbf9d85ad0de7436ff426bf 100644
+--- a/umbrello/dialogs/umloperationdialog.cpp
++++ b/umbrello/dialogs/umloperationdialog.cpp
+@@ -59,8 +59,10 @@
+  */
+ UMLOperationDialog::UMLOperationDialog(QWidget * parent, UMLOperation * pOperation)
+   : SinglePageDialogBase(parent)
++  , ui(new Ui::UMLOperationDialog)
+ {
+     setCaption(i18n("Operation Properties"));
++    ui->setupUi(mainWidget());
+     m_operation = pOperation;
+     m_doc = UMLApp::app()->document();
+     m_menu = 0;
+@@ -79,121 +81,39 @@ UMLOperationDialog::~UMLOperationDialog()
+  */
+ void UMLOperationDialog::setupDialog()
+ {
+-    QFrame *frame = new QFrame(this);
+-    setMainWidget(frame);
+-    int margin = fontMetrics().height();
+-    QVBoxLayout * topLayout = new QVBoxLayout(frame);
+-
+-    m_pGenGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout * genLayout = new QGridLayout(m_pGenGB);
+-    genLayout->setColumnStretch(1, 1);
+-    genLayout->setColumnStretch(3, 1);
+-    genLayout->addItem(new QSpacerItem(200, 0), 0, 1);
+-    genLayout->addItem(new QSpacerItem(200, 0), 0, 3);
+-    genLayout->setMargin(margin);
+-    genLayout->setSpacing(10);
+-
+-    Dialog_Utils::makeLabeledEditField(genLayout, 0,
+-                                    m_pNameL, i18nc("operation name", "&Name:"),
+-                                    m_pNameLE, m_operation->name());
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(m_operation);
+-    m_datatypeWidget->addToLayout(genLayout, 0, 2);
+-
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_operation);
+-    m_stereotypeWidget->addToLayout(genLayout, 1);
+-
+-    m_pAbstractCB = new QCheckBox(i18n("&Abstract operation"), m_pGenGB);
+-    m_pAbstractCB->setChecked(m_operation->isAbstract());
+-    genLayout->addWidget(m_pAbstractCB, 2, 0);
+-    m_pStaticCB = new QCheckBox(i18n("Classifier &scope (\"static\")"), m_pGenGB);
+-    m_pStaticCB->setChecked(m_operation->isStatic());
+-    genLayout->addWidget(m_pStaticCB, 2, 1);
+-    m_pQueryCB = new QCheckBox(i18n("&Query (\"const\")"), m_pGenGB);
+-    m_pQueryCB->setChecked(m_operation->getConst());
+-    genLayout->addWidget(m_pQueryCB, 2, 2);
+-
+-    m_visibilityEnumWidget = new VisibilityEnumWidget(m_operation, this);
+-
+-    m_docWidget = new DocumentationWidget(m_operation, this);
+-
+-    m_pParmsGB = new QGroupBox(i18n("Parameters"), frame);
+-    QVBoxLayout* parmsLayout = new QVBoxLayout(m_pParmsGB);
+-    parmsLayout->setMargin(margin);
+-    parmsLayout->setSpacing(10);
+-
+-    // horizontal box contains the list box and the move up/down buttons
+-    QHBoxLayout* parmsHBoxLayout = new QHBoxLayout();
+-    m_pParmsLW = new QListWidget(m_pParmsGB);
+-    m_pParmsLW->setContextMenuPolicy(Qt::CustomContextMenu);
+-
+-    // the move up/down buttons (another vertical box)
+-    QVBoxLayout* buttonLayout = new QVBoxLayout();
+-
+-    m_pUpButton = new QToolButton(m_pParmsGB);
+-    m_pUpButton->setArrowType(Qt::UpArrow);
+-    m_pUpButton->setEnabled(false);
+-    buttonLayout->addWidget(m_pUpButton);
+-
+-    m_pDownButton = new QToolButton(m_pParmsGB);
+-    m_pDownButton->setArrowType(Qt::DownArrow);
+-    m_pDownButton->setEnabled(false);
+-    buttonLayout->addWidget(m_pDownButton);
+-
+-#if QT_VERSION >= 0x050000
+-    QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pParmsGB);
+-    QPushButton* newParam = buttonBox->addButton(i18n("Ne&w Parameter..."), QDialogButtonBox::ActionRole);
+-    connect(newParam, SIGNAL(clicked()), this, SLOT(slotNewParameter()));
+-    m_pDeleteButton = buttonBox->addButton(i18n("&Delete"), QDialogButtonBox::ActionRole);
+-    connect(m_pDeleteButton, SIGNAL(clicked()), this, SLOT(slotDeleteParameter()));
+-    m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), QDialogButtonBox::ActionRole);
+-    connect(m_pPropertiesButton, SIGNAL(clicked()), this, SLOT(slotParameterProperties()));
+-#else
+-    KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pParmsGB);
+-    buttonBox->addButton(i18n("Ne&w Parameter..."), KDialogButtonBox::ActionRole,
+-                          this, SLOT(slotNewParameter()));
+-    m_pDeleteButton = buttonBox->addButton(i18n("&Delete"), KDialogButtonBox::ActionRole,
+-                                            this, SLOT(slotDeleteParameter()));
+-    m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), KDialogButtonBox::ActionRole,
+-                          this, SLOT(slotParameterProperties()));
+-#endif
+-
+-    parmsHBoxLayout->addWidget(m_pParmsLW);
+-    parmsHBoxLayout->addLayout(buttonLayout);
+ 
+-    parmsLayout->addLayout(parmsHBoxLayout);
+-    parmsLayout->addWidget(buttonBox);
++    ui->stereotypeWidget->setUMLObject(m_operation);
++    ui->visibilityWidget->setUMLObject(m_operation);
++    ui->documentationWidget->setUMLObject(m_operation);
++    ui->list_parameters->setContextMenuPolicy(Qt::CustomContextMenu);
+ 
+-    topLayout->addWidget(m_pGenGB);
+-    topLayout->addWidget(m_visibilityEnumWidget);
+-    topLayout->addWidget(m_docWidget);
+-    topLayout->addWidget(m_pParmsGB);
++    // setup push buttons signals
++    connect(ui->pb_newParameter, &QPushButton::clicked, this, &UMLOperationDialog::slotNewParameter);
++    connect(ui->pb_delete, &QPushButton::clicked, this, &UMLOperationDialog::slotDeleteParameter);
++    connect(ui->pb_properties, &QPushButton::clicked, this, &UMLOperationDialog::slotParameterProperties);
+ 
+-    m_pDeleteButton->setEnabled(false);
+-    m_pPropertiesButton->setEnabled(false);
+-    m_pUpButton->setEnabled(false);
+-    m_pDownButton->setEnabled(false);
++    ui->pb_delete->setEnabled(false);
++    ui->pb_properties->setEnabled(false);
++    ui->pb_down->setEnabled(false);
++    ui->pb_up->setEnabled(false);
+ 
+     // fill in parm list box
+     UMLAttributeList list = m_operation->getParmList();
+     foreach (UMLAttribute* pAtt, list) {
+-        m_pParmsLW->addItem(pAtt->toString(Uml::SignatureType::SigNoVis));
++        ui->list_parameters->addItem(pAtt->toString(Uml::SignatureType::SigNoVis));
+     }
+ 
+     // setup parm list box signals
+-    connect(m_pUpButton, SIGNAL(clicked()), this, SLOT(slotParameterUp()));
+-    connect(m_pDownButton, SIGNAL(clicked()), this, SLOT(slotParameterDown()));
+-
+-    connect(m_pParmsLW, SIGNAL(itemClicked(QListWidgetItem*)),
+-            this, SLOT(slotParamsBoxClicked(QListWidgetItem*)));
+-    connect(m_pParmsLW, SIGNAL(customContextMenuRequested(QPoint)),
+-            this, SLOT(slotParmRightButtonPressed(QPoint)));
+-    connect(m_pParmsLW, SIGNAL(itemDoubleClicked(QListWidgetItem*)),
+-            this, SLOT(slotParmDoubleClick(QListWidgetItem*)));
+-
+-    m_pNameLE->setFocus();
+-    connect(m_pNameLE, SIGNAL(textChanged(QString)), SLOT(slotNameChanged(QString)));
+-    slotNameChanged(m_pNameLE->text());
++    connect(ui->pb_up, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterUp);
++    connect(ui->pb_down, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterDown);
++
++    connect(ui->list_parameters, &QListWidget::itemClicked, this, &UMLOperationDialog::slotParamsBoxClicked);
++    connect(ui->list_parameters, &QListWidget::customContextMenuRequested, this, &UMLOperationDialog::slotParmRightButtonPressed);
++    connect(ui->list_parameters, &QListWidget::itemDoubleClicked, this, &UMLOperationDialog::slotParmDoubleClick);
++
++    ui->tb_name->setFocus();
++
++    connect(ui->tb_name, &QLineEdit::textChanged, this, &UMLOperationDialog::slotNameChanged);
+ }
+ 
+ void UMLOperationDialog::slotNameChanged(const QString &_text)
+@@ -204,14 +124,12 @@ void UMLOperationDialog::slotNameChanged(const QString &_text)
+ void UMLOperationDialog::slotParmRightButtonPressed(const QPoint &p)
+ {
+     ListPopupMenu::MenuType type = ListPopupMenu::mt_Undefined;
+-    QListWidgetItem* item = m_pParmsLW->itemAt(p);
++    QListWidgetItem* item = ui->list_parameters->itemAt(p);
+     if (item) // pressed on an item
+-    {
+         type = ListPopupMenu::mt_Parameter_Selected;
+-    } else // pressed into fresh air
+-    {
++    else // pressed into fresh air
+         type = ListPopupMenu::mt_New_Parameter;
+-    }
++
+     if (m_menu) {
+         m_menu->hide();
+         disconnect(m_menu, SIGNAL(triggered(QAction*)), this, SLOT(slotMenuSelection(QAction*)));
+@@ -219,7 +137,7 @@ void UMLOperationDialog::slotParmRightButtonPressed(const QPoint &p)
+         m_menu = 0;
+     }
+     ListPopupMenu popup(this, type);
+-    QAction *triggered = popup.exec(m_pParmsLW->mapToGlobal(p));
++    QAction *triggered = popup.exec(ui->list_parameters->mapToGlobal(p));
+     slotMenuSelection(triggered);
+ }
+ 
+@@ -261,7 +179,7 @@ void UMLOperationDialog::slotNewParameter()
+         if (!pAtt) {
+             newAttribute->setID(UniqueID::gen());
+             m_operation->addParm(newAttribute);
+-            m_pParmsLW->addItem(newAttribute->toString(Uml::SignatureType::SigNoVis));
++            ui->list_parameters->addItem(newAttribute->toString(Uml::SignatureType::SigNoVis));
+             m_doc->setModified(true);
+         } else {
+             KMessageBox::sorry(this, i18n("The parameter name you have chosen\nis already being used in this operation."),
+@@ -276,26 +194,26 @@ void UMLOperationDialog::slotNewParameter()
+ 
+ void UMLOperationDialog::slotDeleteParameter()
+ {
+-    UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(m_pParmsLW->currentItem()));
++    UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(ui->list_parameters->currentItem()));
+ 
+     m_operation->removeParm(pOldAtt);
+-    m_pParmsLW->takeItem(m_pParmsLW->currentRow());
++    ui->list_parameters->takeItem(ui->list_parameters->currentRow());
+     m_doc->setModified(true);
+ 
+-    m_pDeleteButton->setEnabled(false);
+-    m_pPropertiesButton->setEnabled(false);
+-    m_pUpButton->setEnabled(false);
+-    m_pDownButton->setEnabled(false);
++    ui->pb_delete->setEnabled(false);
++    ui->pb_properties->setEnabled(false);
++    ui->pb_up->setEnabled(false);
++    ui->pb_down->setEnabled(false);
+ }
+ 
+ void UMLOperationDialog::slotParameterProperties()
+ {
+     UMLAttribute* pAtt = 0, * pOldAtt = 0;
+ 
+-    int position = m_pParmsLW->row(m_pParmsLW->currentItem());
++    int position = ui->list_parameters->row(ui->list_parameters->currentItem());
+     pOldAtt = m_operation->getParmList().at(position);
+     if (!pOldAtt) {
+-        uDebug() << "THE impossible has occurred for:" << m_pParmsLW->currentItem()->text();
++        uDebug() << "THE impossible has occurred for:" << ui->list_parameters->currentItem()->text();
+         return;
+     } // should never occur
+ 
+@@ -320,7 +238,7 @@ void UMLOperationDialog::slotParameterProperties()
+             pOldAtt->setName(oldAttName); // reset the name if there was a naming conflict
+         }
+ 
+-        QListWidgetItem* item = m_pParmsLW->currentItem();
++        QListWidgetItem* item = ui->list_parameters->currentItem();
+         item->setText(pOldAtt->toString(Uml::SignatureType::SigNoVis));
+         m_doc->setModified(true);
+     }
+@@ -330,14 +248,14 @@ void UMLOperationDialog::slotParameterProperties()
+ 
+ void UMLOperationDialog::slotParameterUp()
+ {
+-    int row = m_pParmsLW->currentRow();
+-    QListWidgetItem* item = m_pParmsLW->currentItem();
++    int row = ui->list_parameters->currentRow();
++    QListWidgetItem* item = ui->list_parameters->currentItem();
+     if (item) {
+-        UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(item));
++        UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(item));
+ 
+         m_operation->moveParmLeft(pOldAtt);
+-        m_pParmsLW->takeItem(row);
+-        m_pParmsLW->insertItem(row - 1, item);
++        ui->list_parameters->takeItem(row);
++        ui->list_parameters->insertItem(row - 1, item);
+ 
+         m_doc->setModified(true);
+         slotParamsBoxClicked(item);
+@@ -349,14 +267,14 @@ void UMLOperationDialog::slotParameterUp()
+ 
+ void UMLOperationDialog::slotParameterDown()
+ {
+-    int row = m_pParmsLW->currentRow();
+-    QListWidgetItem* item = m_pParmsLW->currentItem();
++    int row = ui->list_parameters->currentRow();
++    QListWidgetItem* item = ui->list_parameters->currentItem();
+     if (item) {
+-        UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(item));
++        UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(item));
+ 
+         m_operation->moveParmRight(pOldAtt);
+-        m_pParmsLW->takeItem(row);
+-        m_pParmsLW->insertItem(row + 1, item);
++        ui->list_parameters->takeItem(row);
++        ui->list_parameters->insertItem(row + 1, item);
+ 
+         m_doc->setModified(true);
+         slotParamsBoxClicked(item);
+@@ -372,18 +290,18 @@ void UMLOperationDialog::slotParameterDown()
+ void UMLOperationDialog::slotParamsBoxClicked(QListWidgetItem* parameterItem)
+ {
+     if (parameterItem) {
+-        m_pDeleteButton->setEnabled(true);
+-        m_pPropertiesButton->setEnabled(true);
+-        int row = m_pParmsLW->row(parameterItem);
+-        bool hasNext = (row < m_pParmsLW->count() - 1);
++        ui->pb_delete->setEnabled(true);
++        ui->pb_properties->setEnabled(true);
++        int row = ui->list_parameters->row(parameterItem);
++        bool hasNext = (row < ui->list_parameters->count() - 1);
+         bool hasPrev = (row > 0);
+-        m_pUpButton->setEnabled(hasPrev);
+-        m_pDownButton->setEnabled(hasNext);
++        ui->pb_up->setEnabled(hasPrev);
++        ui->pb_down->setEnabled(hasNext);
+     } else {
+-        m_pDeleteButton->setEnabled(false);
+-        m_pPropertiesButton->setEnabled(false);
+-        m_pUpButton->setEnabled(false);
+-        m_pDownButton->setEnabled(false);
++        ui->pb_delete->setEnabled(false);
++        ui->pb_properties->setEnabled(false);
++        ui->pb_up->setEnabled(false);
++        ui->pb_down->setEnabled(false);
+     }
+ }
+ 
+@@ -393,11 +311,11 @@ void UMLOperationDialog::slotParamsBoxClicked(QListWidgetItem* parameterItem)
+  */
+ bool UMLOperationDialog::apply()
+ {
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if(name.length() == 0) {
+         KMessageBox::error(this, i18n("You have entered an invalid operation name."),
+                            i18n("Operation Name Invalid"), 0);
+-        m_pNameLE->setText(m_operation->name());
++        ui->tb_name->setText(m_operation->name());
+         return false;
+     }
+ 
+@@ -413,11 +331,11 @@ bool UMLOperationDialog::apply()
+     }
+     m_operation->setName(name);
+ 
+-    m_visibilityEnumWidget->apply();
+-    m_datatypeWidget->apply();
+-    m_stereotypeWidget->apply();
++    ui->visibilityWidget->apply();
++    ui->dataTypeWidget->apply();
++    ui->stereotypeWidget->apply();
+ 
+-    bool isAbstract = m_pAbstractCB->isChecked();
++    bool isAbstract = ui->ck_abstract->isChecked();
+     m_operation->setAbstract(isAbstract);
+     if (isAbstract) {
+         /* If any operation is abstract then the owning class needs
+@@ -429,9 +347,9 @@ bool UMLOperationDialog::apply()
+             classifier->setAbstract(true);
+         }
+     }
+-    m_operation->setStatic(m_pStaticCB->isChecked());
+-    m_operation->setConst(m_pQueryCB->isChecked());
+-    m_docWidget->apply();
++    m_operation->setStatic(ui->ck_classifierScope->isChecked());
++    m_operation->setConst(ui->ck_queryConst->isChecked());
++    ui->documentationWidget->apply();
+ 
+     return true;
+ }
+diff --git a/umbrello/dialogs/umloperationdialog.h b/umbrello/dialogs/umloperationdialog.h
+index 8cc4e5a1d0b70f5a1bb0779c8d0c47f80204a6a0..9721bcf1c918e0ec4d6b664e221ab60e2e5d7caa 100644
+--- a/umbrello/dialogs/umloperationdialog.h
++++ b/umbrello/dialogs/umloperationdialog.h
+@@ -13,6 +13,7 @@
+ 
+ //kde includes
+ #include "singlepagedialogbase.h"
++#include "ui_umloperationdialog.h"
+ 
+ class DocumentationWidget;
+ class KComboBox;
+@@ -44,6 +45,8 @@ public:
+ 
+     UMLOperationDialog(QWidget * parent, UMLOperation * pOperation);
+     ~UMLOperationDialog();
++private:
++    Ui::UMLOperationDialog *ui;
+ 
+ protected:
+ 
+@@ -57,29 +60,6 @@ protected:
+     UMLDoc*           m_doc;        ///< The UMLDocument where all objects live.
+     ListPopupMenu*    m_menu;       ///< Menu used in parameter list box.
+ 
+-    //GUI widgets
+-    QGroupBox*            m_pParmsGB;
+-    QGroupBox*            m_pGenGB;
+-    QListWidget*          m_pParmsLW;
+-    QGroupBox*            m_pScopeGB;
+-    QRadioButton*         m_pPublicRB;
+-    QRadioButton*         m_pPrivateRB;
+-    QRadioButton*         m_pProtectedRB;
+-    QRadioButton*         m_pImplementationRB;
+-    QLabel*               m_pNameL;
+-    UMLDatatypeWidget*    m_datatypeWidget;
+-    UMLStereotypeWidget*  m_stereotypeWidget;
+-    KLineEdit*            m_pNameLE;
+-    QCheckBox*            m_pAbstractCB;
+-    QCheckBox*            m_pStaticCB;
+-    QCheckBox*            m_pQueryCB;
+-    QPushButton*          m_pDeleteButton;
+-    QPushButton*          m_pPropertiesButton;
+-    QToolButton*          m_pUpButton;
+-    QToolButton*          m_pDownButton;
+-    DocumentationWidget*  m_docWidget;
+-    VisibilityEnumWidget* m_visibilityEnumWidget;
+-
+ public slots:
+     void slotParmRightButtonPressed(const QPoint &p);
+     void slotParmDoubleClick(QListWidgetItem *item);
+diff --git a/umbrello/dialogs/umloperationdialog.ui b/umbrello/dialogs/umloperationdialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..4e9eeeac29a1ec1a519d21d0fad6ed10543cd329
+--- /dev/null
++++ b/umbrello/dialogs/umloperationdialog.ui
+@@ -0,0 +1,254 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLOperationDialog</class>
++ <widget class="QWidget" name="UMLOperationDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>515</width>
++    <height>539</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout_2">
++   <item>
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>General Properties</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout">
++      <item row="0" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout">
++        <item>
++         <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QLabel" name="label">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++          <property name="text">
++           <string>Name:</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QLineEdit" name="tb_name">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <spacer name="horizontalSpacer_2">
++          <property name="orientation">
++           <enum>Qt::Horizontal</enum>
++          </property>
++          <property name="sizeHint" stdset="0">
++           <size>
++            <width>40</width>
++            <height>20</height>
++           </size>
++          </property>
++         </spacer>
++        </item>
++       </layout>
++      </item>
++      <item row="1" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout_4">
++        <item>
++         <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <spacer name="horizontalSpacer_3">
++          <property name="orientation">
++           <enum>Qt::Horizontal</enum>
++          </property>
++          <property name="sizeHint" stdset="0">
++           <size>
++            <width>40</width>
++            <height>20</height>
++           </size>
++          </property>
++         </spacer>
++        </item>
++       </layout>
++      </item>
++      <item row="2" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout_3">
++        <item>
++         <widget class="QCheckBox" name="ck_abstract">
++          <property name="text">
++           <string>Abstract Operation</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QCheckBox" name="ck_classifierScope">
++          <property name="text">
++           <string>Classifier scope (&quot;static&quot;)</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QCheckBox" name="ck_queryConst">
++          <property name="text">
++           <string>Query (&quot;const&quot;)</string>
++          </property>
++         </widget>
++        </item>
++       </layout>
++      </item>
++     </layout>
++    </widget>
++   </item>
++   <item>
++    <widget class="VisibilityEnumWidget" name="visibilityWidget" native="true"/>
++   </item>
++   <item>
++    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
++   </item>
++   <item>
++    <widget class="QGroupBox" name="groupBox_2">
++     <property name="title">
++      <string>Parameters</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout_2">
++      <item row="0" column="0" rowspan="2">
++       <widget class="QListWidget" name="list_parameters">
++        <property name="sizePolicy">
++         <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
++          <horstretch>0</horstretch>
++          <verstretch>0</verstretch>
++         </sizepolicy>
++        </property>
++       </widget>
++      </item>
++      <item row="2" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout_2">
++        <item>
++         <spacer name="horizontalSpacer">
++          <property name="orientation">
++           <enum>Qt::Horizontal</enum>
++          </property>
++          <property name="sizeHint" stdset="0">
++           <size>
++            <width>40</width>
++            <height>20</height>
++           </size>
++          </property>
++         </spacer>
++        </item>
++        <item>
++         <widget class="QPushButton" name="pb_newParameter">
++          <property name="text">
++           <string>New Parameter</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QPushButton" name="pb_delete">
++          <property name="text">
++           <string>Delete</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QPushButton" name="pb_properties">
++          <property name="text">
++           <string>Properties</string>
++          </property>
++         </widget>
++        </item>
++       </layout>
++      </item>
++      <item row="1" column="1">
++       <widget class="QToolButton" name="pb_down">
++        <property name="text">
++         <string/>
++        </property>
++        <property name="arrowType">
++         <enum>Qt::DownArrow</enum>
++        </property>
++       </widget>
++      </item>
++      <item row="0" column="1">
++       <widget class="QToolButton" name="pb_up">
++        <property name="text">
++         <string/>
++        </property>
++        <property name="arrowType">
++         <enum>Qt::UpArrow</enum>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++   <item>
++    <spacer name="verticalSpacer">
++     <property name="orientation">
++      <enum>Qt::Vertical</enum>
++     </property>
++     <property name="sizeHint" stdset="0">
++      <size>
++       <width>20</width>
++       <height>40</height>
++      </size>
++     </property>
++    </spacer>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>DocumentationWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/documentationwidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>VisibilityEnumWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/visibilityenumwidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/umltemplatedialog.cpp b/umbrello/dialogs/umltemplatedialog.cpp
+index 766573772aeaf68eb4e965a30e5e8ae4be044713..42d4afe2c50d17cc026396003c39de9446ebb0b0 100644
+--- a/umbrello/dialogs/umltemplatedialog.cpp
++++ b/umbrello/dialogs/umltemplatedialog.cpp
+@@ -37,9 +37,11 @@
+ 
+ UMLTemplateDialog::UMLTemplateDialog(QWidget* pParent, UMLTemplate* pTemplate)
+   : SinglePageDialogBase(pParent)
++  , ui(new Ui::UMLTemplateDialog)
+ {
+     m_pTemplate = pTemplate;
+     setCaption(i18n("Template Properties"));
++    ui->setupUi(mainWidget());
+     setupDialog();
+ }
+ 
+@@ -52,32 +54,10 @@ UMLTemplateDialog::~UMLTemplateDialog()
+  */
+ void UMLTemplateDialog::setupDialog()
+ {
+-    int margin = fontMetrics().height();
+-
+-    QFrame *frame = new QFrame(this);
+-    setMainWidget(frame);
+-    QVBoxLayout* mainLayout = new QVBoxLayout(frame);
+-
+-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout* valuesLayout = new QGridLayout(m_pValuesGB);
+-    valuesLayout->setMargin(margin);
+-    valuesLayout->setSpacing(10);
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(m_pTemplate);
+-    m_datatypeWidget->addToLayout(valuesLayout, 0);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
+-                                    m_pNameL, i18nc("template name", "&Name:"),
+-                                    m_pNameLE, m_pTemplate->name());
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pTemplate);
+-    m_stereotypeWidget->addToLayout(valuesLayout, 2);
+-
+-    mainLayout->addWidget(m_pValuesGB);
+-
+-    m_docWidget = new DocumentationWidget(m_pTemplate, this);
+-    mainLayout->addWidget(m_docWidget);
+-
+-    m_pNameLE->setFocus();
++    ui->dataTypeWidget->setTemplate(m_pTemplate);
++    ui->stereotypeWidget->setUMLObject(m_pTemplate);
++    ui->documentationWidget->setUMLObject(m_pTemplate);
++    ui->tb_name->setFocus();
+ }
+ 
+ /**
+@@ -86,13 +66,13 @@ void UMLTemplateDialog::setupDialog()
+  */
+ bool UMLTemplateDialog::apply()
+ {
+-    m_datatypeWidget->apply();
++    ui->dataTypeWidget->apply();
+ 
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if(name.length() == 0) {
+         KMessageBox::error(this, i18n("You have entered an invalid template name."),
+                            i18n("Template Name Invalid"), 0);
+-        m_pNameLE->setText(m_pTemplate->name());
++        ui->tb_name->setText(m_pTemplate->name());
+         return false;
+     }
+ 
+@@ -102,13 +82,13 @@ bool UMLTemplateDialog::apply()
+         if (o && o != m_pTemplate) {
+             KMessageBox::error(this, i18n("The template parameter name you have chosen is already being used in this operation."),
+                                i18n("Template Name Not Unique"), 0);
+-            m_pNameLE->setText(m_pTemplate->name());
++            ui->tb_name->setText(m_pTemplate->name());
+             return false;
+         }
+     }
+     m_pTemplate->setName(name);
+-    m_stereotypeWidget->apply();
+-    m_docWidget->apply();
++    ui->stereotypeWidget->apply();
++    ui->documentationWidget->apply();
+ 
+     return true;
+ }
+diff --git a/umbrello/dialogs/umltemplatedialog.h b/umbrello/dialogs/umltemplatedialog.h
+index 2ab6dd3365ce978196836ade91278647fd4b5930..698ef9ea7028db5871a8bcf665b7b21f840c04c8 100644
+--- a/umbrello/dialogs/umltemplatedialog.h
++++ b/umbrello/dialogs/umltemplatedialog.h
+@@ -12,6 +12,7 @@
+ #define UMLTEMPLATEDIALOG_H
+ 
+ #include "singlepagedialogbase.h"
++#include "ui_umltemplatedialog.h"
+ 
+ class DocumentationWidget;
+ class KComboBox;
+@@ -34,6 +35,8 @@ class UMLTemplateDialog : public SinglePageDialogBase
+ public:
+     UMLTemplateDialog(QWidget* pParent, UMLTemplate* pAttribute);
+     ~UMLTemplateDialog();
++private:
++    Ui::UMLTemplateDialog *ui;
+ 
+ protected:
+ 
+@@ -46,14 +49,6 @@ protected:
+      */
+     UMLTemplate* m_pTemplate;
+ 
+-    // GUI Widgets
+-    QGroupBox *m_pValuesGB;
+-    QLabel *m_pNameL;
+-    KLineEdit *m_pNameLE;
+-    UMLDatatypeWidget *m_datatypeWidget;
+-    UMLStereotypeWidget *m_stereotypeWidget;
+-    DocumentationWidget *m_docWidget;
+-
+ protected:
+ 
+     void insertTypesSorted(const QString& type = QString());
+diff --git a/umbrello/dialogs/umltemplatedialog.ui b/umbrello/dialogs/umltemplatedialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..92b21a36d62d058c7dd9abf6df907ccee9830b27
+--- /dev/null
++++ b/umbrello/dialogs/umltemplatedialog.ui
+@@ -0,0 +1,74 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLTemplateDialog</class>
++ <widget class="QWidget" name="UMLTemplateDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>315</width>
++    <height>138</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QGridLayout" name="gridLayout">
++   <item row="0" column="0" colspan="2">
++    <widget class="QLabel" name="label">
++     <property name="text">
++      <string>General Properties</string>
++     </property>
++    </widget>
++   </item>
++   <item row="1" column="0" colspan="2">
++    <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
++   </item>
++   <item row="2" column="0">
++    <widget class="QLabel" name="label_2">
++     <property name="text">
++      <string>Name:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="2" column="1">
++    <widget class="QLineEdit" name="tb_name">
++     <property name="sizePolicy">
++      <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
++       <horstretch>0</horstretch>
++       <verstretch>0</verstretch>
++      </sizepolicy>
++     </property>
++    </widget>
++   </item>
++   <item row="3" column="0" colspan="2">
++    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true"/>
++   </item>
++   <item row="4" column="0" colspan="2">
++    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>DocumentationWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/documentationwidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/widgets/documentationwidget.cpp b/umbrello/dialogs/widgets/documentationwidget.cpp
+index 09cbe298e95ca877a7b0d9bdaacb5d358b01e945..88c40804d2087d1a47959e302e15ab8cc66d99e4 100644
+--- a/umbrello/dialogs/widgets/documentationwidget.cpp
++++ b/umbrello/dialogs/widgets/documentationwidget.cpp
+@@ -19,13 +19,10 @@
+ #include <QGroupBox>
+ #include <QHBoxLayout>
+ 
+-DocumentationWidget::DocumentationWidget(UMLObject *o, QWidget *parent) :
++DocumentationWidget::DocumentationWidget(QWidget *parent) :
+     QWidget(parent),
+-    m_object(o),
+     m_widget(0)
+ {
+-    Q_ASSERT(o);
+-    init(o->doc());
+ }
+ 
+ DocumentationWidget::DocumentationWidget(UMLWidget *w, QWidget *parent) :
+@@ -54,6 +51,13 @@ void DocumentationWidget::apply()
+         m_widget->setDocumentation(m_editField->toPlainText());
+ }
+ 
++void DocumentationWidget::setUMLObject(UMLObject *o)
++{
++    Q_ASSERT(o);
++    m_object = o;
++    init(o->doc());
++}
++
+ /**
+  * initialize widget
+  * @param text text to display
+diff --git a/umbrello/dialogs/widgets/documentationwidget.h b/umbrello/dialogs/widgets/documentationwidget.h
+index 279553ef97a398917d3578411d2d8e680b0a17eb..36234b5ed20efc0467d27bb031cf733ed3ca4fb3 100644
+--- a/umbrello/dialogs/widgets/documentationwidget.h
++++ b/umbrello/dialogs/widgets/documentationwidget.h
+@@ -25,11 +25,12 @@ class DocumentationWidget : public QWidget
+ {
+     Q_OBJECT
+ public:
+-    explicit DocumentationWidget(UMLObject *o, QWidget *parent = 0);
++    explicit DocumentationWidget(QWidget *parent = 0);
+     explicit DocumentationWidget(UMLWidget *w, QWidget *parent = 0);
+     ~DocumentationWidget();
+ 
+     void apply();
++    void setUMLObject(UMLObject *o);
+ 
+ protected:
+     QGroupBox *m_box;
+diff --git a/umbrello/dialogs/widgets/umldatatypewidget.cpp b/umbrello/dialogs/widgets/umldatatypewidget.cpp
+index 5cd1fbaab377f68722254d9f683b028c3b510d38..ef1ca7736f27f0c6e98e0dead5198eab2b180efb 100644
+--- a/umbrello/dialogs/widgets/umldatatypewidget.cpp
++++ b/umbrello/dialogs/widgets/umldatatypewidget.cpp
+@@ -30,69 +30,14 @@
+ #include <QLabel>
+ #include <QWidget>
+ 
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLAttribute *attribute, QWidget *parent)
+-  : QWidget(parent),
+-    m_attribute(attribute),
+-    m_datatype(0),
+-    m_entityAttribute(0),
+-    m_operation(0),
+-    m_template(0)
++UMLDatatypeWidget::UMLDatatypeWidget(QWidget *parent) : QWidget(parent)
++  , m_attribute(nullptr)
++  , m_datatype(nullptr)
++  , m_operation(nullptr)
++  , m_entityAttribute(nullptr)
++  , m_template(nullptr)
+ {
+     init();
+-    m_parent = dynamic_cast<UMLClassifier*>(m_attribute->parent()->parent());
+-    insertTypesSortedParameter(m_attribute->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLClassifierListItem *datatype, QWidget *parent)
+-  : QWidget(parent),
+-    m_attribute(0),
+-    m_datatype(datatype),
+-    m_entityAttribute(0),
+-    m_operation(0),
+-    m_template(0)
+-{
+-    init();
+-    m_parent = dynamic_cast<UMLClassifier *>(m_datatype->parent());
+-    insertTypesSortedAttribute(m_datatype->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLEntityAttribute *entityAttribute, QWidget *parent)
+-   : QWidget(parent),
+-     m_attribute(0),
+-     m_datatype(0),
+-     m_entityAttribute(entityAttribute),
+-     m_operation(0),
+-     m_template(0)
+-{
+-    init();
+-    m_parent = 0;
+-    insertTypesSortedEntityAttribute(m_entityAttribute->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLOperation *operation, QWidget *parent)
+- :  QWidget(parent),
+-    m_attribute(0),
+-    m_datatype(0),
+-    m_entityAttribute(0),
+-    m_operation(operation),
+-    m_template(0)
+-{
+-    init();
+-    m_parent = dynamic_cast<UMLClassifier*>(m_operation->parent());
+-    insertTypesSortedOperation(m_operation->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLTemplate *_template, QWidget *parent)
+- :  QWidget(parent),
+-    m_attribute(0),
+-    m_datatype(0),
+-    m_entityAttribute(0),
+-    m_operation(0),
+-    m_template(_template)
+-{
+-    init();
+-    m_parent = 0;
+-    insertTypesSortedTemplate(m_template->getTypeName());
+ }
+ 
+ void UMLDatatypeWidget::init()
+@@ -113,12 +58,52 @@ void UMLDatatypeWidget::init()
+     setLayout(layout);
+ }
+ 
++
++
+ UMLDatatypeWidget::~UMLDatatypeWidget()
+ {
+     delete m_comboBox;
+     delete m_label;
+ }
+ 
++void UMLDatatypeWidget::setAttribute(UMLAttribute *attribute)
++{
++    m_attribute = attribute;
++    m_parent = dynamic_cast<UMLClassifier*>(m_attribute->parent()->parent());
++    insertTypesSortedParameter(m_attribute->getTypeName());
++}
++
++void UMLDatatypeWidget::setClassifierItem(UMLClassifierListItem *datatype)
++{
++    m_datatype = datatype;
++    m_parent = dynamic_cast<UMLClassifier *>(m_datatype->parent());
++    insertTypesSortedAttribute(m_datatype->getTypeName());
++
++}
++
++void UMLDatatypeWidget::setEntityAttribute(UMLEntityAttribute *entityAttribute)
++{
++    m_entityAttribute = entityAttribute;
++    m_parent = 0;
++    insertTypesSortedEntityAttribute(m_entityAttribute->getTypeName());
++}
++
++void UMLDatatypeWidget::setOPeration(UMLOperation *operation)
++{
++    m_operation = operation;
++    m_parent = dynamic_cast<UMLClassifier*>(m_operation->parent());
++    insertTypesSortedOperation(m_operation->getTypeName());
++
++}
++
++void UMLDatatypeWidget::setTemplate(UMLTemplate *_template)
++{
++    m_template = _template;
++    m_parent = 0;
++    insertTypesSortedTemplate(m_template->getTypeName());
++
++}
++
+ bool UMLDatatypeWidget::apply()
+ {
+     if (m_datatype)
+@@ -137,16 +122,23 @@ bool UMLDatatypeWidget::apply()
+ bool UMLDatatypeWidget::applyAttribute()
+ {
+     QString typeName = m_comboBox->currentText();
+-    UMLTemplate *tmplParam = m_parent->findTemplate(typeName);
++    Uml::TypeQualifiers::Enum typeQualifier = m_datatype->qualifier();
++    Uml::TypeModifiers::Enum typeModifierEnum = m_datatype->modifier();
++    //Need to find a better way to do that
++    QString m = Uml::TypeModifiers::toString(typeModifierEnum);
++    QString q = Uml::TypeQualifiers::toString(typeQualifier);
++    QString finalString = q + typeName + m;
++
++    UMLTemplate *tmplParam = m_parent->findTemplate(finalString);
+     if (tmplParam) {
+         m_datatype->setType(tmplParam);
+         return true;
+     }
+     UMLDoc * pDoc = UMLApp::app()->document();
+ 
+-    UMLObject *obj = 0;
++    UMLObject *obj = nullptr;
+     if (!typeName.isEmpty()) {
+-        obj = pDoc->findUMLObject(typeName);
++        obj = pDoc->findUMLObject(finalString);
+     }
+ 
+     UMLClassifier *classifier = dynamic_cast<UMLClassifier*>(obj);
+@@ -154,23 +146,22 @@ bool UMLDatatypeWidget::applyAttribute()
+         Uml::ProgrammingLanguage::Enum pl = UMLApp::app()->activeLanguage();
+         // Import_Utils does not handle creating a new object with empty name
+         // string well. Use Object_Factory in those cases.
+-        if (
+-            (!typeName.isEmpty()) &&
+-            ((pl == Uml::ProgrammingLanguage::Cpp) ||
+-                (pl == Uml::ProgrammingLanguage::Java))
+-        ) {
++        if (!typeName.isEmpty() && ((pl == Uml::ProgrammingLanguage::Cpp) || (pl == Uml::ProgrammingLanguage::Java)) )
++        {
+             // Import_Utils::createUMLObject works better for C++ namespace
+             // and java package than Object_Factory::createUMLObject
+             Import_Utils::setRelatedClassifier(m_parent);
+-            obj = Import_Utils::createUMLObject(UMLObject::ot_UMLObject, typeName);
++            obj = Import_Utils::createUMLObject(UMLObject::ot_UMLObject, finalString);
+             Import_Utils::setRelatedClassifier(NULL);
+         } else {
+             // If it's obviously a pointer type (C++) then create a datatype.
+             // Else we don't know what it is so as a compromise create a class.
++            bool contains = false;
++            if(finalString.contains(QChar::fromLatin1('*')) || finalString.contains(QChar::fromLatin1('&')))
++                contains = true;
+             UMLObject::ObjectType ot =
+-                (typeName.contains(QChar::fromLatin1('*')) ? UMLObject::ot_Datatype
+-                                                          : UMLObject::ot_Class);
+-            obj = Object_Factory::createUMLObject(ot, typeName);
++                (contains ? UMLObject::ot_Datatype : UMLObject::ot_Class);
++            obj = Object_Factory::createUMLObject(ot, finalString);
+         }
+         if (obj == NULL)
+             return false;
+diff --git a/umbrello/dialogs/widgets/umldatatypewidget.h b/umbrello/dialogs/widgets/umldatatypewidget.h
+index bdac23e0c88040941a07ce6b1268b47f683d4103..75b92bd65b40c748ba15fdcee18e24656890b357 100644
+--- a/umbrello/dialogs/widgets/umldatatypewidget.h
++++ b/umbrello/dialogs/widgets/umldatatypewidget.h
+@@ -26,13 +26,15 @@ class UMLTemplate;
+ class UMLDatatypeWidget : public QWidget
+ {
+ public:
+-    UMLDatatypeWidget(UMLAttribute *attribute, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLClassifierListItem *datatype, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLEntityAttribute *entityAttribute, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLOperation *operation, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLTemplate *_template, QWidget *parent=0);
++    UMLDatatypeWidget(QWidget *parent = 0);
+     ~UMLDatatypeWidget();
+ 
++    void setAttribute(UMLAttribute *attribute);
++    void setClassifierItem(UMLClassifierListItem *datatype);
++    void setEntityAttribute(UMLEntityAttribute *entityAttribute);
++    void setOPeration(UMLOperation *operation);
++    void setTemplate(UMLTemplate *_template);
++
+     void addToLayout(QGridLayout *layout, int row, int startColumn = 0);
+     bool apply();
+     void reset();
+diff --git a/umbrello/dialogs/widgets/umlstereotypewidget.cpp b/umbrello/dialogs/widgets/umlstereotypewidget.cpp
+index 6d7f3e46903a83e3494889a27dabdeb832358416..1130b52120add34044f31bbe36cc385b2285df26 100644
+--- a/umbrello/dialogs/widgets/umlstereotypewidget.cpp
++++ b/umbrello/dialogs/widgets/umlstereotypewidget.cpp
+@@ -23,14 +23,11 @@
+ #include <QLabel>
+ #include <QWidget>
+ 
+-Q_DECLARE_METATYPE(UMLStereotype*);
++Q_DECLARE_METATYPE(UMLStereotype*)
+ 
+-UMLStereotypeWidget::UMLStereotypeWidget(UMLObject *object, QWidget *parent)
+-    : QWidget(parent),
+-      m_object(object)
+-{
+-    Q_ASSERT(m_object);
+-    init();
++UMLStereotypeWidget::UMLStereotypeWidget(QWidget *parent)
++    : QWidget(parent)
++{    
+ }
+ 
+ UMLStereotypeWidget::~UMLStereotypeWidget()
+@@ -39,6 +36,12 @@ UMLStereotypeWidget::~UMLStereotypeWidget()
+     delete m_label;
+ }
+ 
++void UMLStereotypeWidget::setUMLObject(UMLObject *o)
++{
++    m_object = o;
++    init();
++}
++
+ /**
+  * Set state if stereotypes could be edited. By default stereotypes could be edited.
+  * @param state edit state
+diff --git a/umbrello/dialogs/widgets/umlstereotypewidget.h b/umbrello/dialogs/widgets/umlstereotypewidget.h
+index 8a936cf2640debfe19fc11ea5c81243afa2f7274..a68a28f630917921b6a3aea5e2489f492a64d0bb 100644
+--- a/umbrello/dialogs/widgets/umlstereotypewidget.h
++++ b/umbrello/dialogs/widgets/umlstereotypewidget.h
+@@ -24,13 +24,15 @@ class QLabel;
+ class UMLStereotypeWidget : public QWidget
+ {
+ public:
+-    explicit UMLStereotypeWidget(UMLObject *object, QWidget *parent=0);
++    explicit UMLStereotypeWidget(QWidget *parent=0);
+     ~UMLStereotypeWidget();
+ 
++    void setUMLObject(UMLObject *o);
+     void setEditable(bool state);
+     void addToLayout(QGridLayout *layout, int row);
+     void apply();
+ 
++
+ protected:
+     QLabel *m_label;
+     KComboBox *m_comboBox;
+diff --git a/umbrello/dialogs/widgets/umltypemodifierwidget.cpp b/umbrello/dialogs/widgets/umltypemodifierwidget.cpp
+new file mode 100644
+index 0000000000000000000000000000000000000000..dd3c401e9ae18d20ef1c17e9e7ecd9a7c132e79a
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypemodifierwidget.cpp
+@@ -0,0 +1,43 @@
++#include "umltypemodifierwidget.h"
++#include "classifierlistitem.h"
++#include "uml.h"
++
++#include <KLocalizedString>
++
++UMLTypeModifierWidget::UMLTypeModifierWidget(QWidget *parent) : QWidget(parent)
++{
++    m_texts[Uml::TypeModifiers::None] = i18nc("none", "None");
++    m_texts[Uml::TypeModifiers::Pointer] = i18nc("pointer type", "*");
++    m_texts[Uml::TypeModifiers::Reference] = i18nc("reference type", "&");
++    init(i18n("Type Modifiers:"));
++
++}
++
++void UMLTypeModifierWidget::apply()
++{
++    QString currData = m_typeCB->currentText();
++    Uml::TypeModifiers::Enum key = m_texts.key(currData);
++    if(m_typeModifier)
++        m_typeModifier->setModifier(key);
++}
++
++void UMLTypeModifierWidget::setUMLClassifierItem(UMLClassifierListItem *o)
++{
++    Q_ASSERT(o);
++    m_typeModifier = o;
++}
++
++void UMLTypeModifierWidget::init(const QString &title)
++{
++    auto layout = new QHBoxLayout;
++    auto label = new QLabel(title);
++    layout->addWidget(label);
++    m_typeCB = new QComboBox();
++
++    foreach (const auto &text, m_texts) {
++        m_typeCB->addItem(text);
++    }
++
++    layout->addWidget(m_typeCB);
++    setLayout(layout);
++}
+diff --git a/umbrello/dialogs/widgets/umltypemodifierwidget.h b/umbrello/dialogs/widgets/umltypemodifierwidget.h
+new file mode 100644
+index 0000000000000000000000000000000000000000..85a1dc0f66fa0aba58aa4149de48c2447523593f
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypemodifierwidget.h
+@@ -0,0 +1,29 @@
++#ifndef UMLTYPEMODIFIERWIDGET_H
++#define UMLTYPEMODIFIERWIDGET_H
++
++#include <QtWidgets>
++
++#include "basictypes.h"
++
++class UMLClassifierListItem;
++
++class UMLTypeModifierWidget : public QWidget
++{
++    Q_OBJECT
++public:
++    explicit UMLTypeModifierWidget(QWidget *parent = 0);
++
++    void apply();
++
++    void setUMLClassifierItem(UMLClassifierListItem *o);
++
++private:
++    void init(const QString &title);
++    typedef QMap<Uml::TypeModifiers::Enum,QString> TextMap;
++    TextMap m_texts;
++    UMLClassifierListItem *m_typeModifier;
++    QComboBox *m_typeCB;
++
++};
++
++#endif // UMLTYPEMODIFIERWIDGET_H
+diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.cpp b/umbrello/dialogs/widgets/umltypequalifierswidget.cpp
+new file mode 100644
+index 0000000000000000000000000000000000000000..f5e6b1d4f8e441455a94103dd3c6e5d630a21e43
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypequalifierswidget.cpp
+@@ -0,0 +1,70 @@
++#include "umltypequalifierswidget.h"
++#include "classifierlistitem.h"
++#include "uml.h"
++#include "basictypes.h"
++
++#include <KLocalizedString>
++
++UmlTypeQualifiersWidget::UmlTypeQualifiersWidget(QWidget *parent)
++  : QWidget(parent)
++  ,ui(new Ui::UMLTypeQualifiersWidget)
++{
++    ui->setupUi(this);
++    //Using some connects with lambda to control the widgets
++    connect(ui->rb_none, &QRadioButton::clicked, [=]{
++        if(ui->rb_none->isChecked()){
++            ui->rb_mutable->setEnabled(true);
++            ui->ck_const->setEnabled(true);
++            ui->ck_volatile->setEnabled(true);
++        }
++    });
++
++    connect(ui->rb_mutable, &QRadioButton::clicked, [=]{
++        if(ui->rb_mutable->isChecked()){
++            ui->ck_const->setDisabled(true);
++            ui->ck_volatile->setDisabled(true);
++        }
++    });
++    connect(ui->ck_const, &QCheckBox::clicked, [=]{
++        if(ui->ck_const->isChecked() || ui->ck_volatile->isChecked()){
++            ui->rb_mutable->setDisabled(true);
++            ui->rb_none->setDisabled(true);
++            ui->rb_none->setChecked(false);
++        }
++        else{
++            ui->rb_mutable->setDisabled(false);
++            ui->rb_none->setDisabled(false);
++        }
++    });
++    connect(ui->ck_volatile, &QCheckBox::clicked, [=]{
++       if(ui->ck_volatile->isChecked() || ui->ck_const->isChecked()){
++           ui->rb_mutable->setDisabled(true);
++           ui->rb_none->setDisabled(true);
++           ui->rb_none->setChecked(false);
++       }
++       else{
++           ui->rb_mutable->setDisabled(false);
++           ui->rb_none->setDisabled(false);
++       }
++    });
++}
++
++void UmlTypeQualifiersWidget::apply()
++{
++    if(ui->ck_const->isChecked() && ui->ck_volatile->isChecked())
++        m_qualifier->setQualifier(Uml::TypeQualifiers::ConstVolatile);
++    else if(ui->rb_none->isChecked())
++        m_qualifier->setQualifier(Uml::TypeQualifiers::None);
++    else if(ui->ck_const->isChecked())
++        m_qualifier->setQualifier(Uml::TypeQualifiers::Const);
++    else if(ui->rb_mutable->isChecked())
++        m_qualifier->setQualifier(Uml::TypeQualifiers::Mutable);
++    else if(ui->ck_volatile->isChecked())
++        m_qualifier->setQualifier(Uml::TypeQualifiers::Volatile);
++}
++
++void UmlTypeQualifiersWidget::setUMLClassifierItem(UMLClassifierListItem *o)
++{
++    Q_ASSERT(o);
++    m_qualifier = o;
++}
+diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.h b/umbrello/dialogs/widgets/umltypequalifierswidget.h
+new file mode 100644
+index 0000000000000000000000000000000000000000..8d36d3386c0d092c531f53a5e8a2a9c658d5ef39
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypequalifierswidget.h
+@@ -0,0 +1,27 @@
++#ifndef UMLTYPEQUALIFIERSWIDGET_H
++#define UMLTYPEQUALIFIERSWIDGET_H
++
++#include "ui_umltypequalifierswidget.h"
++#include <QtWidgets>
++#include <QMap>
++
++class UMLClassifierListItem;
++
++class UmlTypeQualifiersWidget : public QWidget
++{
++    Q_OBJECT
++
++public:
++    explicit UmlTypeQualifiersWidget(QWidget *parent = 0);
++
++    void apply();
++    void setUMLClassifierItem(UMLClassifierListItem *o);
++
++private:
++
++    Ui::UMLTypeQualifiersWidget *ui;
++    UMLClassifierListItem *m_qualifier;
++
++};
++
++#endif // UMLTYPEQUALIFIERSWIDGET_H
+diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.ui b/umbrello/dialogs/widgets/umltypequalifierswidget.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..cb41c5b55b774dad7b5d7af435a015d676855f3f
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypequalifierswidget.ui
+@@ -0,0 +1,58 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLTypeQualifiersWidget</class>
++ <widget class="QWidget" name="UMLTypeQualifiersWidget">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>316</width>
++    <height>97</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout">
++   <item>
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>Type Qualifiers</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout">
++      <item row="0" column="0">
++       <widget class="QRadioButton" name="rb_none">
++        <property name="text">
++         <string>None</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="0">
++       <widget class="QRadioButton" name="rb_mutable">
++        <property name="text">
++         <string>&amp;Mutable</string>
++        </property>
++       </widget>
++      </item>
++      <item row="0" column="1">
++       <widget class="QCheckBox" name="ck_const">
++        <property name="text">
++         <string>Const</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="1">
++       <widget class="QCheckBox" name="ck_volatile">
++        <property name="text">
++         <string>Volatile</string>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++  </layout>
++ </widget>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.cpp b/umbrello/dialogs/widgets/visibilityenumwidget.cpp
+index b453808edb2d6f0999126ab2327d6d9a90c5b2e7..aa89e35f290fef47cc9c6e1803392d2313a48879 100644
+--- a/umbrello/dialogs/widgets/visibilityenumwidget.cpp
++++ b/umbrello/dialogs/widgets/visibilityenumwidget.cpp
+@@ -20,20 +20,17 @@
+ #include <QGroupBox>
+ #include <QRadioButton>
+ 
+-VisibilityEnumWidget::VisibilityEnumWidget(UMLObject *o, QWidget *parent)
+-    : QWidget(parent),
+-      m_object(o),
+-      m_widget(0),
+-      m_role(Uml::RoleType::A)
++VisibilityEnumWidget::VisibilityEnumWidget(QWidget *parent)
++    : QWidget(parent)
++    , m_widget(0)
++    , ui(new Ui::visibilityEnumWidget)
++    , m_role(Uml::RoleType::A)
+ {
+-    Q_ASSERT(o);
+-
+     m_texts[Uml::Visibility::Public] = i18nc("public visibility", "P&ublic");
+     m_texts[Uml::Visibility::Protected] = i18nc("protected visibility", "Pro&tected");
+     m_texts[Uml::Visibility::Private] = i18nc("private visibility", "P&rivate");
+     m_texts[Uml::Visibility::Implementation] = i18n("Imple&mentation");
+-    init(i18n("Visibility"));
+-    m_buttons[m_object->visibility()]->setChecked(true);
++    ui->setupUi(this);
+ }
+ 
+ VisibilityEnumWidget::VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::Enum role, QWidget *parent)
+@@ -47,15 +44,13 @@ VisibilityEnumWidget::VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::
+         m_texts[Uml::Visibility::Protected] = i18nc("scope for A is protected", "Protected");
+         m_texts[Uml::Visibility::Private] = i18nc("scope for A is private", "Private");
+         m_texts[Uml::Visibility::Implementation] = i18nc("scope for A is implementation", "Implementation");
+-        init(i18n("Role A Visibility"));
+     } else {
+         m_texts[Uml::Visibility::Public] = i18nc("scope for B is public", "Public");
+         m_texts[Uml::Visibility::Protected] = i18nc("scope for B is protected", "Protected");
+         m_texts[Uml::Visibility::Private] = i18nc("scope for B is private", "Private");
+         m_texts[Uml::Visibility::Implementation] = i18nc("scope for B is implementation", "Implementation");
+-        init(i18n("Role B Visibility"));
+     }
+-    m_buttons[a->visibility(role)]->setChecked(true);
++    //m_buttons[a->visibility(role)]->setChecked(true);
+ }
+ 
+ VisibilityEnumWidget::~VisibilityEnumWidget()
+@@ -63,13 +58,33 @@ VisibilityEnumWidget::~VisibilityEnumWidget()
+     // nothing here, parenting makes sure that all objects are destroyed
+ }
+ 
++void VisibilityEnumWidget::setUMLObject(UMLObject *o)
++{
++    m_object = o;
++    switch (m_object->visibility()) {
++    case Uml::Visibility::Public:
++            ui->rb_public->setChecked(true);
++        break;
++    case Uml::Visibility::Protected:
++        ui->rb_protected->setChecked(true);
++        break;
++    case Uml::Visibility::Private:
++        ui->rb_protected->setChecked(true);
++        break;
++    case Uml::Visibility::Implementation:
++        ui->rb_implementation->setChecked(true);
++        break;
++    }
++}
++
+ /**
+  * Add this widget to a given layout.
+  * @param layout The layout to which the widget should be added
+  */
++//TODO: REMOVE THIS METHOD AFTER FIX CLASS GENERAL PAGE
+ void VisibilityEnumWidget::addToLayout(QVBoxLayout *layout)
+ {
+-    layout->addWidget(m_box);
++    //layout->addWidget(m_box);
+ }
+ 
+ /**
+@@ -77,34 +92,13 @@ void VisibilityEnumWidget::addToLayout(QVBoxLayout *layout)
+  */
+ void VisibilityEnumWidget::apply()
+ {
+-    for(ButtonMap::const_iterator i = m_buttons.constBegin(); i != m_buttons.constEnd(); ++i) {
+-        if (i.value()->isChecked()) {
+-            if (m_object)
+-                m_object->setVisibility(i.key());
+-            else
+-                m_widget->setVisibility(i.key(), m_role);
+-        }
+-    }
++    if(ui->rb_public->isChecked())
++        m_object->setVisibility(Uml::Visibility::Public);
++    else if(ui->rb_protected->isChecked())
++        m_object->setVisibility(Uml::Visibility::Protected);
++    else if(ui->rb_private->isChecked())
++        m_object->setVisibility(Uml::Visibility::Private);
++    else
++        m_object->setVisibility(Uml::Visibility::Implementation);
+ }
+ 
+-void VisibilityEnumWidget::init(const QString &title)
+-{
+-    QHBoxLayout *layout = new QHBoxLayout;
+-    layout->setContentsMargins(0,0,0,0);
+-
+-    m_box = new QGroupBox(title, this);
+-    QHBoxLayout* boxlayout = new QHBoxLayout(m_box);
+-    int margin = fontMetrics().height();
+-    boxlayout->setMargin(margin);
+-    QList<Uml::Visibility::Enum> orders;
+-    orders << Uml::Visibility::Public << Uml::Visibility::Protected << Uml::Visibility::Private << Uml::Visibility::Implementation;
+-
+-    for(QList<Uml::Visibility::Enum>::const_iterator i = orders.constBegin(); i != orders.constEnd(); ++i) {
+-        Uml::Visibility::Enum key = *i;
+-        QRadioButton *button = new QRadioButton(m_texts[key], m_box);
+-        m_buttons[key] = button;
+-        boxlayout->addWidget(button);
+-    }
+-    layout->addWidget(m_box);
+-    setLayout(layout);
+-}
+diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.h b/umbrello/dialogs/widgets/visibilityenumwidget.h
+index 477b81eea96496a498789f5a64629941253671a9..6be9c94957908eb275e4a73708e6630f0f2aab76 100644
+--- a/umbrello/dialogs/widgets/visibilityenumwidget.h
++++ b/umbrello/dialogs/widgets/visibilityenumwidget.h
+@@ -12,7 +12,7 @@
+ #define VISIBILITYENUMWIDGET_H
+ 
+ #include "basictypes.h"
+-
++#include "ui_visibilityenumwidget.h"
+ #include <QMap>
+ #include <QWidget>
+ 
+@@ -28,24 +28,23 @@ class VisibilityEnumWidget : public QWidget
+     Q_OBJECT
+ public:
+     typedef QMap<Uml::Visibility::Enum,QString> TextMap;
+-    typedef QMap<Uml::Visibility::Enum,QRadioButton*> ButtonMap;
+ 
+-    explicit VisibilityEnumWidget(UMLObject *o, QWidget *parent=0);
++    explicit VisibilityEnumWidget(QWidget *parent=0);
+     VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::Enum role, QWidget *parent=0);
+     ~VisibilityEnumWidget();
+ 
++    void setUMLObject(UMLObject *o);
+     void addToLayout(QVBoxLayout *layout);
+     void apply();
+ 
++private:
++    Ui::visibilityEnumWidget *ui;
++
+ protected:
+     TextMap m_texts;
+-    QGroupBox *m_box;
+-    ButtonMap m_buttons;
+     UMLObject *m_object;
+     AssociationWidget *m_widget;
+     Uml::RoleType::Enum m_role;
+-
+-    void init(const QString &title);
+ };
+ 
+ #endif // VISIBILITYENUMWIDGET_H
+diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.ui b/umbrello/dialogs/widgets/visibilityenumwidget.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..5a42fb6f0fa148fef6f7afa02bdbd126f0d78d8a
+--- /dev/null
++++ b/umbrello/dialogs/widgets/visibilityenumwidget.ui
+@@ -0,0 +1,58 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>visibilityEnumWidget</class>
++ <widget class="QWidget" name="visibilityEnumWidget">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>252</width>
++    <height>97</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout">
++   <item>
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>Visibility</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout">
++      <item row="0" column="0">
++       <widget class="QRadioButton" name="rb_public">
++        <property name="text">
++         <string>Pub&amp;lic</string>
++        </property>
++       </widget>
++      </item>
++      <item row="0" column="1">
++       <widget class="QRadioButton" name="rb_private">
++        <property name="text">
++         <string>Pri&amp;vate</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="0">
++       <widget class="QRadioButton" name="rb_protected">
++        <property name="text">
++         <string>Protected</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="1">
++       <widget class="QRadioButton" name="rb_implementation">
++        <property name="text">
++         <string>I&amp;mplementation</string>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++  </layout>
++ </widget>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/umlmodel/classifierlistitem.cpp b/umbrello/umlmodel/classifierlistitem.cpp
+index 5c997e309041c27e156c3df8a36fa6990669d01e..24a42f233748c3b0d99f8aa92340fc431aa7df9d 100644
+--- a/umbrello/umlmodel/classifierlistitem.cpp
++++ b/umbrello/umlmodel/classifierlistitem.cpp
+@@ -80,6 +80,33 @@ void UMLClassifierListItem::copyInto(UMLObject *lhs) const
+     UMLObject::copyInto(lhs);
+ }
+ 
++void UMLClassifierListItem::setQualifier(Uml::TypeQualifiers::Enum qualifier)
++{
++    if(m_typeQualifier != qualifier){
++        m_typeQualifier = qualifier;
++        UMLObject::emitModified();
++    }
++
++}
++
++Uml::TypeQualifiers::Enum UMLClassifierListItem::qualifier() const
++{
++    return m_typeQualifier;
++}
++
++void UMLClassifierListItem::setModifier(Uml::TypeModifiers::Enum modifier)
++{
++    if(m_typeModifier != modifier){
++        m_typeModifier = modifier;
++        UMLObject::emitModified();
++    }
++}
++
++Uml::TypeModifiers::Enum UMLClassifierListItem::modifier() const
++{
++    return m_typeModifier;
++}
++
+ /**
+  * Returns a string representation of the list item.
+  *
+diff --git a/umbrello/umlmodel/classifierlistitem.h b/umbrello/umlmodel/classifierlistitem.h
+index 518aa7fe3ec078b2b85b95ed0802daa5a6d351e0..3fa356dae375a4202080e60acaab42fa234637f3 100644
+--- a/umbrello/umlmodel/classifierlistitem.h
++++ b/umbrello/umlmodel/classifierlistitem.h
+@@ -53,6 +53,15 @@ public:
+      */
+     virtual UMLObject* clone() const = 0;
+ 
++    //TypeQualifiers Methods
++    virtual void setQualifier(Uml::TypeQualifiers::Enum qualifier);
++    //virtual void setQualifierCmd(Uml::TypeQualifiers::Enum qualifier);
++    virtual Uml::TypeQualifiers::Enum qualifier() const;
++
++    //TypeModifiers Methods
++    virtual void setModifier(Uml::TypeModifiers::Enum modifier);
++    virtual Uml::TypeModifiers::Enum modifier() const;
++
+ };
+ 
+ #endif
+diff --git a/umbrello/umlmodel/umlobject.h b/umbrello/umlmodel/umlobject.h
+index 66282b035faa5e3d8ba4655d85a2737e4b9f4dc9..1a33052be5c89fab43634baf1f6fffd862c40781 100644
+--- a/umbrello/umlmodel/umlobject.h
++++ b/umbrello/umlmodel/umlobject.h
+@@ -176,6 +176,8 @@ protected:
+     QString                m_name;         ///< objects name
+     ObjectType             m_BaseType;     ///< objects type
+     Uml::Visibility::Enum  m_visibility;   ///< objects visibility
++    Uml::TypeQualifiers::Enum m_typeQualifier; ///< object qualifier
++    Uml::TypeModifiers::Enum m_typeModifier; ///< object modifier
+     bool                   m_bAbstract;    ///< state of whether the object is abstract or not
+     bool                   m_bStatic;      ///< flag for instance scope
+     bool                   m_bInPaste;     ///< caller sets this true when in paste operation
+
diff --git a/patchsToApply/newWidgets14062016 b/patchsToApply/newWidgets14062016
new file mode 100644
index 0000000000000000000000000000000000000000..635b20cfc41cc211834a0fe96d3c60742b08ce6c
--- /dev/null
+++ b/patchsToApply/newWidgets14062016
@@ -0,0 +1,2525 @@
+diff --git a/umbrello/CMakeLists.txt b/umbrello/CMakeLists.txt
+index 10cd5a39f7c212666922ad0ca29dc6f578ab3ed4..09b80bf08300bea92222a8b78fed28833660c887 100644
+--- a/umbrello/CMakeLists.txt
++++ b/umbrello/CMakeLists.txt
+@@ -240,6 +240,8 @@ set(libdialogs_SRCS
+     dialogs/widgets/umlpackagewidget.cpp
+     dialogs/widgets/umlstereotypewidget.cpp
+     dialogs/widgets/visibilityenumwidget.cpp
++    dialogs/widgets/umltypequalifierswidget.cpp
++    dialogs/widgets/umltypemodifierwidget.cpp
+ )
+ 
+ ki18n_wrap_ui(  libdialogs_SRCS
+@@ -251,6 +253,12 @@ ki18n_wrap_ui(  libdialogs_SRCS
+     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/codeimportoptionspage.ui
+     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/diagrampropertiespage.ui
+     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/umlrolepropertiesbase.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umlattributedialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umlentityattributedialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umltemplatedialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umloperationdialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/widgets/umltypequalifierswidget.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/widgets/visibilityenumwidget.ui
+ )
+ 
+ set(librefactoring_SRCS
+diff --git a/umbrello/basictypes.h b/umbrello/basictypes.h
+index 62492988792752f6987e4410c6ae01dd9a5eb659..3575048902c1a7aa75c1d08a08f31af40f821ac7 100644
+--- a/umbrello/basictypes.h
++++ b/umbrello/basictypes.h
+@@ -68,6 +68,34 @@ namespace Uml
+         Enum fromInt(int item);
+     }
+ 
++    namespace TypeQualifiers {
++
++        enum Enum{
++            Const,
++            Volatile,
++            Mutable,
++            ConstVolatile,
++            None
++
++        };
++
++        QString toString(Enum item, bool mnemonic = false);
++        Enum fromString(const QString& item);
++        Enum fromInt(int item);
++    }
++
++    namespace TypeModifiers{
++        enum Enum{
++            Pointer,
++            Reference,
++            None
++        };
++
++        QString toString(Enum item, bool mnemonic = false);
++        Enum fromString(const QString& item);
++        Enum fromInte(int item);
++    }
++
+     /**
+      * Supported diagram types.
+      */
+diff --git a/umbrello/dialogs/pages/classgeneralpage.cpp b/umbrello/dialogs/pages/classgeneralpage.cpp
+index ec8bfcb98942ff48fe6685cfcd2c022a94122dfb..57534bbffbcb94ff3d4b9560937ad729a82afbf8 100644
+--- a/umbrello/dialogs/pages/classgeneralpage.cpp
++++ b/umbrello/dialogs/pages/classgeneralpage.cpp
+@@ -93,7 +93,8 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLObject* o)
+     m_nameWidget->addToLayout(m_pNameLayout, 0);
+ 
+     if (t != UMLObject::ot_Stereotype) {
+-        m_stereotypeWidget = new UMLStereotypeWidget(m_pObject);
++        m_stereotypeWidget = new UMLStereotypeWidget();
++        m_stereotypeWidget->setUMLObject(m_pObject);
+         if (t == UMLObject::ot_Interface || t == UMLObject::ot_Datatype || t == UMLObject::ot_Enum) {
+             m_stereotypeWidget->setEditable(false);
+         }
+@@ -143,11 +144,13 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLObject* o)
+ 
+     // setup scope
+     if (t != UMLObject::ot_Stereotype) {
+-        m_visibilityEnumWidget = new VisibilityEnumWidget(m_pObject, this);
++        m_visibilityEnumWidget = new VisibilityEnumWidget();
++        m_visibilityEnumWidget->setUMLObject(m_pObject);
+         m_visibilityEnumWidget->addToLayout(topLayout);
+     }
+ 
+-    m_docWidget = new DocumentationWidget(m_pObject, this);
++    m_docWidget = new DocumentationWidget();
++    m_docWidget->setUMLObject(m_pObject);
+     topLayout->addWidget(m_docWidget);
+ }
+ 
+@@ -252,7 +255,8 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLWidget* widget
+     m_nameWidget->addToLayout(m_pNameLayout, 0);
+ 
+     if (widget->umlObject()) {
+-        m_stereotypeWidget = new UMLStereotypeWidget(widget->umlObject());
++        m_stereotypeWidget = new UMLStereotypeWidget();
++        m_stereotypeWidget->setUMLObject(widget->umlObject());
+         m_stereotypeWidget->addToLayout(m_pNameLayout, 1);
+     }
+ 
+diff --git a/umbrello/dialogs/parameterpropertiesdialog.cpp b/umbrello/dialogs/parameterpropertiesdialog.cpp
+index a6468b4339680f626498d3b606d355a8ddc7707e..61730d7151a308d5542f08b5788702fa002fdf10 100644
+--- a/umbrello/dialogs/parameterpropertiesdialog.cpp
++++ b/umbrello/dialogs/parameterpropertiesdialog.cpp
+@@ -71,7 +71,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
+     propLayout->setSpacing(10);
+     propLayout->setMargin(margin);
+ 
+-    m_datatypeWidget = new UMLDatatypeWidget(m_pAtt);
++    m_datatypeWidget = new UMLDatatypeWidget();
++    m_datatypeWidget->setAttribute(m_pAtt);
+     m_datatypeWidget->addToLayout(propLayout, 0);
+ 
+     Dialog_Utils::makeLabeledEditField(propLayout, 1,
+@@ -82,7 +83,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
+                                     m_pInitialL, i18n("&Initial value:"),
+                                     m_pInitialLE, attr->getInitialValue());
+ 
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pAtt);
++    m_stereotypeWidget = new UMLStereotypeWidget();
++    m_stereotypeWidget->setUMLObject(m_pAtt);
+     m_stereotypeWidget->addToLayout(propLayout, 3);
+ 
+     m_pKindGB =  new QGroupBox(i18n("Passing Direction"));
+@@ -102,7 +104,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
+ 
+     topLayout->addWidget(m_pKindGB);
+ 
+-    m_docWidget = new DocumentationWidget(m_pAtt);
++    m_docWidget = new DocumentationWidget();
++    m_docWidget->setUMLObject(m_pAtt);
+     topLayout->addWidget(m_docWidget);
+ 
+     // Check the proper Kind radiobutton.
+diff --git a/umbrello/dialogs/umlattributedialog.cpp b/umbrello/dialogs/umlattributedialog.cpp
+index cb16c946714ed36ed8f36aa70b0c52f411e706d4..647193009d52e1bc7530a53aabd2f30804d0f6ab 100644
+--- a/umbrello/dialogs/umlattributedialog.cpp
++++ b/umbrello/dialogs/umlattributedialog.cpp
+@@ -14,21 +14,14 @@
+ // app includes
+ #include "attribute.h"
+ #include "classifier.h"
+-#include "documentationwidget.h"
+ #include "template.h"
+ #include "umldoc.h"
+ #include "uml.h"
+-#include "umldatatypewidget.h"
+-#include "umlstereotypewidget.h"
+-#include "visibilityenumwidget.h"
+ #include "dialog_utils.h"
+ #include "object_factory.h"
+ #include "import_utils.h"
+ 
+ // kde includes
+-#include <klineedit.h>
+-#include <kcombobox.h>
+-#include <kcompletion.h>
+ #include <KLocalizedString>
+ #include <KMessageBox>
+ 
+@@ -44,9 +37,12 @@
+ 
+ UMLAttributeDialog::UMLAttributeDialog(QWidget * pParent, UMLAttribute * pAttribute)
+   : SinglePageDialogBase(pParent)
++  , ui(new Ui::UMLAttributeDialog)
++  , m_pAttribute(pAttribute)
+ {
+     setCaption(i18n("Attribute Properties"));
+-    m_pAttribute = pAttribute;
++    activeLanguage = UMLApp::app()->activeLanguage();
++    ui->setupUi(mainWidget());
+     setupDialog();
+ }
+ 
+@@ -59,45 +55,19 @@ UMLAttributeDialog::~UMLAttributeDialog()
+  */
+ void UMLAttributeDialog::setupDialog()
+ {
+-    int margin = fontMetrics().height();
+-
+-    QFrame * frame = new QFrame(this);
+-    setMainWidget(frame);
+-    QVBoxLayout * mainLayout = new QVBoxLayout(frame);
+-
+-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout * valuesLayout = new QGridLayout(m_pValuesGB);
+-    valuesLayout->setMargin(margin);
+-    valuesLayout->setSpacing(10);
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
+-    m_datatypeWidget->addToLayout(valuesLayout, 0);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
+-                                    m_pNameL, i18nc("attribute name", "&Name:"),
+-                                    m_pNameLE, m_pAttribute->name());
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 2,
+-                                    m_pInitialL, i18n("&Initial value:"),
+-                                    m_pInitialLE, m_pAttribute->getInitialValue());
+-
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pAttribute);
+-    m_stereotypeWidget->addToLayout(valuesLayout, 3);
+-
+-    m_pStaticCB = new QCheckBox(i18n("Classifier &scope (\"static\")"), m_pValuesGB);
+-    m_pStaticCB->setChecked(m_pAttribute->isStatic());
+-    valuesLayout->addWidget(m_pStaticCB, 4, 0);
+-
+-    mainLayout->addWidget(m_pValuesGB);
+-    m_visibilityEnumWidget = new VisibilityEnumWidget(m_pAttribute, this);
+-    m_visibilityEnumWidget->addToLayout(mainLayout);
+-
+-    m_docWidget = new DocumentationWidget(m_pAttribute, this);
+-    mainLayout->addWidget(m_docWidget);
+-
+-    m_pNameLE->setFocus();
+-    connect(m_pNameLE, SIGNAL(textChanged(QString)), SLOT(slotNameChanged(QString)));
+-    slotNameChanged(m_pNameLE->text());
++    ui->dataTypeWidget->setClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
++    if(activeLanguage == Uml::ProgrammingLanguage::Cpp){
++        ui->typeQualifiersWidget->setUMLClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
++        ui->typeModifierWidget->setUMLClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
++        ui->cb_classifierScopeStatic->setVisible(true);
++    }else{
++        ui->cb_classifierScopeStatic->setVisible(false);
++        ui->typeModifierWidget->setVisible(false);
++        ui->typeQualifiersWidget->setVisible(false);
++    }
++    ui->stereotypeWidget->setUMLObject(m_pAttribute);
++    ui->visibilityWidget->setUMLObject(m_pAttribute);
++    ui->documentationWidget->setUMLObject(m_pAttribute);
+ }
+ 
+ void UMLAttributeDialog::slotNameChanged(const QString &_text)
+@@ -111,11 +81,11 @@ void UMLAttributeDialog::slotNameChanged(const QString &_text)
+  */
+ bool UMLAttributeDialog::apply()
+ {
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if (name.isEmpty()) {
+         KMessageBox::error(this, i18n("You have entered an invalid attribute name."),
+                            i18n("Attribute Name Invalid"), 0);
+-        m_pNameLE->setText(m_pAttribute->name());
++        ui->tb_name->setText(m_pAttribute->name());
+         return false;
+     }
+     UMLClassifier * pConcept = dynamic_cast<UMLClassifier *>(m_pAttribute->parent());
+@@ -123,21 +93,24 @@ bool UMLAttributeDialog::apply()
+     if (o && o != m_pAttribute) {
+         KMessageBox::error(this, i18n("The attribute name you have chosen is already being used in this operation."),
+                            i18n("Attribute Name Not Unique"), 0);
+-        m_pNameLE->setText(m_pAttribute->name());
++        ui->tb_name->setText(m_pAttribute->name());
+         return false;
+     }
+     m_pAttribute->setName(name);
+-    m_visibilityEnumWidget->apply();
++    ui->visibilityWidget->apply();
+ 
+     // Set the scope as the default in the option state
+     Settings::optionState().classState.defaultAttributeScope = m_pAttribute->visibility();
+ 
+-    m_pAttribute->setInitialValue(m_pInitialLE->text());
+-    m_stereotypeWidget->apply();
+-    m_pAttribute->setStatic(m_pStaticCB->isChecked());
++    m_pAttribute->setInitialValue(ui->tb_initialValue->text());
++    ui->stereotypeWidget->apply();
+ 
+-    m_datatypeWidget->apply();
+-    m_docWidget->apply();
++    ui->documentationWidget->apply();
++    if(activeLanguage == Uml::ProgrammingLanguage::Cpp){
++        ui->dataTypeWidget->apply();
++        ui->typeQualifiersWidget->apply();
++        m_pAttribute->setStatic(ui->cb_classifierScopeStatic->isChecked());
++    }
+ 
+     return true;
+ }
+diff --git a/umbrello/dialogs/umlattributedialog.h b/umbrello/dialogs/umlattributedialog.h
+index 7e0166036cfed65941bfa5f6081916cfe35263de..c02ee41ec29daf84beb54d8327729700172ff694 100644
+--- a/umbrello/dialogs/umlattributedialog.h
++++ b/umbrello/dialogs/umlattributedialog.h
+@@ -12,17 +12,8 @@
+ #define UMLATTRIBUTEDIALOG_H
+ 
+ #include "singlepagedialogbase.h"
+-
+-class DocumentationWidget;
+-class QCheckBox;
+-class QGroupBox;
+-class QRadioButton;
+-class QLabel;
+-class UMLAttribute;
+-class KLineEdit;
+-class UMLDatatypeWidget;
+-class UMLStereotypeWidget;
+-class VisibilityEnumWidget;
++#include "basictypes.h"
++#include "ui_umlattributedialog.h"
+ 
+ /**
+  * @author Paul Hensgen
+@@ -35,6 +26,10 @@ public:
+     UMLAttributeDialog(QWidget * pParent, UMLAttribute * pAttribute);
+     ~UMLAttributeDialog();
+ 
++private:
++    Ui::UMLAttributeDialog *ui;
++    Uml::ProgrammingLanguage::Enum activeLanguage;
++
+ protected:
+     void setupDialog();
+     bool apply();
+@@ -44,18 +39,9 @@ protected:
+      */
+     UMLAttribute * m_pAttribute;
+ 
+-    //GUI Widgets
+-    QGroupBox * m_pValuesGB;
+-    QLabel * m_pNameL, * m_pInitialL;
+-    KLineEdit * m_pNameLE, * m_pInitialLE;
+-    QCheckBox* m_pStaticCB;
+-    UMLDatatypeWidget *m_datatypeWidget;
+-    UMLStereotypeWidget *m_stereotypeWidget;
+-    VisibilityEnumWidget *m_visibilityEnumWidget;
+-    DocumentationWidget *m_docWidget;
+-
+ public slots:
+     void slotNameChanged(const QString &);
++
+ };
+ 
+ #endif
+diff --git a/umbrello/dialogs/umlattributedialog.ui b/umbrello/dialogs/umlattributedialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..40c81ef4fcd261c2bf52573e02997a8d9c319944
+--- /dev/null
++++ b/umbrello/dialogs/umlattributedialog.ui
+@@ -0,0 +1,145 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLAttributeDialog</class>
++ <widget class="QWidget" name="UMLAttributeDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>464</width>
++    <height>300</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout_3">
++   <item>
++    <widget class="QLabel" name="label">
++     <property name="text">
++      <string>General Properties</string>
++     </property>
++     <property name="alignment">
++      <set>Qt::AlignCenter</set>
++     </property>
++    </widget>
++   </item>
++   <item>
++    <layout class="QHBoxLayout" name="horizontalLayout_3">
++     <item>
++      <layout class="QVBoxLayout" name="verticalLayout">
++       <item>
++        <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
++       </item>
++       <item>
++        <layout class="QHBoxLayout" name="horizontalLayout_2">
++         <item>
++          <widget class="QLabel" name="label_3">
++           <property name="text">
++            <string>Name:</string>
++           </property>
++          </widget>
++         </item>
++         <item>
++          <widget class="QLineEdit" name="tb_name"/>
++         </item>
++        </layout>
++       </item>
++      </layout>
++     </item>
++     <item>
++      <layout class="QVBoxLayout" name="verticalLayout_2">
++       <item>
++        <widget class="UMLTypeModifierWidget" name="typeModifierWidget" native="true"/>
++       </item>
++       <item>
++        <layout class="QHBoxLayout" name="horizontalLayout">
++         <item>
++          <widget class="QLabel" name="label_4">
++           <property name="text">
++            <string>Initial Value:</string>
++           </property>
++          </widget>
++         </item>
++         <item>
++          <widget class="QLineEdit" name="tb_initialValue"/>
++         </item>
++        </layout>
++       </item>
++      </layout>
++     </item>
++    </layout>
++   </item>
++   <item>
++    <layout class="QHBoxLayout" name="horizontalLayout_5">
++     <item>
++      <widget class="VisibilityEnumWidget" name="visibilityWidget" native="true"/>
++     </item>
++     <item>
++      <widget class="UmlTypeQualifiersWidget" name="typeQualifiersWidget" native="true"/>
++     </item>
++    </layout>
++   </item>
++   <item>
++    <widget class="QCheckBox" name="cb_classifierScopeStatic">
++     <property name="text">
++      <string>Classifier Scope(&quot;static&quot;)</string>
++     </property>
++    </widget>
++   </item>
++   <item>
++    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true">
++     <property name="sizePolicy">
++      <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++       <horstretch>0</horstretch>
++       <verstretch>0</verstretch>
++      </sizepolicy>
++     </property>
++    </widget>
++   </item>
++   <item>
++    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>VisibilityEnumWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/visibilityenumwidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>DocumentationWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/documentationwidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UmlTypeQualifiersWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umltypequalifierswidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLTypeModifierWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umltypemodifierwidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/umlentityattributedialog.cpp b/umbrello/dialogs/umlentityattributedialog.cpp
+index 0923c6819a3614677bd03396f88c949324142736..4c27b0f80fca535cbce572e1b8d8999df6727410 100644
+--- a/umbrello/dialogs/umlentityattributedialog.cpp
++++ b/umbrello/dialogs/umlentityattributedialog.cpp
+@@ -43,9 +43,11 @@
+ 
+ UMLEntityAttributeDialog::UMLEntityAttributeDialog(QWidget * pParent, UMLEntityAttribute * pEntityAttribute)
+   : SinglePageDialogBase(pParent)
++  , ui(new Ui::UMLEntityAttributeDialog)
++  , m_pEntityAttribute(pEntityAttribute)
+ {
+     setCaption(i18n("Entity Attribute Properties"));
+-    m_pEntityAttribute = pEntityAttribute;
++    ui->setupUi(mainWidget());
+     setupDialog();
+ }
+ 
+@@ -58,69 +60,19 @@ UMLEntityAttributeDialog::~UMLEntityAttributeDialog()
+  */
+ void UMLEntityAttributeDialog::setupDialog()
+ {
+-    int margin = fontMetrics().height();
+-    QFrame *frame = new QFrame(this);
+-    setMainWidget(frame);
+-    QVBoxLayout * mainLayout = new QVBoxLayout(frame);
+-
+-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout * valuesLayout = new QGridLayout(m_pValuesGB);
+-    valuesLayout->setMargin(margin);
+-    valuesLayout->setSpacing(10);
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(m_pEntityAttribute);
+-    m_datatypeWidget->addToLayout(valuesLayout, 0);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
+-                                    m_pNameL, i18nc("name of entity attribute", "&Name:"),
+-                                    m_pNameLE, m_pEntityAttribute->name());
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 2,
+-                                    m_pInitialL, i18n("&Default value:"),
+-                                    m_pInitialLE, m_pEntityAttribute->getInitialValue());
+-
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pEntityAttribute);
+-    m_stereotypeWidget->addToLayout(valuesLayout, 3);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 4,
+-                                    m_pValuesL, i18n("Length/Values:"),
+-                                    m_pValuesLE, m_pEntityAttribute->getValues());
+-
+-    m_pAutoIncrementCB = new QCheckBox(i18n("&Auto increment"), m_pValuesGB);
+-    m_pAutoIncrementCB->setChecked(m_pEntityAttribute->getAutoIncrement());
+-    valuesLayout->addWidget(m_pAutoIncrementCB, 5, 0);
+-
+-    m_pNullCB = new QCheckBox(i18n("Allow &null"), m_pValuesGB);
+-    m_pNullCB->setChecked(m_pEntityAttribute->getNull());
+-    valuesLayout->addWidget(m_pNullCB, 6, 0);
++    ui->dataTypeWidget->setEntityAttribute(m_pEntityAttribute);
++    ui->stereotypeWidget->setUMLObject(m_pEntityAttribute);
++    ui->ck_autoIncrement->setChecked(m_pEntityAttribute->getAutoIncrement());
++    ui->ck_allowNull->setChecked(m_pEntityAttribute->getNull());
+ 
+     // enable/disable isNull depending on the state of Auto Increment Check Box
+-    slotAutoIncrementStateChanged(m_pAutoIncrementCB->isChecked());
+-
+-    m_pAttributesL = new QLabel(i18n("Attributes:"), m_pValuesGB);
+-    valuesLayout->addWidget(m_pAttributesL, 7, 0);
+-
+-    m_pAttributesCB = new KComboBox(true, m_pValuesGB);
+-#if QT_VERSION < 0x050000
+-    m_pAttributesCB->setCompletionMode(KGlobalSettings::CompletionPopup);
+-#endif
+-    valuesLayout->addWidget(m_pAttributesCB, 7, 1);
+-    m_pAttributesL->setBuddy(m_pAttributesCB);
++    slotAutoIncrementStateChanged(ui->ck_autoIncrement->isChecked());
+ 
+     insertAttribute(m_pEntityAttribute->getAttributes());
+-    insertAttribute(QString::fromLatin1("binary"), m_pAttributesCB->count());
+-    insertAttribute(QString::fromLatin1("unsigned"), m_pAttributesCB->count());
+-    insertAttribute(QString::fromLatin1("unsigned zerofill"), m_pAttributesCB->count());
+-
+-    mainLayout->addWidget(m_pValuesGB);
+-
+-    m_pScopeGB = new QGroupBox(i18n("Indexing"), frame);
+-    QHBoxLayout* scopeLayout = new QHBoxLayout(m_pScopeGB);
+-    scopeLayout->setMargin(margin);
+-
+-    m_pNoneRB = new QRadioButton(i18n("&Not Indexed"), m_pScopeGB);
+-    scopeLayout->addWidget(m_pNoneRB);
+-
++    insertAttribute(QString::fromLatin1("binary"), ui->cb_attributesTypes->count());
++    insertAttribute(QString::fromLatin1("unsigned"), ui->cb_attributesTypes->count());
++    insertAttribute(QString::fromLatin1("unsigned zerofill"), ui->cb_attributesTypes->count());
++#if 0
+     /*
+     m_pPublicRB = new QRadioButton(i18n("&Primary"), m_pScopeGB);
+     scopeLayout->addWidget(m_pPublicRB);
+@@ -129,10 +81,6 @@ void UMLEntityAttributeDialog::setupDialog()
+     scopeLayout->addWidget(m_pProtectedRB);
+     */
+ 
+-    m_pPrivateRB = new QRadioButton(i18n("&Indexed"), m_pScopeGB);
+-    scopeLayout->addWidget(m_pPrivateRB);
+-
+-    mainLayout->addWidget(m_pScopeGB);
+     UMLEntityAttribute::DBIndex_Type scope = m_pEntityAttribute->indexType();
+ 
+     /*
+@@ -152,6 +100,11 @@ void UMLEntityAttributeDialog::setupDialog()
+     connect(m_pNameLE, SIGNAL(textChanged(QString)), SLOT(slotNameChanged(QString)));
+     connect(m_pAutoIncrementCB, SIGNAL(clicked(bool)), this, SLOT(slotAutoIncrementStateChanged(bool)));
+     slotNameChanged(m_pNameLE->text());
++#endif
++    ui->tb_name->setFocus();
++    connect(ui->tb_name, &QLineEdit::textChanged, this, &UMLEntityAttributeDialog::slotNameChanged);
++    connect(ui->ck_autoIncrement, &QCheckBox::clicked, this, &UMLEntityAttributeDialog::slotAutoIncrementStateChanged);
++    slotNameChanged(ui->tb_name->text());
+ }
+ 
+ void UMLEntityAttributeDialog::slotNameChanged(const QString &_text)
+@@ -165,11 +118,11 @@ void UMLEntityAttributeDialog::slotNameChanged(const QString &_text)
+  */
+ bool UMLEntityAttributeDialog::apply()
+ {
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if (name.isEmpty()) {
+         KMessageBox::error(this, i18n("You have entered an invalid entity attribute name."),
+                            i18n("Entity Attribute Name Invalid"), 0);
+-        m_pNameLE->setText(m_pEntityAttribute->name());
++        ui->tb_name->setText(m_pEntityAttribute->name());
+         return false;
+     }
+     UMLClassifier * pConcept = dynamic_cast<UMLClassifier *>(m_pEntityAttribute->parent());
+@@ -177,17 +130,17 @@ bool UMLEntityAttributeDialog::apply()
+     if (o && o != m_pEntityAttribute) {
+         KMessageBox::error(this, i18n("The entity attribute name you have chosen is already being used in this operation."),
+                            i18n("Entity Attribute Name Not Unique"), 0);
+-        m_pNameLE->setText(m_pEntityAttribute->name());
++        ui->tb_name->setText(m_pEntityAttribute->name());
+         return false;
+     }
+     m_pEntityAttribute->setName(name);
+-    m_pEntityAttribute->setInitialValue(m_pInitialLE->text());
+-    m_stereotypeWidget->apply();
+-    m_pEntityAttribute->setValues(m_pValuesLE->text());
+-    m_pEntityAttribute->setAttributes(m_pAttributesCB->currentText());
+-    m_pEntityAttribute->setAutoIncrement(m_pAutoIncrementCB->isChecked());
+-    m_pEntityAttribute->setNull(m_pNullCB->isChecked());
+-
++    m_pEntityAttribute->setInitialValue(ui->tb_defaultValue->text());
++    ui->stereotypeWidget->apply();
++    m_pEntityAttribute->setValues(ui->tb_lenghtValues->text());
++    m_pEntityAttribute->setAttributes(ui->cb_attributesTypes->currentText());
++    m_pEntityAttribute->setAutoIncrement(ui->ck_autoIncrement->isChecked());
++    m_pEntityAttribute->setNull(ui->ck_allowNull->isChecked());
++#if 0
+     /*
+     if (m_pPublicRB->isChecked()) {
+         m_pEntityAttribute->setIndexType(UMLEntityAttribute::Primary);
+@@ -201,8 +154,8 @@ bool UMLEntityAttributeDialog::apply()
+     } else {
+         m_pEntityAttribute->setIndexType(UMLEntityAttribute::None);
+     }
+-
+-    m_datatypeWidget->apply();
++#endif
++    ui->dataTypeWidget->apply();
+     return true;
+ }
+ 
+@@ -211,8 +164,7 @@ bool UMLEntityAttributeDialog::apply()
+  */
+ void UMLEntityAttributeDialog::insertAttribute(const QString& type, int index)
+ {
+-    m_pAttributesCB->insertItem(index, type);
+-    m_pAttributesCB->completionObject()->addItem(type);
++    ui->cb_attributesTypes->insertItem(index, type);
+ }
+ 
+ /**
+@@ -221,10 +173,10 @@ void UMLEntityAttributeDialog::insertAttribute(const QString& type, int index)
+ void UMLEntityAttributeDialog::slotAutoIncrementStateChanged(bool checked)
+ {
+     if (checked == true) {
+-        m_pNullCB->setChecked(false);
+-        m_pNullCB->setEnabled(false);
++        ui->ck_allowNull->setChecked(false);
++        ui->ck_allowNull->setEnabled(false);
+     } else if (checked == false) {
+-        m_pNullCB->setEnabled(true);
++        ui->ck_allowNull->setEnabled(true);
+     }
+ 
+ }
+diff --git a/umbrello/dialogs/umlentityattributedialog.h b/umbrello/dialogs/umlentityattributedialog.h
+index 3233dea2f5a08a1b8fdaf5a0adc63418a0df96f5..865909cf0fc932ca71171479c8351738d8330f06 100644
+--- a/umbrello/dialogs/umlentityattributedialog.h
++++ b/umbrello/dialogs/umlentityattributedialog.h
+@@ -12,6 +12,7 @@
+ #define UMLENTITYATTRIBUTEDIALOG_H
+ 
+ #include "singlepagedialogbase.h"
++#include "ui_umlentityattributedialog.h"
+ 
+ class QCheckBox;
+ class QGroupBox;
+@@ -34,6 +35,9 @@ public:
+     UMLEntityAttributeDialog(QWidget* pParent, UMLEntityAttribute* pEntityAttribute);
+     ~UMLEntityAttributeDialog();
+ 
++private:
++    Ui::UMLEntityAttributeDialog *ui;
++
+ protected:
+ 
+     void setupDialog();
+@@ -47,18 +51,6 @@ protected:
+      */
+     UMLEntityAttribute * m_pEntityAttribute;
+ 
+-    //GUI Widgets
+-    QGroupBox * m_pAttsGB, * m_pValuesGB;
+-    QGroupBox * m_pScopeGB;
+-    QRadioButton * m_pPublicRB, * m_pPrivateRB,  * m_pProtectedRB, * m_pNoneRB;
+-    QLabel * m_pNameL, * m_pInitialL, * m_pValuesL, * m_pAttributesL ;
+-    KComboBox * m_pAttributesCB;
+-    KLineEdit * m_pNameLE, * m_pInitialLE, * m_pValuesLE;
+-    QCheckBox* m_pAutoIncrementCB;
+-    QCheckBox* m_pNullCB;
+-    UMLDatatypeWidget *m_datatypeWidget;
+-    UMLStereotypeWidget *m_stereotypeWidget;
+-
+ public slots:
+     void slotAutoIncrementStateChanged(bool checked);
+     void slotNameChanged(const QString &);
+diff --git a/umbrello/dialogs/umlentityattributedialog.ui b/umbrello/dialogs/umlentityattributedialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..dc9b7b03d7ad0cfb0665e1c585888c874d807cd0
+--- /dev/null
++++ b/umbrello/dialogs/umlentityattributedialog.ui
+@@ -0,0 +1,137 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLEntityAttributeDialog</class>
++ <widget class="QWidget" name="UMLEntityAttributeDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>286</width>
++    <height>386</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <property name="layoutDirection">
++   <enum>Qt::LeftToRight</enum>
++  </property>
++  <layout class="QGridLayout" name="gridLayout">
++   <item row="4" column="3">
++    <widget class="QLineEdit" name="tb_defaultValue"/>
++   </item>
++   <item row="8" column="0" colspan="4">
++    <widget class="QCheckBox" name="ck_allowNull">
++     <property name="text">
++      <string>Allow Null</string>
++     </property>
++    </widget>
++   </item>
++   <item row="0" column="0" colspan="4">
++    <widget class="QLabel" name="label">
++     <property name="layoutDirection">
++      <enum>Qt::LeftToRight</enum>
++     </property>
++     <property name="text">
++      <string>General Properties</string>
++     </property>
++     <property name="alignment">
++      <set>Qt::AlignCenter</set>
++     </property>
++    </widget>
++   </item>
++   <item row="3" column="3">
++    <widget class="QLineEdit" name="tb_name"/>
++   </item>
++   <item row="6" column="0" colspan="3">
++    <widget class="QLabel" name="label_4">
++     <property name="text">
++      <string>Lenght/Values:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="10" column="0" colspan="4">
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>Indexing</string>
++     </property>
++     <layout class="QHBoxLayout" name="horizontalLayout_5">
++      <item>
++       <widget class="QRadioButton" name="radioButton">
++        <property name="text">
++         <string>Not Inde&amp;xed</string>
++        </property>
++        <property name="checked">
++         <bool>true</bool>
++        </property>
++       </widget>
++      </item>
++      <item>
++       <widget class="QRadioButton" name="radioButton_2">
++        <property name="text">
++         <string>Indexed</string>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++   <item row="3" column="0">
++    <widget class="QLabel" name="label_2">
++     <property name="text">
++      <string>Name:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="4" column="0" colspan="3">
++    <widget class="QLabel" name="label_3">
++     <property name="text">
++      <string>Default Value:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="1" column="0" colspan="4">
++    <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
++   </item>
++   <item row="9" column="0" colspan="2">
++    <widget class="QLabel" name="label_5">
++     <property name="text">
++      <string>Attributes:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="9" column="2" colspan="2">
++    <widget class="QComboBox" name="cb_attributesTypes"/>
++   </item>
++   <item row="7" column="0" colspan="4">
++    <widget class="QCheckBox" name="ck_autoIncrement">
++     <property name="text">
++      <string>Auto Increment:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="5" column="0" colspan="4">
++    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true"/>
++   </item>
++   <item row="6" column="3">
++    <widget class="QLineEdit" name="tb_lenghtValues"/>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/umloperationdialog.cpp b/umbrello/dialogs/umloperationdialog.cpp
+index 685fa30bc7d8d013b5c4c00437a486b16a78b160..741b8d7018eb06a7bbbf9d85ad0de7436ff426bf 100644
+--- a/umbrello/dialogs/umloperationdialog.cpp
++++ b/umbrello/dialogs/umloperationdialog.cpp
+@@ -59,8 +59,10 @@
+  */
+ UMLOperationDialog::UMLOperationDialog(QWidget * parent, UMLOperation * pOperation)
+   : SinglePageDialogBase(parent)
++  , ui(new Ui::UMLOperationDialog)
+ {
+     setCaption(i18n("Operation Properties"));
++    ui->setupUi(mainWidget());
+     m_operation = pOperation;
+     m_doc = UMLApp::app()->document();
+     m_menu = 0;
+@@ -79,121 +81,39 @@ UMLOperationDialog::~UMLOperationDialog()
+  */
+ void UMLOperationDialog::setupDialog()
+ {
+-    QFrame *frame = new QFrame(this);
+-    setMainWidget(frame);
+-    int margin = fontMetrics().height();
+-    QVBoxLayout * topLayout = new QVBoxLayout(frame);
+-
+-    m_pGenGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout * genLayout = new QGridLayout(m_pGenGB);
+-    genLayout->setColumnStretch(1, 1);
+-    genLayout->setColumnStretch(3, 1);
+-    genLayout->addItem(new QSpacerItem(200, 0), 0, 1);
+-    genLayout->addItem(new QSpacerItem(200, 0), 0, 3);
+-    genLayout->setMargin(margin);
+-    genLayout->setSpacing(10);
+-
+-    Dialog_Utils::makeLabeledEditField(genLayout, 0,
+-                                    m_pNameL, i18nc("operation name", "&Name:"),
+-                                    m_pNameLE, m_operation->name());
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(m_operation);
+-    m_datatypeWidget->addToLayout(genLayout, 0, 2);
+-
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_operation);
+-    m_stereotypeWidget->addToLayout(genLayout, 1);
+-
+-    m_pAbstractCB = new QCheckBox(i18n("&Abstract operation"), m_pGenGB);
+-    m_pAbstractCB->setChecked(m_operation->isAbstract());
+-    genLayout->addWidget(m_pAbstractCB, 2, 0);
+-    m_pStaticCB = new QCheckBox(i18n("Classifier &scope (\"static\")"), m_pGenGB);
+-    m_pStaticCB->setChecked(m_operation->isStatic());
+-    genLayout->addWidget(m_pStaticCB, 2, 1);
+-    m_pQueryCB = new QCheckBox(i18n("&Query (\"const\")"), m_pGenGB);
+-    m_pQueryCB->setChecked(m_operation->getConst());
+-    genLayout->addWidget(m_pQueryCB, 2, 2);
+-
+-    m_visibilityEnumWidget = new VisibilityEnumWidget(m_operation, this);
+-
+-    m_docWidget = new DocumentationWidget(m_operation, this);
+-
+-    m_pParmsGB = new QGroupBox(i18n("Parameters"), frame);
+-    QVBoxLayout* parmsLayout = new QVBoxLayout(m_pParmsGB);
+-    parmsLayout->setMargin(margin);
+-    parmsLayout->setSpacing(10);
+-
+-    // horizontal box contains the list box and the move up/down buttons
+-    QHBoxLayout* parmsHBoxLayout = new QHBoxLayout();
+-    m_pParmsLW = new QListWidget(m_pParmsGB);
+-    m_pParmsLW->setContextMenuPolicy(Qt::CustomContextMenu);
+-
+-    // the move up/down buttons (another vertical box)
+-    QVBoxLayout* buttonLayout = new QVBoxLayout();
+-
+-    m_pUpButton = new QToolButton(m_pParmsGB);
+-    m_pUpButton->setArrowType(Qt::UpArrow);
+-    m_pUpButton->setEnabled(false);
+-    buttonLayout->addWidget(m_pUpButton);
+-
+-    m_pDownButton = new QToolButton(m_pParmsGB);
+-    m_pDownButton->setArrowType(Qt::DownArrow);
+-    m_pDownButton->setEnabled(false);
+-    buttonLayout->addWidget(m_pDownButton);
+-
+-#if QT_VERSION >= 0x050000
+-    QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pParmsGB);
+-    QPushButton* newParam = buttonBox->addButton(i18n("Ne&w Parameter..."), QDialogButtonBox::ActionRole);
+-    connect(newParam, SIGNAL(clicked()), this, SLOT(slotNewParameter()));
+-    m_pDeleteButton = buttonBox->addButton(i18n("&Delete"), QDialogButtonBox::ActionRole);
+-    connect(m_pDeleteButton, SIGNAL(clicked()), this, SLOT(slotDeleteParameter()));
+-    m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), QDialogButtonBox::ActionRole);
+-    connect(m_pPropertiesButton, SIGNAL(clicked()), this, SLOT(slotParameterProperties()));
+-#else
+-    KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pParmsGB);
+-    buttonBox->addButton(i18n("Ne&w Parameter..."), KDialogButtonBox::ActionRole,
+-                          this, SLOT(slotNewParameter()));
+-    m_pDeleteButton = buttonBox->addButton(i18n("&Delete"), KDialogButtonBox::ActionRole,
+-                                            this, SLOT(slotDeleteParameter()));
+-    m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), KDialogButtonBox::ActionRole,
+-                          this, SLOT(slotParameterProperties()));
+-#endif
+-
+-    parmsHBoxLayout->addWidget(m_pParmsLW);
+-    parmsHBoxLayout->addLayout(buttonLayout);
+ 
+-    parmsLayout->addLayout(parmsHBoxLayout);
+-    parmsLayout->addWidget(buttonBox);
++    ui->stereotypeWidget->setUMLObject(m_operation);
++    ui->visibilityWidget->setUMLObject(m_operation);
++    ui->documentationWidget->setUMLObject(m_operation);
++    ui->list_parameters->setContextMenuPolicy(Qt::CustomContextMenu);
+ 
+-    topLayout->addWidget(m_pGenGB);
+-    topLayout->addWidget(m_visibilityEnumWidget);
+-    topLayout->addWidget(m_docWidget);
+-    topLayout->addWidget(m_pParmsGB);
++    // setup push buttons signals
++    connect(ui->pb_newParameter, &QPushButton::clicked, this, &UMLOperationDialog::slotNewParameter);
++    connect(ui->pb_delete, &QPushButton::clicked, this, &UMLOperationDialog::slotDeleteParameter);
++    connect(ui->pb_properties, &QPushButton::clicked, this, &UMLOperationDialog::slotParameterProperties);
+ 
+-    m_pDeleteButton->setEnabled(false);
+-    m_pPropertiesButton->setEnabled(false);
+-    m_pUpButton->setEnabled(false);
+-    m_pDownButton->setEnabled(false);
++    ui->pb_delete->setEnabled(false);
++    ui->pb_properties->setEnabled(false);
++    ui->pb_down->setEnabled(false);
++    ui->pb_up->setEnabled(false);
+ 
+     // fill in parm list box
+     UMLAttributeList list = m_operation->getParmList();
+     foreach (UMLAttribute* pAtt, list) {
+-        m_pParmsLW->addItem(pAtt->toString(Uml::SignatureType::SigNoVis));
++        ui->list_parameters->addItem(pAtt->toString(Uml::SignatureType::SigNoVis));
+     }
+ 
+     // setup parm list box signals
+-    connect(m_pUpButton, SIGNAL(clicked()), this, SLOT(slotParameterUp()));
+-    connect(m_pDownButton, SIGNAL(clicked()), this, SLOT(slotParameterDown()));
+-
+-    connect(m_pParmsLW, SIGNAL(itemClicked(QListWidgetItem*)),
+-            this, SLOT(slotParamsBoxClicked(QListWidgetItem*)));
+-    connect(m_pParmsLW, SIGNAL(customContextMenuRequested(QPoint)),
+-            this, SLOT(slotParmRightButtonPressed(QPoint)));
+-    connect(m_pParmsLW, SIGNAL(itemDoubleClicked(QListWidgetItem*)),
+-            this, SLOT(slotParmDoubleClick(QListWidgetItem*)));
+-
+-    m_pNameLE->setFocus();
+-    connect(m_pNameLE, SIGNAL(textChanged(QString)), SLOT(slotNameChanged(QString)));
+-    slotNameChanged(m_pNameLE->text());
++    connect(ui->pb_up, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterUp);
++    connect(ui->pb_down, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterDown);
++
++    connect(ui->list_parameters, &QListWidget::itemClicked, this, &UMLOperationDialog::slotParamsBoxClicked);
++    connect(ui->list_parameters, &QListWidget::customContextMenuRequested, this, &UMLOperationDialog::slotParmRightButtonPressed);
++    connect(ui->list_parameters, &QListWidget::itemDoubleClicked, this, &UMLOperationDialog::slotParmDoubleClick);
++
++    ui->tb_name->setFocus();
++
++    connect(ui->tb_name, &QLineEdit::textChanged, this, &UMLOperationDialog::slotNameChanged);
+ }
+ 
+ void UMLOperationDialog::slotNameChanged(const QString &_text)
+@@ -204,14 +124,12 @@ void UMLOperationDialog::slotNameChanged(const QString &_text)
+ void UMLOperationDialog::slotParmRightButtonPressed(const QPoint &p)
+ {
+     ListPopupMenu::MenuType type = ListPopupMenu::mt_Undefined;
+-    QListWidgetItem* item = m_pParmsLW->itemAt(p);
++    QListWidgetItem* item = ui->list_parameters->itemAt(p);
+     if (item) // pressed on an item
+-    {
+         type = ListPopupMenu::mt_Parameter_Selected;
+-    } else // pressed into fresh air
+-    {
++    else // pressed into fresh air
+         type = ListPopupMenu::mt_New_Parameter;
+-    }
++
+     if (m_menu) {
+         m_menu->hide();
+         disconnect(m_menu, SIGNAL(triggered(QAction*)), this, SLOT(slotMenuSelection(QAction*)));
+@@ -219,7 +137,7 @@ void UMLOperationDialog::slotParmRightButtonPressed(const QPoint &p)
+         m_menu = 0;
+     }
+     ListPopupMenu popup(this, type);
+-    QAction *triggered = popup.exec(m_pParmsLW->mapToGlobal(p));
++    QAction *triggered = popup.exec(ui->list_parameters->mapToGlobal(p));
+     slotMenuSelection(triggered);
+ }
+ 
+@@ -261,7 +179,7 @@ void UMLOperationDialog::slotNewParameter()
+         if (!pAtt) {
+             newAttribute->setID(UniqueID::gen());
+             m_operation->addParm(newAttribute);
+-            m_pParmsLW->addItem(newAttribute->toString(Uml::SignatureType::SigNoVis));
++            ui->list_parameters->addItem(newAttribute->toString(Uml::SignatureType::SigNoVis));
+             m_doc->setModified(true);
+         } else {
+             KMessageBox::sorry(this, i18n("The parameter name you have chosen\nis already being used in this operation."),
+@@ -276,26 +194,26 @@ void UMLOperationDialog::slotNewParameter()
+ 
+ void UMLOperationDialog::slotDeleteParameter()
+ {
+-    UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(m_pParmsLW->currentItem()));
++    UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(ui->list_parameters->currentItem()));
+ 
+     m_operation->removeParm(pOldAtt);
+-    m_pParmsLW->takeItem(m_pParmsLW->currentRow());
++    ui->list_parameters->takeItem(ui->list_parameters->currentRow());
+     m_doc->setModified(true);
+ 
+-    m_pDeleteButton->setEnabled(false);
+-    m_pPropertiesButton->setEnabled(false);
+-    m_pUpButton->setEnabled(false);
+-    m_pDownButton->setEnabled(false);
++    ui->pb_delete->setEnabled(false);
++    ui->pb_properties->setEnabled(false);
++    ui->pb_up->setEnabled(false);
++    ui->pb_down->setEnabled(false);
+ }
+ 
+ void UMLOperationDialog::slotParameterProperties()
+ {
+     UMLAttribute* pAtt = 0, * pOldAtt = 0;
+ 
+-    int position = m_pParmsLW->row(m_pParmsLW->currentItem());
++    int position = ui->list_parameters->row(ui->list_parameters->currentItem());
+     pOldAtt = m_operation->getParmList().at(position);
+     if (!pOldAtt) {
+-        uDebug() << "THE impossible has occurred for:" << m_pParmsLW->currentItem()->text();
++        uDebug() << "THE impossible has occurred for:" << ui->list_parameters->currentItem()->text();
+         return;
+     } // should never occur
+ 
+@@ -320,7 +238,7 @@ void UMLOperationDialog::slotParameterProperties()
+             pOldAtt->setName(oldAttName); // reset the name if there was a naming conflict
+         }
+ 
+-        QListWidgetItem* item = m_pParmsLW->currentItem();
++        QListWidgetItem* item = ui->list_parameters->currentItem();
+         item->setText(pOldAtt->toString(Uml::SignatureType::SigNoVis));
+         m_doc->setModified(true);
+     }
+@@ -330,14 +248,14 @@ void UMLOperationDialog::slotParameterProperties()
+ 
+ void UMLOperationDialog::slotParameterUp()
+ {
+-    int row = m_pParmsLW->currentRow();
+-    QListWidgetItem* item = m_pParmsLW->currentItem();
++    int row = ui->list_parameters->currentRow();
++    QListWidgetItem* item = ui->list_parameters->currentItem();
+     if (item) {
+-        UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(item));
++        UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(item));
+ 
+         m_operation->moveParmLeft(pOldAtt);
+-        m_pParmsLW->takeItem(row);
+-        m_pParmsLW->insertItem(row - 1, item);
++        ui->list_parameters->takeItem(row);
++        ui->list_parameters->insertItem(row - 1, item);
+ 
+         m_doc->setModified(true);
+         slotParamsBoxClicked(item);
+@@ -349,14 +267,14 @@ void UMLOperationDialog::slotParameterUp()
+ 
+ void UMLOperationDialog::slotParameterDown()
+ {
+-    int row = m_pParmsLW->currentRow();
+-    QListWidgetItem* item = m_pParmsLW->currentItem();
++    int row = ui->list_parameters->currentRow();
++    QListWidgetItem* item = ui->list_parameters->currentItem();
+     if (item) {
+-        UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(item));
++        UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(item));
+ 
+         m_operation->moveParmRight(pOldAtt);
+-        m_pParmsLW->takeItem(row);
+-        m_pParmsLW->insertItem(row + 1, item);
++        ui->list_parameters->takeItem(row);
++        ui->list_parameters->insertItem(row + 1, item);
+ 
+         m_doc->setModified(true);
+         slotParamsBoxClicked(item);
+@@ -372,18 +290,18 @@ void UMLOperationDialog::slotParameterDown()
+ void UMLOperationDialog::slotParamsBoxClicked(QListWidgetItem* parameterItem)
+ {
+     if (parameterItem) {
+-        m_pDeleteButton->setEnabled(true);
+-        m_pPropertiesButton->setEnabled(true);
+-        int row = m_pParmsLW->row(parameterItem);
+-        bool hasNext = (row < m_pParmsLW->count() - 1);
++        ui->pb_delete->setEnabled(true);
++        ui->pb_properties->setEnabled(true);
++        int row = ui->list_parameters->row(parameterItem);
++        bool hasNext = (row < ui->list_parameters->count() - 1);
+         bool hasPrev = (row > 0);
+-        m_pUpButton->setEnabled(hasPrev);
+-        m_pDownButton->setEnabled(hasNext);
++        ui->pb_up->setEnabled(hasPrev);
++        ui->pb_down->setEnabled(hasNext);
+     } else {
+-        m_pDeleteButton->setEnabled(false);
+-        m_pPropertiesButton->setEnabled(false);
+-        m_pUpButton->setEnabled(false);
+-        m_pDownButton->setEnabled(false);
++        ui->pb_delete->setEnabled(false);
++        ui->pb_properties->setEnabled(false);
++        ui->pb_up->setEnabled(false);
++        ui->pb_down->setEnabled(false);
+     }
+ }
+ 
+@@ -393,11 +311,11 @@ void UMLOperationDialog::slotParamsBoxClicked(QListWidgetItem* parameterItem)
+  */
+ bool UMLOperationDialog::apply()
+ {
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if(name.length() == 0) {
+         KMessageBox::error(this, i18n("You have entered an invalid operation name."),
+                            i18n("Operation Name Invalid"), 0);
+-        m_pNameLE->setText(m_operation->name());
++        ui->tb_name->setText(m_operation->name());
+         return false;
+     }
+ 
+@@ -413,11 +331,11 @@ bool UMLOperationDialog::apply()
+     }
+     m_operation->setName(name);
+ 
+-    m_visibilityEnumWidget->apply();
+-    m_datatypeWidget->apply();
+-    m_stereotypeWidget->apply();
++    ui->visibilityWidget->apply();
++    ui->dataTypeWidget->apply();
++    ui->stereotypeWidget->apply();
+ 
+-    bool isAbstract = m_pAbstractCB->isChecked();
++    bool isAbstract = ui->ck_abstract->isChecked();
+     m_operation->setAbstract(isAbstract);
+     if (isAbstract) {
+         /* If any operation is abstract then the owning class needs
+@@ -429,9 +347,9 @@ bool UMLOperationDialog::apply()
+             classifier->setAbstract(true);
+         }
+     }
+-    m_operation->setStatic(m_pStaticCB->isChecked());
+-    m_operation->setConst(m_pQueryCB->isChecked());
+-    m_docWidget->apply();
++    m_operation->setStatic(ui->ck_classifierScope->isChecked());
++    m_operation->setConst(ui->ck_queryConst->isChecked());
++    ui->documentationWidget->apply();
+ 
+     return true;
+ }
+diff --git a/umbrello/dialogs/umloperationdialog.h b/umbrello/dialogs/umloperationdialog.h
+index 8cc4e5a1d0b70f5a1bb0779c8d0c47f80204a6a0..9721bcf1c918e0ec4d6b664e221ab60e2e5d7caa 100644
+--- a/umbrello/dialogs/umloperationdialog.h
++++ b/umbrello/dialogs/umloperationdialog.h
+@@ -13,6 +13,7 @@
+ 
+ //kde includes
+ #include "singlepagedialogbase.h"
++#include "ui_umloperationdialog.h"
+ 
+ class DocumentationWidget;
+ class KComboBox;
+@@ -44,6 +45,8 @@ public:
+ 
+     UMLOperationDialog(QWidget * parent, UMLOperation * pOperation);
+     ~UMLOperationDialog();
++private:
++    Ui::UMLOperationDialog *ui;
+ 
+ protected:
+ 
+@@ -57,29 +60,6 @@ protected:
+     UMLDoc*           m_doc;        ///< The UMLDocument where all objects live.
+     ListPopupMenu*    m_menu;       ///< Menu used in parameter list box.
+ 
+-    //GUI widgets
+-    QGroupBox*            m_pParmsGB;
+-    QGroupBox*            m_pGenGB;
+-    QListWidget*          m_pParmsLW;
+-    QGroupBox*            m_pScopeGB;
+-    QRadioButton*         m_pPublicRB;
+-    QRadioButton*         m_pPrivateRB;
+-    QRadioButton*         m_pProtectedRB;
+-    QRadioButton*         m_pImplementationRB;
+-    QLabel*               m_pNameL;
+-    UMLDatatypeWidget*    m_datatypeWidget;
+-    UMLStereotypeWidget*  m_stereotypeWidget;
+-    KLineEdit*            m_pNameLE;
+-    QCheckBox*            m_pAbstractCB;
+-    QCheckBox*            m_pStaticCB;
+-    QCheckBox*            m_pQueryCB;
+-    QPushButton*          m_pDeleteButton;
+-    QPushButton*          m_pPropertiesButton;
+-    QToolButton*          m_pUpButton;
+-    QToolButton*          m_pDownButton;
+-    DocumentationWidget*  m_docWidget;
+-    VisibilityEnumWidget* m_visibilityEnumWidget;
+-
+ public slots:
+     void slotParmRightButtonPressed(const QPoint &p);
+     void slotParmDoubleClick(QListWidgetItem *item);
+diff --git a/umbrello/dialogs/umloperationdialog.ui b/umbrello/dialogs/umloperationdialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..4e9eeeac29a1ec1a519d21d0fad6ed10543cd329
+--- /dev/null
++++ b/umbrello/dialogs/umloperationdialog.ui
+@@ -0,0 +1,254 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLOperationDialog</class>
++ <widget class="QWidget" name="UMLOperationDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>515</width>
++    <height>539</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout_2">
++   <item>
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>General Properties</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout">
++      <item row="0" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout">
++        <item>
++         <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QLabel" name="label">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++          <property name="text">
++           <string>Name:</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QLineEdit" name="tb_name">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <spacer name="horizontalSpacer_2">
++          <property name="orientation">
++           <enum>Qt::Horizontal</enum>
++          </property>
++          <property name="sizeHint" stdset="0">
++           <size>
++            <width>40</width>
++            <height>20</height>
++           </size>
++          </property>
++         </spacer>
++        </item>
++       </layout>
++      </item>
++      <item row="1" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout_4">
++        <item>
++         <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <spacer name="horizontalSpacer_3">
++          <property name="orientation">
++           <enum>Qt::Horizontal</enum>
++          </property>
++          <property name="sizeHint" stdset="0">
++           <size>
++            <width>40</width>
++            <height>20</height>
++           </size>
++          </property>
++         </spacer>
++        </item>
++       </layout>
++      </item>
++      <item row="2" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout_3">
++        <item>
++         <widget class="QCheckBox" name="ck_abstract">
++          <property name="text">
++           <string>Abstract Operation</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QCheckBox" name="ck_classifierScope">
++          <property name="text">
++           <string>Classifier scope (&quot;static&quot;)</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QCheckBox" name="ck_queryConst">
++          <property name="text">
++           <string>Query (&quot;const&quot;)</string>
++          </property>
++         </widget>
++        </item>
++       </layout>
++      </item>
++     </layout>
++    </widget>
++   </item>
++   <item>
++    <widget class="VisibilityEnumWidget" name="visibilityWidget" native="true"/>
++   </item>
++   <item>
++    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
++   </item>
++   <item>
++    <widget class="QGroupBox" name="groupBox_2">
++     <property name="title">
++      <string>Parameters</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout_2">
++      <item row="0" column="0" rowspan="2">
++       <widget class="QListWidget" name="list_parameters">
++        <property name="sizePolicy">
++         <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
++          <horstretch>0</horstretch>
++          <verstretch>0</verstretch>
++         </sizepolicy>
++        </property>
++       </widget>
++      </item>
++      <item row="2" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout_2">
++        <item>
++         <spacer name="horizontalSpacer">
++          <property name="orientation">
++           <enum>Qt::Horizontal</enum>
++          </property>
++          <property name="sizeHint" stdset="0">
++           <size>
++            <width>40</width>
++            <height>20</height>
++           </size>
++          </property>
++         </spacer>
++        </item>
++        <item>
++         <widget class="QPushButton" name="pb_newParameter">
++          <property name="text">
++           <string>New Parameter</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QPushButton" name="pb_delete">
++          <property name="text">
++           <string>Delete</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QPushButton" name="pb_properties">
++          <property name="text">
++           <string>Properties</string>
++          </property>
++         </widget>
++        </item>
++       </layout>
++      </item>
++      <item row="1" column="1">
++       <widget class="QToolButton" name="pb_down">
++        <property name="text">
++         <string/>
++        </property>
++        <property name="arrowType">
++         <enum>Qt::DownArrow</enum>
++        </property>
++       </widget>
++      </item>
++      <item row="0" column="1">
++       <widget class="QToolButton" name="pb_up">
++        <property name="text">
++         <string/>
++        </property>
++        <property name="arrowType">
++         <enum>Qt::UpArrow</enum>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++   <item>
++    <spacer name="verticalSpacer">
++     <property name="orientation">
++      <enum>Qt::Vertical</enum>
++     </property>
++     <property name="sizeHint" stdset="0">
++      <size>
++       <width>20</width>
++       <height>40</height>
++      </size>
++     </property>
++    </spacer>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>DocumentationWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/documentationwidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>VisibilityEnumWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/visibilityenumwidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/umltemplatedialog.cpp b/umbrello/dialogs/umltemplatedialog.cpp
+index 766573772aeaf68eb4e965a30e5e8ae4be044713..42d4afe2c50d17cc026396003c39de9446ebb0b0 100644
+--- a/umbrello/dialogs/umltemplatedialog.cpp
++++ b/umbrello/dialogs/umltemplatedialog.cpp
+@@ -37,9 +37,11 @@
+ 
+ UMLTemplateDialog::UMLTemplateDialog(QWidget* pParent, UMLTemplate* pTemplate)
+   : SinglePageDialogBase(pParent)
++  , ui(new Ui::UMLTemplateDialog)
+ {
+     m_pTemplate = pTemplate;
+     setCaption(i18n("Template Properties"));
++    ui->setupUi(mainWidget());
+     setupDialog();
+ }
+ 
+@@ -52,32 +54,10 @@ UMLTemplateDialog::~UMLTemplateDialog()
+  */
+ void UMLTemplateDialog::setupDialog()
+ {
+-    int margin = fontMetrics().height();
+-
+-    QFrame *frame = new QFrame(this);
+-    setMainWidget(frame);
+-    QVBoxLayout* mainLayout = new QVBoxLayout(frame);
+-
+-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout* valuesLayout = new QGridLayout(m_pValuesGB);
+-    valuesLayout->setMargin(margin);
+-    valuesLayout->setSpacing(10);
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(m_pTemplate);
+-    m_datatypeWidget->addToLayout(valuesLayout, 0);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
+-                                    m_pNameL, i18nc("template name", "&Name:"),
+-                                    m_pNameLE, m_pTemplate->name());
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pTemplate);
+-    m_stereotypeWidget->addToLayout(valuesLayout, 2);
+-
+-    mainLayout->addWidget(m_pValuesGB);
+-
+-    m_docWidget = new DocumentationWidget(m_pTemplate, this);
+-    mainLayout->addWidget(m_docWidget);
+-
+-    m_pNameLE->setFocus();
++    ui->dataTypeWidget->setTemplate(m_pTemplate);
++    ui->stereotypeWidget->setUMLObject(m_pTemplate);
++    ui->documentationWidget->setUMLObject(m_pTemplate);
++    ui->tb_name->setFocus();
+ }
+ 
+ /**
+@@ -86,13 +66,13 @@ void UMLTemplateDialog::setupDialog()
+  */
+ bool UMLTemplateDialog::apply()
+ {
+-    m_datatypeWidget->apply();
++    ui->dataTypeWidget->apply();
+ 
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if(name.length() == 0) {
+         KMessageBox::error(this, i18n("You have entered an invalid template name."),
+                            i18n("Template Name Invalid"), 0);
+-        m_pNameLE->setText(m_pTemplate->name());
++        ui->tb_name->setText(m_pTemplate->name());
+         return false;
+     }
+ 
+@@ -102,13 +82,13 @@ bool UMLTemplateDialog::apply()
+         if (o && o != m_pTemplate) {
+             KMessageBox::error(this, i18n("The template parameter name you have chosen is already being used in this operation."),
+                                i18n("Template Name Not Unique"), 0);
+-            m_pNameLE->setText(m_pTemplate->name());
++            ui->tb_name->setText(m_pTemplate->name());
+             return false;
+         }
+     }
+     m_pTemplate->setName(name);
+-    m_stereotypeWidget->apply();
+-    m_docWidget->apply();
++    ui->stereotypeWidget->apply();
++    ui->documentationWidget->apply();
+ 
+     return true;
+ }
+diff --git a/umbrello/dialogs/umltemplatedialog.h b/umbrello/dialogs/umltemplatedialog.h
+index 2ab6dd3365ce978196836ade91278647fd4b5930..698ef9ea7028db5871a8bcf665b7b21f840c04c8 100644
+--- a/umbrello/dialogs/umltemplatedialog.h
++++ b/umbrello/dialogs/umltemplatedialog.h
+@@ -12,6 +12,7 @@
+ #define UMLTEMPLATEDIALOG_H
+ 
+ #include "singlepagedialogbase.h"
++#include "ui_umltemplatedialog.h"
+ 
+ class DocumentationWidget;
+ class KComboBox;
+@@ -34,6 +35,8 @@ class UMLTemplateDialog : public SinglePageDialogBase
+ public:
+     UMLTemplateDialog(QWidget* pParent, UMLTemplate* pAttribute);
+     ~UMLTemplateDialog();
++private:
++    Ui::UMLTemplateDialog *ui;
+ 
+ protected:
+ 
+@@ -46,14 +49,6 @@ protected:
+      */
+     UMLTemplate* m_pTemplate;
+ 
+-    // GUI Widgets
+-    QGroupBox *m_pValuesGB;
+-    QLabel *m_pNameL;
+-    KLineEdit *m_pNameLE;
+-    UMLDatatypeWidget *m_datatypeWidget;
+-    UMLStereotypeWidget *m_stereotypeWidget;
+-    DocumentationWidget *m_docWidget;
+-
+ protected:
+ 
+     void insertTypesSorted(const QString& type = QString());
+diff --git a/umbrello/dialogs/umltemplatedialog.ui b/umbrello/dialogs/umltemplatedialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..92b21a36d62d058c7dd9abf6df907ccee9830b27
+--- /dev/null
++++ b/umbrello/dialogs/umltemplatedialog.ui
+@@ -0,0 +1,74 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLTemplateDialog</class>
++ <widget class="QWidget" name="UMLTemplateDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>315</width>
++    <height>138</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QGridLayout" name="gridLayout">
++   <item row="0" column="0" colspan="2">
++    <widget class="QLabel" name="label">
++     <property name="text">
++      <string>General Properties</string>
++     </property>
++    </widget>
++   </item>
++   <item row="1" column="0" colspan="2">
++    <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
++   </item>
++   <item row="2" column="0">
++    <widget class="QLabel" name="label_2">
++     <property name="text">
++      <string>Name:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="2" column="1">
++    <widget class="QLineEdit" name="tb_name">
++     <property name="sizePolicy">
++      <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
++       <horstretch>0</horstretch>
++       <verstretch>0</verstretch>
++      </sizepolicy>
++     </property>
++    </widget>
++   </item>
++   <item row="3" column="0" colspan="2">
++    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true"/>
++   </item>
++   <item row="4" column="0" colspan="2">
++    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>DocumentationWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/documentationwidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/widgets/documentationwidget.cpp b/umbrello/dialogs/widgets/documentationwidget.cpp
+index 09cbe298e95ca877a7b0d9bdaacb5d358b01e945..88c40804d2087d1a47959e302e15ab8cc66d99e4 100644
+--- a/umbrello/dialogs/widgets/documentationwidget.cpp
++++ b/umbrello/dialogs/widgets/documentationwidget.cpp
+@@ -19,13 +19,10 @@
+ #include <QGroupBox>
+ #include <QHBoxLayout>
+ 
+-DocumentationWidget::DocumentationWidget(UMLObject *o, QWidget *parent) :
++DocumentationWidget::DocumentationWidget(QWidget *parent) :
+     QWidget(parent),
+-    m_object(o),
+     m_widget(0)
+ {
+-    Q_ASSERT(o);
+-    init(o->doc());
+ }
+ 
+ DocumentationWidget::DocumentationWidget(UMLWidget *w, QWidget *parent) :
+@@ -54,6 +51,13 @@ void DocumentationWidget::apply()
+         m_widget->setDocumentation(m_editField->toPlainText());
+ }
+ 
++void DocumentationWidget::setUMLObject(UMLObject *o)
++{
++    Q_ASSERT(o);
++    m_object = o;
++    init(o->doc());
++}
++
+ /**
+  * initialize widget
+  * @param text text to display
+diff --git a/umbrello/dialogs/widgets/documentationwidget.h b/umbrello/dialogs/widgets/documentationwidget.h
+index 279553ef97a398917d3578411d2d8e680b0a17eb..36234b5ed20efc0467d27bb031cf733ed3ca4fb3 100644
+--- a/umbrello/dialogs/widgets/documentationwidget.h
++++ b/umbrello/dialogs/widgets/documentationwidget.h
+@@ -25,11 +25,12 @@ class DocumentationWidget : public QWidget
+ {
+     Q_OBJECT
+ public:
+-    explicit DocumentationWidget(UMLObject *o, QWidget *parent = 0);
++    explicit DocumentationWidget(QWidget *parent = 0);
+     explicit DocumentationWidget(UMLWidget *w, QWidget *parent = 0);
+     ~DocumentationWidget();
+ 
+     void apply();
++    void setUMLObject(UMLObject *o);
+ 
+ protected:
+     QGroupBox *m_box;
+diff --git a/umbrello/dialogs/widgets/umldatatypewidget.cpp b/umbrello/dialogs/widgets/umldatatypewidget.cpp
+index 5cd1fbaab377f68722254d9f683b028c3b510d38..1c3759221c91249f03412ec5847e381a502a4ab9 100644
+--- a/umbrello/dialogs/widgets/umldatatypewidget.cpp
++++ b/umbrello/dialogs/widgets/umldatatypewidget.cpp
+@@ -30,69 +30,14 @@
+ #include <QLabel>
+ #include <QWidget>
+ 
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLAttribute *attribute, QWidget *parent)
+-  : QWidget(parent),
+-    m_attribute(attribute),
+-    m_datatype(0),
+-    m_entityAttribute(0),
+-    m_operation(0),
+-    m_template(0)
++UMLDatatypeWidget::UMLDatatypeWidget(QWidget *parent) : QWidget(parent)
++  , m_attribute(nullptr)
++  , m_datatype(nullptr)
++  , m_operation(nullptr)
++  , m_entityAttribute(nullptr)
++  , m_template(nullptr)
+ {
+     init();
+-    m_parent = dynamic_cast<UMLClassifier*>(m_attribute->parent()->parent());
+-    insertTypesSortedParameter(m_attribute->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLClassifierListItem *datatype, QWidget *parent)
+-  : QWidget(parent),
+-    m_attribute(0),
+-    m_datatype(datatype),
+-    m_entityAttribute(0),
+-    m_operation(0),
+-    m_template(0)
+-{
+-    init();
+-    m_parent = dynamic_cast<UMLClassifier *>(m_datatype->parent());
+-    insertTypesSortedAttribute(m_datatype->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLEntityAttribute *entityAttribute, QWidget *parent)
+-   : QWidget(parent),
+-     m_attribute(0),
+-     m_datatype(0),
+-     m_entityAttribute(entityAttribute),
+-     m_operation(0),
+-     m_template(0)
+-{
+-    init();
+-    m_parent = 0;
+-    insertTypesSortedEntityAttribute(m_entityAttribute->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLOperation *operation, QWidget *parent)
+- :  QWidget(parent),
+-    m_attribute(0),
+-    m_datatype(0),
+-    m_entityAttribute(0),
+-    m_operation(operation),
+-    m_template(0)
+-{
+-    init();
+-    m_parent = dynamic_cast<UMLClassifier*>(m_operation->parent());
+-    insertTypesSortedOperation(m_operation->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLTemplate *_template, QWidget *parent)
+- :  QWidget(parent),
+-    m_attribute(0),
+-    m_datatype(0),
+-    m_entityAttribute(0),
+-    m_operation(0),
+-    m_template(_template)
+-{
+-    init();
+-    m_parent = 0;
+-    insertTypesSortedTemplate(m_template->getTypeName());
+ }
+ 
+ void UMLDatatypeWidget::init()
+@@ -113,12 +58,52 @@ void UMLDatatypeWidget::init()
+     setLayout(layout);
+ }
+ 
++
++
+ UMLDatatypeWidget::~UMLDatatypeWidget()
+ {
+     delete m_comboBox;
+     delete m_label;
+ }
+ 
++void UMLDatatypeWidget::setAttribute(UMLAttribute *attribute)
++{
++    m_attribute = attribute;
++    m_parent = dynamic_cast<UMLClassifier*>(m_attribute->parent()->parent());
++    insertTypesSortedParameter(m_attribute->getTypeName());
++}
++
++void UMLDatatypeWidget::setClassifierItem(UMLClassifierListItem *datatype)
++{
++    m_datatype = datatype;
++    m_parent = dynamic_cast<UMLClassifier *>(m_datatype->parent());
++    insertTypesSortedAttribute(m_datatype->getTypeName());
++
++}
++
++void UMLDatatypeWidget::setEntityAttribute(UMLEntityAttribute *entityAttribute)
++{
++    m_entityAttribute = entityAttribute;
++    m_parent = 0;
++    insertTypesSortedEntityAttribute(m_entityAttribute->getTypeName());
++}
++
++void UMLDatatypeWidget::setOPeration(UMLOperation *operation)
++{
++    m_operation = operation;
++    m_parent = dynamic_cast<UMLClassifier*>(m_operation->parent());
++    insertTypesSortedOperation(m_operation->getTypeName());
++
++}
++
++void UMLDatatypeWidget::setTemplate(UMLTemplate *_template)
++{
++    m_template = _template;
++    m_parent = 0;
++    insertTypesSortedTemplate(m_template->getTypeName());
++
++}
++
+ bool UMLDatatypeWidget::apply()
+ {
+     if (m_datatype)
+diff --git a/umbrello/dialogs/widgets/umldatatypewidget.h b/umbrello/dialogs/widgets/umldatatypewidget.h
+index bdac23e0c88040941a07ce6b1268b47f683d4103..75b92bd65b40c748ba15fdcee18e24656890b357 100644
+--- a/umbrello/dialogs/widgets/umldatatypewidget.h
++++ b/umbrello/dialogs/widgets/umldatatypewidget.h
+@@ -26,13 +26,15 @@ class UMLTemplate;
+ class UMLDatatypeWidget : public QWidget
+ {
+ public:
+-    UMLDatatypeWidget(UMLAttribute *attribute, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLClassifierListItem *datatype, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLEntityAttribute *entityAttribute, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLOperation *operation, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLTemplate *_template, QWidget *parent=0);
++    UMLDatatypeWidget(QWidget *parent = 0);
+     ~UMLDatatypeWidget();
+ 
++    void setAttribute(UMLAttribute *attribute);
++    void setClassifierItem(UMLClassifierListItem *datatype);
++    void setEntityAttribute(UMLEntityAttribute *entityAttribute);
++    void setOPeration(UMLOperation *operation);
++    void setTemplate(UMLTemplate *_template);
++
+     void addToLayout(QGridLayout *layout, int row, int startColumn = 0);
+     bool apply();
+     void reset();
+diff --git a/umbrello/dialogs/widgets/umlstereotypewidget.cpp b/umbrello/dialogs/widgets/umlstereotypewidget.cpp
+index 6d7f3e46903a83e3494889a27dabdeb832358416..1130b52120add34044f31bbe36cc385b2285df26 100644
+--- a/umbrello/dialogs/widgets/umlstereotypewidget.cpp
++++ b/umbrello/dialogs/widgets/umlstereotypewidget.cpp
+@@ -23,14 +23,11 @@
+ #include <QLabel>
+ #include <QWidget>
+ 
+-Q_DECLARE_METATYPE(UMLStereotype*);
++Q_DECLARE_METATYPE(UMLStereotype*)
+ 
+-UMLStereotypeWidget::UMLStereotypeWidget(UMLObject *object, QWidget *parent)
+-    : QWidget(parent),
+-      m_object(object)
+-{
+-    Q_ASSERT(m_object);
+-    init();
++UMLStereotypeWidget::UMLStereotypeWidget(QWidget *parent)
++    : QWidget(parent)
++{    
+ }
+ 
+ UMLStereotypeWidget::~UMLStereotypeWidget()
+@@ -39,6 +36,12 @@ UMLStereotypeWidget::~UMLStereotypeWidget()
+     delete m_label;
+ }
+ 
++void UMLStereotypeWidget::setUMLObject(UMLObject *o)
++{
++    m_object = o;
++    init();
++}
++
+ /**
+  * Set state if stereotypes could be edited. By default stereotypes could be edited.
+  * @param state edit state
+diff --git a/umbrello/dialogs/widgets/umlstereotypewidget.h b/umbrello/dialogs/widgets/umlstereotypewidget.h
+index 8a936cf2640debfe19fc11ea5c81243afa2f7274..a68a28f630917921b6a3aea5e2489f492a64d0bb 100644
+--- a/umbrello/dialogs/widgets/umlstereotypewidget.h
++++ b/umbrello/dialogs/widgets/umlstereotypewidget.h
+@@ -24,13 +24,15 @@ class QLabel;
+ class UMLStereotypeWidget : public QWidget
+ {
+ public:
+-    explicit UMLStereotypeWidget(UMLObject *object, QWidget *parent=0);
++    explicit UMLStereotypeWidget(QWidget *parent=0);
+     ~UMLStereotypeWidget();
+ 
++    void setUMLObject(UMLObject *o);
+     void setEditable(bool state);
+     void addToLayout(QGridLayout *layout, int row);
+     void apply();
+ 
++
+ protected:
+     QLabel *m_label;
+     KComboBox *m_comboBox;
+diff --git a/umbrello/dialogs/widgets/umltypemodifierwidget.cpp b/umbrello/dialogs/widgets/umltypemodifierwidget.cpp
+new file mode 100644
+index 0000000000000000000000000000000000000000..dd3c401e9ae18d20ef1c17e9e7ecd9a7c132e79a
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypemodifierwidget.cpp
+@@ -0,0 +1,43 @@
++#include "umltypemodifierwidget.h"
++#include "classifierlistitem.h"
++#include "uml.h"
++
++#include <KLocalizedString>
++
++UMLTypeModifierWidget::UMLTypeModifierWidget(QWidget *parent) : QWidget(parent)
++{
++    m_texts[Uml::TypeModifiers::None] = i18nc("none", "None");
++    m_texts[Uml::TypeModifiers::Pointer] = i18nc("pointer type", "*");
++    m_texts[Uml::TypeModifiers::Reference] = i18nc("reference type", "&");
++    init(i18n("Type Modifiers:"));
++
++}
++
++void UMLTypeModifierWidget::apply()
++{
++    QString currData = m_typeCB->currentText();
++    Uml::TypeModifiers::Enum key = m_texts.key(currData);
++    if(m_typeModifier)
++        m_typeModifier->setModifier(key);
++}
++
++void UMLTypeModifierWidget::setUMLClassifierItem(UMLClassifierListItem *o)
++{
++    Q_ASSERT(o);
++    m_typeModifier = o;
++}
++
++void UMLTypeModifierWidget::init(const QString &title)
++{
++    auto layout = new QHBoxLayout;
++    auto label = new QLabel(title);
++    layout->addWidget(label);
++    m_typeCB = new QComboBox();
++
++    foreach (const auto &text, m_texts) {
++        m_typeCB->addItem(text);
++    }
++
++    layout->addWidget(m_typeCB);
++    setLayout(layout);
++}
+diff --git a/umbrello/dialogs/widgets/umltypemodifierwidget.h b/umbrello/dialogs/widgets/umltypemodifierwidget.h
+new file mode 100644
+index 0000000000000000000000000000000000000000..85a1dc0f66fa0aba58aa4149de48c2447523593f
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypemodifierwidget.h
+@@ -0,0 +1,29 @@
++#ifndef UMLTYPEMODIFIERWIDGET_H
++#define UMLTYPEMODIFIERWIDGET_H
++
++#include <QtWidgets>
++
++#include "basictypes.h"
++
++class UMLClassifierListItem;
++
++class UMLTypeModifierWidget : public QWidget
++{
++    Q_OBJECT
++public:
++    explicit UMLTypeModifierWidget(QWidget *parent = 0);
++
++    void apply();
++
++    void setUMLClassifierItem(UMLClassifierListItem *o);
++
++private:
++    void init(const QString &title);
++    typedef QMap<Uml::TypeModifiers::Enum,QString> TextMap;
++    TextMap m_texts;
++    UMLClassifierListItem *m_typeModifier;
++    QComboBox *m_typeCB;
++
++};
++
++#endif // UMLTYPEMODIFIERWIDGET_H
+diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.cpp b/umbrello/dialogs/widgets/umltypequalifierswidget.cpp
+new file mode 100644
+index 0000000000000000000000000000000000000000..853d65364beac22cf2d9dce5087df60f7282378c
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypequalifierswidget.cpp
+@@ -0,0 +1,33 @@
++#include "umltypequalifierswidget.h"
++#include "classifierlistitem.h"
++#include "uml.h"
++#include "basictypes.h"
++
++#include <KLocalizedString>
++
++UmlTypeQualifiersWidget::UmlTypeQualifiersWidget(QWidget *parent)
++  : QWidget(parent)
++  ,ui(new Ui::UMLTypeQualifiersWidget)
++{
++    ui->setupUi(this);
++}
++
++void UmlTypeQualifiersWidget::apply()
++{
++    if(ui->ck_const->isChecked() && ui->ck_volatile->isChecked())
++        m_qualifier->setQualifier(Uml::TypeQualifiers::ConstVolatile);
++    else if(ui->rb_none->isChecked())
++        m_qualifier->setQualifier(Uml::TypeQualifiers::None);
++    else if(ui->ck_const->isChecked())
++        m_qualifier->setQualifier(Uml::TypeQualifiers::Const);
++    else if(ui->rb_mutable->isChecked())
++        m_qualifier->setQualifier(Uml::TypeQualifiers::Mutable);
++    else if(ui->ck_volatile->isChecked())
++        m_qualifier->setQualifier(Uml::TypeQualifiers::Volatile);
++}
++
++void UmlTypeQualifiersWidget::setUMLClassifierItem(UMLClassifierListItem *o)
++{
++    Q_ASSERT(o);
++    m_qualifier = o;
++}
+diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.h b/umbrello/dialogs/widgets/umltypequalifierswidget.h
+new file mode 100644
+index 0000000000000000000000000000000000000000..8d36d3386c0d092c531f53a5e8a2a9c658d5ef39
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypequalifierswidget.h
+@@ -0,0 +1,27 @@
++#ifndef UMLTYPEQUALIFIERSWIDGET_H
++#define UMLTYPEQUALIFIERSWIDGET_H
++
++#include "ui_umltypequalifierswidget.h"
++#include <QtWidgets>
++#include <QMap>
++
++class UMLClassifierListItem;
++
++class UmlTypeQualifiersWidget : public QWidget
++{
++    Q_OBJECT
++
++public:
++    explicit UmlTypeQualifiersWidget(QWidget *parent = 0);
++
++    void apply();
++    void setUMLClassifierItem(UMLClassifierListItem *o);
++
++private:
++
++    Ui::UMLTypeQualifiersWidget *ui;
++    UMLClassifierListItem *m_qualifier;
++
++};
++
++#endif // UMLTYPEQUALIFIERSWIDGET_H
+diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.ui b/umbrello/dialogs/widgets/umltypequalifierswidget.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..cb41c5b55b774dad7b5d7af435a015d676855f3f
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypequalifierswidget.ui
+@@ -0,0 +1,58 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLTypeQualifiersWidget</class>
++ <widget class="QWidget" name="UMLTypeQualifiersWidget">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>316</width>
++    <height>97</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout">
++   <item>
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>Type Qualifiers</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout">
++      <item row="0" column="0">
++       <widget class="QRadioButton" name="rb_none">
++        <property name="text">
++         <string>None</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="0">
++       <widget class="QRadioButton" name="rb_mutable">
++        <property name="text">
++         <string>&amp;Mutable</string>
++        </property>
++       </widget>
++      </item>
++      <item row="0" column="1">
++       <widget class="QCheckBox" name="ck_const">
++        <property name="text">
++         <string>Const</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="1">
++       <widget class="QCheckBox" name="ck_volatile">
++        <property name="text">
++         <string>Volatile</string>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++  </layout>
++ </widget>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.cpp b/umbrello/dialogs/widgets/visibilityenumwidget.cpp
+index b453808edb2d6f0999126ab2327d6d9a90c5b2e7..aa89e35f290fef47cc9c6e1803392d2313a48879 100644
+--- a/umbrello/dialogs/widgets/visibilityenumwidget.cpp
++++ b/umbrello/dialogs/widgets/visibilityenumwidget.cpp
+@@ -20,20 +20,17 @@
+ #include <QGroupBox>
+ #include <QRadioButton>
+ 
+-VisibilityEnumWidget::VisibilityEnumWidget(UMLObject *o, QWidget *parent)
+-    : QWidget(parent),
+-      m_object(o),
+-      m_widget(0),
+-      m_role(Uml::RoleType::A)
++VisibilityEnumWidget::VisibilityEnumWidget(QWidget *parent)
++    : QWidget(parent)
++    , m_widget(0)
++    , ui(new Ui::visibilityEnumWidget)
++    , m_role(Uml::RoleType::A)
+ {
+-    Q_ASSERT(o);
+-
+     m_texts[Uml::Visibility::Public] = i18nc("public visibility", "P&ublic");
+     m_texts[Uml::Visibility::Protected] = i18nc("protected visibility", "Pro&tected");
+     m_texts[Uml::Visibility::Private] = i18nc("private visibility", "P&rivate");
+     m_texts[Uml::Visibility::Implementation] = i18n("Imple&mentation");
+-    init(i18n("Visibility"));
+-    m_buttons[m_object->visibility()]->setChecked(true);
++    ui->setupUi(this);
+ }
+ 
+ VisibilityEnumWidget::VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::Enum role, QWidget *parent)
+@@ -47,15 +44,13 @@ VisibilityEnumWidget::VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::
+         m_texts[Uml::Visibility::Protected] = i18nc("scope for A is protected", "Protected");
+         m_texts[Uml::Visibility::Private] = i18nc("scope for A is private", "Private");
+         m_texts[Uml::Visibility::Implementation] = i18nc("scope for A is implementation", "Implementation");
+-        init(i18n("Role A Visibility"));
+     } else {
+         m_texts[Uml::Visibility::Public] = i18nc("scope for B is public", "Public");
+         m_texts[Uml::Visibility::Protected] = i18nc("scope for B is protected", "Protected");
+         m_texts[Uml::Visibility::Private] = i18nc("scope for B is private", "Private");
+         m_texts[Uml::Visibility::Implementation] = i18nc("scope for B is implementation", "Implementation");
+-        init(i18n("Role B Visibility"));
+     }
+-    m_buttons[a->visibility(role)]->setChecked(true);
++    //m_buttons[a->visibility(role)]->setChecked(true);
+ }
+ 
+ VisibilityEnumWidget::~VisibilityEnumWidget()
+@@ -63,13 +58,33 @@ VisibilityEnumWidget::~VisibilityEnumWidget()
+     // nothing here, parenting makes sure that all objects are destroyed
+ }
+ 
++void VisibilityEnumWidget::setUMLObject(UMLObject *o)
++{
++    m_object = o;
++    switch (m_object->visibility()) {
++    case Uml::Visibility::Public:
++            ui->rb_public->setChecked(true);
++        break;
++    case Uml::Visibility::Protected:
++        ui->rb_protected->setChecked(true);
++        break;
++    case Uml::Visibility::Private:
++        ui->rb_protected->setChecked(true);
++        break;
++    case Uml::Visibility::Implementation:
++        ui->rb_implementation->setChecked(true);
++        break;
++    }
++}
++
+ /**
+  * Add this widget to a given layout.
+  * @param layout The layout to which the widget should be added
+  */
++//TODO: REMOVE THIS METHOD AFTER FIX CLASS GENERAL PAGE
+ void VisibilityEnumWidget::addToLayout(QVBoxLayout *layout)
+ {
+-    layout->addWidget(m_box);
++    //layout->addWidget(m_box);
+ }
+ 
+ /**
+@@ -77,34 +92,13 @@ void VisibilityEnumWidget::addToLayout(QVBoxLayout *layout)
+  */
+ void VisibilityEnumWidget::apply()
+ {
+-    for(ButtonMap::const_iterator i = m_buttons.constBegin(); i != m_buttons.constEnd(); ++i) {
+-        if (i.value()->isChecked()) {
+-            if (m_object)
+-                m_object->setVisibility(i.key());
+-            else
+-                m_widget->setVisibility(i.key(), m_role);
+-        }
+-    }
++    if(ui->rb_public->isChecked())
++        m_object->setVisibility(Uml::Visibility::Public);
++    else if(ui->rb_protected->isChecked())
++        m_object->setVisibility(Uml::Visibility::Protected);
++    else if(ui->rb_private->isChecked())
++        m_object->setVisibility(Uml::Visibility::Private);
++    else
++        m_object->setVisibility(Uml::Visibility::Implementation);
+ }
+ 
+-void VisibilityEnumWidget::init(const QString &title)
+-{
+-    QHBoxLayout *layout = new QHBoxLayout;
+-    layout->setContentsMargins(0,0,0,0);
+-
+-    m_box = new QGroupBox(title, this);
+-    QHBoxLayout* boxlayout = new QHBoxLayout(m_box);
+-    int margin = fontMetrics().height();
+-    boxlayout->setMargin(margin);
+-    QList<Uml::Visibility::Enum> orders;
+-    orders << Uml::Visibility::Public << Uml::Visibility::Protected << Uml::Visibility::Private << Uml::Visibility::Implementation;
+-
+-    for(QList<Uml::Visibility::Enum>::const_iterator i = orders.constBegin(); i != orders.constEnd(); ++i) {
+-        Uml::Visibility::Enum key = *i;
+-        QRadioButton *button = new QRadioButton(m_texts[key], m_box);
+-        m_buttons[key] = button;
+-        boxlayout->addWidget(button);
+-    }
+-    layout->addWidget(m_box);
+-    setLayout(layout);
+-}
+diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.h b/umbrello/dialogs/widgets/visibilityenumwidget.h
+index 477b81eea96496a498789f5a64629941253671a9..6be9c94957908eb275e4a73708e6630f0f2aab76 100644
+--- a/umbrello/dialogs/widgets/visibilityenumwidget.h
++++ b/umbrello/dialogs/widgets/visibilityenumwidget.h
+@@ -12,7 +12,7 @@
+ #define VISIBILITYENUMWIDGET_H
+ 
+ #include "basictypes.h"
+-
++#include "ui_visibilityenumwidget.h"
+ #include <QMap>
+ #include <QWidget>
+ 
+@@ -28,24 +28,23 @@ class VisibilityEnumWidget : public QWidget
+     Q_OBJECT
+ public:
+     typedef QMap<Uml::Visibility::Enum,QString> TextMap;
+-    typedef QMap<Uml::Visibility::Enum,QRadioButton*> ButtonMap;
+ 
+-    explicit VisibilityEnumWidget(UMLObject *o, QWidget *parent=0);
++    explicit VisibilityEnumWidget(QWidget *parent=0);
+     VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::Enum role, QWidget *parent=0);
+     ~VisibilityEnumWidget();
+ 
++    void setUMLObject(UMLObject *o);
+     void addToLayout(QVBoxLayout *layout);
+     void apply();
+ 
++private:
++    Ui::visibilityEnumWidget *ui;
++
+ protected:
+     TextMap m_texts;
+-    QGroupBox *m_box;
+-    ButtonMap m_buttons;
+     UMLObject *m_object;
+     AssociationWidget *m_widget;
+     Uml::RoleType::Enum m_role;
+-
+-    void init(const QString &title);
+ };
+ 
+ #endif // VISIBILITYENUMWIDGET_H
+diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.ui b/umbrello/dialogs/widgets/visibilityenumwidget.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..5a42fb6f0fa148fef6f7afa02bdbd126f0d78d8a
+--- /dev/null
++++ b/umbrello/dialogs/widgets/visibilityenumwidget.ui
+@@ -0,0 +1,58 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>visibilityEnumWidget</class>
++ <widget class="QWidget" name="visibilityEnumWidget">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>252</width>
++    <height>97</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout">
++   <item>
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>Visibility</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout">
++      <item row="0" column="0">
++       <widget class="QRadioButton" name="rb_public">
++        <property name="text">
++         <string>Pub&amp;lic</string>
++        </property>
++       </widget>
++      </item>
++      <item row="0" column="1">
++       <widget class="QRadioButton" name="rb_private">
++        <property name="text">
++         <string>Pri&amp;vate</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="0">
++       <widget class="QRadioButton" name="rb_protected">
++        <property name="text">
++         <string>Protected</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="1">
++       <widget class="QRadioButton" name="rb_implementation">
++        <property name="text">
++         <string>I&amp;mplementation</string>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++  </layout>
++ </widget>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/umlmodel/classifierlistitem.cpp b/umbrello/umlmodel/classifierlistitem.cpp
+index 5c997e309041c27e156c3df8a36fa6990669d01e..24a42f233748c3b0d99f8aa92340fc431aa7df9d 100644
+--- a/umbrello/umlmodel/classifierlistitem.cpp
++++ b/umbrello/umlmodel/classifierlistitem.cpp
+@@ -80,6 +80,33 @@ void UMLClassifierListItem::copyInto(UMLObject *lhs) const
+     UMLObject::copyInto(lhs);
+ }
+ 
++void UMLClassifierListItem::setQualifier(Uml::TypeQualifiers::Enum qualifier)
++{
++    if(m_typeQualifier != qualifier){
++        m_typeQualifier = qualifier;
++        UMLObject::emitModified();
++    }
++
++}
++
++Uml::TypeQualifiers::Enum UMLClassifierListItem::qualifier() const
++{
++    return m_typeQualifier;
++}
++
++void UMLClassifierListItem::setModifier(Uml::TypeModifiers::Enum modifier)
++{
++    if(m_typeModifier != modifier){
++        m_typeModifier = modifier;
++        UMLObject::emitModified();
++    }
++}
++
++Uml::TypeModifiers::Enum UMLClassifierListItem::modifier() const
++{
++    return m_typeModifier;
++}
++
+ /**
+  * Returns a string representation of the list item.
+  *
+diff --git a/umbrello/umlmodel/classifierlistitem.h b/umbrello/umlmodel/classifierlistitem.h
+index 518aa7fe3ec078b2b85b95ed0802daa5a6d351e0..3fa356dae375a4202080e60acaab42fa234637f3 100644
+--- a/umbrello/umlmodel/classifierlistitem.h
++++ b/umbrello/umlmodel/classifierlistitem.h
+@@ -53,6 +53,15 @@ public:
+      */
+     virtual UMLObject* clone() const = 0;
+ 
++    //TypeQualifiers Methods
++    virtual void setQualifier(Uml::TypeQualifiers::Enum qualifier);
++    //virtual void setQualifierCmd(Uml::TypeQualifiers::Enum qualifier);
++    virtual Uml::TypeQualifiers::Enum qualifier() const;
++
++    //TypeModifiers Methods
++    virtual void setModifier(Uml::TypeModifiers::Enum modifier);
++    virtual Uml::TypeModifiers::Enum modifier() const;
++
+ };
+ 
+ #endif
+diff --git a/umbrello/umlmodel/umlobject.h b/umbrello/umlmodel/umlobject.h
+index 66282b035faa5e3d8ba4655d85a2737e4b9f4dc9..1a33052be5c89fab43634baf1f6fffd862c40781 100644
+--- a/umbrello/umlmodel/umlobject.h
++++ b/umbrello/umlmodel/umlobject.h
+@@ -176,6 +176,8 @@ protected:
+     QString                m_name;         ///< objects name
+     ObjectType             m_BaseType;     ///< objects type
+     Uml::Visibility::Enum  m_visibility;   ///< objects visibility
++    Uml::TypeQualifiers::Enum m_typeQualifier; ///< object qualifier
++    Uml::TypeModifiers::Enum m_typeModifier; ///< object modifier
+     bool                   m_bAbstract;    ///< state of whether the object is abstract or not
+     bool                   m_bStatic;      ///< flag for instance scope
+     bool                   m_bInPaste;     ///< caller sets this true when in paste operation
+
diff --git a/patchsToApply/newWidgets160616 b/patchsToApply/newWidgets160616
new file mode 100644
index 0000000000000000000000000000000000000000..f2e486e77acc007f2b175bb0c1ccdfa0549d0c8a
--- /dev/null
+++ b/patchsToApply/newWidgets160616
@@ -0,0 +1,2779 @@
+diff --git a/umbrello/CMakeLists.txt b/umbrello/CMakeLists.txt
+index 10cd5a39f7c212666922ad0ca29dc6f578ab3ed4..09b80bf08300bea92222a8b78fed28833660c887 100644
+--- a/umbrello/CMakeLists.txt
++++ b/umbrello/CMakeLists.txt
+@@ -240,6 +240,8 @@ set(libdialogs_SRCS
+     dialogs/widgets/umlpackagewidget.cpp
+     dialogs/widgets/umlstereotypewidget.cpp
+     dialogs/widgets/visibilityenumwidget.cpp
++    dialogs/widgets/umltypequalifierswidget.cpp
++    dialogs/widgets/umltypemodifierwidget.cpp
+ )
+ 
+ ki18n_wrap_ui(  libdialogs_SRCS
+@@ -251,6 +253,12 @@ ki18n_wrap_ui(  libdialogs_SRCS
+     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/codeimportoptionspage.ui
+     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/diagrampropertiespage.ui
+     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/umlrolepropertiesbase.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umlattributedialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umlentityattributedialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umltemplatedialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umloperationdialog.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/widgets/umltypequalifierswidget.ui
++    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/widgets/visibilityenumwidget.ui
+ )
+ 
+ set(librefactoring_SRCS
+diff --git a/umbrello/basictypes.cpp b/umbrello/basictypes.cpp
+index 85d819201593897d2068dde4aeafb434e3927008..3d8b58dba299ffaa2c734c967469153c4cf79e71 100644
+--- a/umbrello/basictypes.cpp
++++ b/umbrello/basictypes.cpp
+@@ -153,6 +153,114 @@ Enum fromInt(int item)
+ }
+ 
+ }  // end namespace Visibility
++//-----------------------------------------------------------------------------
++namespace TypeQualifiers{
++
++/**
++     * Convert Type Qualifiers item into QString representation.
++     * @param item       item to convert
++     * @return QString representation of TypeQualifier
++     */
++QString toString(Enum item)
++{
++    switch (item) {
++    case Const:
++        return QLatin1String("const ");
++    case Volatile:
++        return QLatin1String("volatile ");
++    case Mutable:
++        return QLatin1String("mutable ");
++    case ConstVolatile:
++        return QLatin1String("const volatile ");
++    case None:
++    default:
++        return QLatin1String("");
++    }
++}
++
++/**
++     * Convert a string item into TypeQualifier representation.
++     * @param item   item to convert
++     * @return TypeQualifier enum
++     */
++Enum fromString(const QString& item)
++{
++    if(item == QLatin1String(""))
++        return None;
++    else if(item == QLatin1String("const"))
++        return Const;
++    else if(item == QLatin1String("volatile"))
++        return Volatile;
++    else if(item == QLatin1String("mutable"))
++        return Mutable;
++    else if(item == QLatin1String("const volatile"))
++        return ConstVolatile;
++    else
++        return None;
++}
++
++/**
++     * Convert a integer item into TypeQualifier representation.
++     * @param item   integer value to convert
++     * @return TypeQualifier enum
++     */
++Enum fromInt(int item)
++{
++    return Enum(item);
++}
++
++}  // end namespace TypeQualifier
++
++//-----------------------------------------------------------------------------
++namespace TypeModifiers{
++
++/**
++     * Convert Type Modifiers item into QString representation.
++     * @param item       item to convert
++     * @return QString representation of TypeQualifier
++     */
++QString toString(Enum item)
++{
++    switch (item) {
++    case Pointer:
++        return QLatin1String("*");
++    case Reference:
++        return QLatin1String("&");
++    case None:
++    default:
++        return QLatin1String("");
++
++    }
++}
++
++/**
++     * Convert a string item into TypeModifier representation.
++     * @param item   item to convert
++     * @return TypeModifier enum
++     */
++Enum fromString(const QString& item)
++{
++    if(item == QLatin1String(""))
++        return None;
++    if(item == QLatin1String("*"))
++        return Pointer;
++    if(item == QLatin1String("&"))
++        return Reference;
++    else
++        return None;
++}
++
++/**
++     * Convert a integer item into TypeModifier representation.
++     * @param item   integer value to convert
++     * @return TypeModifier enum
++     */
++Enum fromInt(int item)
++{
++    return Enum(item);
++}
++
++}  // end namespace TypeModifiers
+ 
+ //-----------------------------------------------------------------------------
+ 
+diff --git a/umbrello/basictypes.h b/umbrello/basictypes.h
+index 62492988792752f6987e4410c6ae01dd9a5eb659..a387e67069cf2ab8954c087d7bf78c67d74b5fe4 100644
+--- a/umbrello/basictypes.h
++++ b/umbrello/basictypes.h
+@@ -68,6 +68,33 @@ namespace Uml
+         Enum fromInt(int item);
+     }
+ 
++    namespace TypeQualifiers {
++
++        enum Enum{
++            None,
++            Const,
++            Volatile,
++            Mutable,
++            ConstVolatile
++        };
++
++        QString toString(Enum item);
++        Enum fromString(const QString& item);
++        Enum fromInt(int item);
++    }
++
++    namespace TypeModifiers{
++        enum Enum{
++            None,
++            Pointer,
++            Reference
++        };
++
++        QString toString(Enum item);
++        Enum fromString(const QString& item);
++        Enum fromInte(int item);
++    }
++
+     /**
+      * Supported diagram types.
+      */
+diff --git a/umbrello/dialogs/pages/classgeneralpage.cpp b/umbrello/dialogs/pages/classgeneralpage.cpp
+index 776897723fc1b8cac6c3383c959b2358b2195118..4f4d98218eaf82bcc6c720566d9f467e2c5078a3 100644
+--- a/umbrello/dialogs/pages/classgeneralpage.cpp
++++ b/umbrello/dialogs/pages/classgeneralpage.cpp
+@@ -93,7 +93,8 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLObject* o)
+     m_nameWidget->addToLayout(m_pNameLayout, 0);
+ 
+     if (t != UMLObject::ot_Stereotype) {
+-        m_stereotypeWidget = new UMLStereotypeWidget(m_pObject);
++        m_stereotypeWidget = new UMLStereotypeWidget();
++        m_stereotypeWidget->setUMLObject(m_pObject);
+         if (t == UMLObject::ot_Interface || t == UMLObject::ot_Datatype || t == UMLObject::ot_Enum) {
+             m_stereotypeWidget->setEditable(false);
+         }
+@@ -143,11 +144,13 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLObject* o)
+ 
+     // setup scope
+     if (t != UMLObject::ot_Stereotype) {
+-        m_visibilityEnumWidget = new VisibilityEnumWidget(m_pObject, this);
++        m_visibilityEnumWidget = new VisibilityEnumWidget();
++        m_visibilityEnumWidget->setUMLObject(m_pObject);
+         m_visibilityEnumWidget->addToLayout(topLayout);
+     }
+ 
+-    m_docWidget = new DocumentationWidget(m_pObject, this);
++    m_docWidget = new DocumentationWidget();
++    m_docWidget->setUMLObject(m_pObject);
+     topLayout->addWidget(m_docWidget);
+ }
+ 
+@@ -252,7 +255,8 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLWidget* widget
+     m_nameWidget->addToLayout(m_pNameLayout, 0);
+ 
+     if (widget->umlObject()) {
+-        m_stereotypeWidget = new UMLStereotypeWidget(widget->umlObject());
++        m_stereotypeWidget = new UMLStereotypeWidget();
++        m_stereotypeWidget->setUMLObject(widget->umlObject());
+         m_stereotypeWidget->addToLayout(m_pNameLayout, 1);
+     }
+ 
+diff --git a/umbrello/dialogs/parameterpropertiesdialog.cpp b/umbrello/dialogs/parameterpropertiesdialog.cpp
+index a6468b4339680f626498d3b606d355a8ddc7707e..61730d7151a308d5542f08b5788702fa002fdf10 100644
+--- a/umbrello/dialogs/parameterpropertiesdialog.cpp
++++ b/umbrello/dialogs/parameterpropertiesdialog.cpp
+@@ -71,7 +71,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
+     propLayout->setSpacing(10);
+     propLayout->setMargin(margin);
+ 
+-    m_datatypeWidget = new UMLDatatypeWidget(m_pAtt);
++    m_datatypeWidget = new UMLDatatypeWidget();
++    m_datatypeWidget->setAttribute(m_pAtt);
+     m_datatypeWidget->addToLayout(propLayout, 0);
+ 
+     Dialog_Utils::makeLabeledEditField(propLayout, 1,
+@@ -82,7 +83,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
+                                     m_pInitialL, i18n("&Initial value:"),
+                                     m_pInitialLE, attr->getInitialValue());
+ 
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pAtt);
++    m_stereotypeWidget = new UMLStereotypeWidget();
++    m_stereotypeWidget->setUMLObject(m_pAtt);
+     m_stereotypeWidget->addToLayout(propLayout, 3);
+ 
+     m_pKindGB =  new QGroupBox(i18n("Passing Direction"));
+@@ -102,7 +104,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
+ 
+     topLayout->addWidget(m_pKindGB);
+ 
+-    m_docWidget = new DocumentationWidget(m_pAtt);
++    m_docWidget = new DocumentationWidget();
++    m_docWidget->setUMLObject(m_pAtt);
+     topLayout->addWidget(m_docWidget);
+ 
+     // Check the proper Kind radiobutton.
+diff --git a/umbrello/dialogs/umlattributedialog.cpp b/umbrello/dialogs/umlattributedialog.cpp
+index a6da94a91ca5f3c3b3006d943b52f2e15cf34925..31fc2a7b6c7aa160e81b3533b6efa7bb8042f398 100644
+--- a/umbrello/dialogs/umlattributedialog.cpp
++++ b/umbrello/dialogs/umlattributedialog.cpp
+@@ -14,21 +14,14 @@
+ // app includes
+ #include "attribute.h"
+ #include "classifier.h"
+-#include "documentationwidget.h"
+ #include "template.h"
+ #include "umldoc.h"
+ #include "uml.h"
+-#include "umldatatypewidget.h"
+-#include "umlstereotypewidget.h"
+-#include "visibilityenumwidget.h"
+ #include "dialog_utils.h"
+ #include "object_factory.h"
+ #include "import_utils.h"
+ 
+ // kde includes
+-#include <klineedit.h>
+-#include <kcombobox.h>
+-#include <kcompletion.h>
+ #include <KLocalizedString>
+ #include <KMessageBox>
+ 
+@@ -42,11 +35,14 @@
+ #include <QRadioButton>
+ #include <QVBoxLayout>
+ 
+-UMLAttributeDialog::UMLAttributeDialog(QWidget * pParent, UMLAttribute * pAttribute)
+-  : SinglePageDialogBase(pParent)
++UMLAttributeDialog::UMLAttributeDialog(QWidget *pParent, UMLAttribute *pAttribute)
++    :SinglePageDialogBase(pParent),
++      ui(new Ui::UMLAttributeDialog),
++      m_pAttribute(pAttribute)
+ {
+     setCaption(i18n("Attribute Properties"));
+-    m_pAttribute = pAttribute;
++    activeLanguage = UMLApp::app()->activeLanguage();
++    ui->setupUi(mainWidget());
+     setupDialog();
+ }
+ 
+@@ -59,45 +55,20 @@ UMLAttributeDialog::~UMLAttributeDialog()
+  */
+ void UMLAttributeDialog::setupDialog()
+ {
+-    int margin = fontMetrics().height();
+ 
+-    QFrame * frame = new QFrame(this);
+-    setMainWidget(frame);
+-    QVBoxLayout * mainLayout = new QVBoxLayout(frame);
+-
+-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout * valuesLayout = new QGridLayout(m_pValuesGB);
+-    valuesLayout->setMargin(margin);
+-    valuesLayout->setSpacing(10);
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
+-    m_datatypeWidget->addToLayout(valuesLayout, 0);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
+-                                    m_pNameL, i18nc("attribute name", "&Name:"),
+-                                    m_pNameLE, m_pAttribute->name());
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 2,
+-                                    m_pInitialL, i18n("&Initial value:"),
+-                                    m_pInitialLE, m_pAttribute->getInitialValue());
+-
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pAttribute);
+-    m_stereotypeWidget->addToLayout(valuesLayout, 3);
+-
+-    m_pStaticCB = new QCheckBox(i18n("Classifier &scope (\"static\")"), m_pValuesGB);
+-    m_pStaticCB->setChecked(m_pAttribute->isStatic());
+-    valuesLayout->addWidget(m_pStaticCB, 4, 0);
+-
+-    mainLayout->addWidget(m_pValuesGB);
+-    m_visibilityEnumWidget = new VisibilityEnumWidget(m_pAttribute, this);
+-    m_visibilityEnumWidget->addToLayout(mainLayout);
+-
+-    m_docWidget = new DocumentationWidget(m_pAttribute, this);
+-    mainLayout->addWidget(m_docWidget);
+-
+-    m_pNameLE->setFocus();
+-    connect(m_pNameLE, &KLineEdit::textChanged, this, &UMLAttributeDialog::slotNameChanged);
+-    slotNameChanged(m_pNameLE->text());
++    ui->dataTypeWidget->setClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
++    if(activeLanguage == Uml::ProgrammingLanguage::Cpp){
++        ui->typeQualifiersWidget->setUMLClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
++        ui->typeModifierWidget->setUMLClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
++        ui->cb_classifierScopeStatic->setVisible(true);
++    }else{
++        ui->cb_classifierScopeStatic->setVisible(false);
++        ui->typeModifierWidget->setVisible(false);
++        ui->typeQualifiersWidget->setVisible(false);
++    }
++    ui->stereotypeWidget->setUMLObject(m_pAttribute);
++    ui->visibilityWidget->setUMLObject(m_pAttribute);
++    ui->documentationWidget->setUMLObject(m_pAttribute);
+ }
+ 
+ void UMLAttributeDialog::slotNameChanged(const QString &_text)
+@@ -111,11 +82,11 @@ void UMLAttributeDialog::slotNameChanged(const QString &_text)
+  */
+ bool UMLAttributeDialog::apply()
+ {
+-    QString name = m_pNameLE->text();
++    QString name = ui->nameLE->text();
+     if (name.isEmpty()) {
+         KMessageBox::error(this, i18n("You have entered an invalid attribute name."),
+                            i18n("Attribute Name Invalid"), 0);
+-        m_pNameLE->setText(m_pAttribute->name());
++        ui->nameLE->setText(m_pAttribute->name());
+         return false;
+     }
+     UMLClassifier * pConcept = dynamic_cast<UMLClassifier *>(m_pAttribute->parent());
+@@ -123,21 +94,24 @@ bool UMLAttributeDialog::apply()
+     if (o && o != m_pAttribute) {
+         KMessageBox::error(this, i18n("The attribute name you have chosen is already being used in this operation."),
+                            i18n("Attribute Name Not Unique"), 0);
+-        m_pNameLE->setText(m_pAttribute->name());
++        ui->nameLE->setText(m_pAttribute->name());
+         return false;
+     }
+     m_pAttribute->setName(name);
+-    m_visibilityEnumWidget->apply();
++    ui->visibilityWidget->apply();
+ 
+     // Set the scope as the default in the option state
+     Settings::optionState().classState.defaultAttributeScope = m_pAttribute->visibility();
+ 
+-    m_pAttribute->setInitialValue(m_pInitialLE->text());
+-    m_stereotypeWidget->apply();
+-    m_pAttribute->setStatic(m_pStaticCB->isChecked());
+-
+-    m_datatypeWidget->apply();
+-    m_docWidget->apply();
++    m_pAttribute->setInitialValue(ui->initialValueLE->text());
++    ui->stereotypeWidget->apply();
++    ui->documentationWidget->apply();
++    if(activeLanguage == Uml::ProgrammingLanguage::Cpp){
++        ui->typeQualifiersWidget->apply();
++        ui->typeModifierWidget->apply();
++        m_pAttribute->setStatic(ui->cb_classifierScopeStatic->isChecked());
++    }
++    ui->dataTypeWidget->apply();
+ 
+     return true;
+ }
+diff --git a/umbrello/dialogs/umlattributedialog.h b/umbrello/dialogs/umlattributedialog.h
+index 7e0166036cfed65941bfa5f6081916cfe35263de..c02ee41ec29daf84beb54d8327729700172ff694 100644
+--- a/umbrello/dialogs/umlattributedialog.h
++++ b/umbrello/dialogs/umlattributedialog.h
+@@ -12,17 +12,8 @@
+ #define UMLATTRIBUTEDIALOG_H
+ 
+ #include "singlepagedialogbase.h"
+-
+-class DocumentationWidget;
+-class QCheckBox;
+-class QGroupBox;
+-class QRadioButton;
+-class QLabel;
+-class UMLAttribute;
+-class KLineEdit;
+-class UMLDatatypeWidget;
+-class UMLStereotypeWidget;
+-class VisibilityEnumWidget;
++#include "basictypes.h"
++#include "ui_umlattributedialog.h"
+ 
+ /**
+  * @author Paul Hensgen
+@@ -35,6 +26,10 @@ public:
+     UMLAttributeDialog(QWidget * pParent, UMLAttribute * pAttribute);
+     ~UMLAttributeDialog();
+ 
++private:
++    Ui::UMLAttributeDialog *ui;
++    Uml::ProgrammingLanguage::Enum activeLanguage;
++
+ protected:
+     void setupDialog();
+     bool apply();
+@@ -44,18 +39,9 @@ protected:
+      */
+     UMLAttribute * m_pAttribute;
+ 
+-    //GUI Widgets
+-    QGroupBox * m_pValuesGB;
+-    QLabel * m_pNameL, * m_pInitialL;
+-    KLineEdit * m_pNameLE, * m_pInitialLE;
+-    QCheckBox* m_pStaticCB;
+-    UMLDatatypeWidget *m_datatypeWidget;
+-    UMLStereotypeWidget *m_stereotypeWidget;
+-    VisibilityEnumWidget *m_visibilityEnumWidget;
+-    DocumentationWidget *m_docWidget;
+-
+ public slots:
+     void slotNameChanged(const QString &);
++
+ };
+ 
+ #endif
+diff --git a/umbrello/dialogs/umlattributedialog.ui b/umbrello/dialogs/umlattributedialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..ac5561add8ad581bae4b0035677cb88338a52dd8
+--- /dev/null
++++ b/umbrello/dialogs/umlattributedialog.ui
+@@ -0,0 +1,145 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLAttributeDialog</class>
++ <widget class="QWidget" name="UMLAttributeDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>464</width>
++    <height>300</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout_3">
++   <item>
++    <widget class="QLabel" name="label">
++     <property name="text">
++      <string>General Properties</string>
++     </property>
++     <property name="alignment">
++      <set>Qt::AlignCenter</set>
++     </property>
++    </widget>
++   </item>
++   <item>
++    <layout class="QHBoxLayout" name="horizontalLayout_3">
++     <item>
++      <layout class="QVBoxLayout" name="verticalLayout">
++       <item>
++        <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
++       </item>
++       <item>
++        <layout class="QHBoxLayout" name="horizontalLayout_2">
++         <item>
++          <widget class="QLabel" name="label_3">
++           <property name="text">
++            <string>Name:</string>
++           </property>
++          </widget>
++         </item>
++         <item>
++          <widget class="QLineEdit" name="nameLE"/>
++         </item>
++        </layout>
++       </item>
++      </layout>
++     </item>
++     <item>
++      <layout class="QVBoxLayout" name="verticalLayout_2">
++       <item>
++        <widget class="UMLTypeModifierWidget" name="typeModifierWidget" native="true"/>
++       </item>
++       <item>
++        <layout class="QHBoxLayout" name="horizontalLayout">
++         <item>
++          <widget class="QLabel" name="label_4">
++           <property name="text">
++            <string>Initial Value:</string>
++           </property>
++          </widget>
++         </item>
++         <item>
++          <widget class="QLineEdit" name="initialValueLE"/>
++         </item>
++        </layout>
++       </item>
++      </layout>
++     </item>
++    </layout>
++   </item>
++   <item>
++    <layout class="QHBoxLayout" name="horizontalLayout_5">
++     <item>
++      <widget class="VisibilityEnumWidget" name="visibilityWidget" native="true"/>
++     </item>
++     <item>
++      <widget class="UmlTypeQualifiersWidget" name="typeQualifiersWidget" native="true"/>
++     </item>
++    </layout>
++   </item>
++   <item>
++    <widget class="QCheckBox" name="cb_classifierScopeStatic">
++     <property name="text">
++      <string>Classifier Scope(&quot;static&quot;)</string>
++     </property>
++    </widget>
++   </item>
++   <item>
++    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true">
++     <property name="sizePolicy">
++      <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++       <horstretch>0</horstretch>
++       <verstretch>0</verstretch>
++      </sizepolicy>
++     </property>
++    </widget>
++   </item>
++   <item>
++    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>VisibilityEnumWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/visibilityenumwidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>DocumentationWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/documentationwidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UmlTypeQualifiersWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umltypequalifierswidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLTypeModifierWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umltypemodifierwidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/umlentityattributedialog.cpp b/umbrello/dialogs/umlentityattributedialog.cpp
+index ae2df442d4948a283f31828871e18a2e51f2a027..3785ec62ec175afee85c5a1b1c1c410712e51949 100644
+--- a/umbrello/dialogs/umlentityattributedialog.cpp
++++ b/umbrello/dialogs/umlentityattributedialog.cpp
+@@ -43,9 +43,11 @@
+ 
+ UMLEntityAttributeDialog::UMLEntityAttributeDialog(QWidget * pParent, UMLEntityAttribute * pEntityAttribute)
+   : SinglePageDialogBase(pParent)
++  , ui(new Ui::UMLEntityAttributeDialog)
++  , m_pEntityAttribute(pEntityAttribute)
+ {
+     setCaption(i18n("Entity Attribute Properties"));
+-    m_pEntityAttribute = pEntityAttribute;
++    ui->setupUi(mainWidget());
+     setupDialog();
+ }
+ 
+@@ -58,69 +60,19 @@ UMLEntityAttributeDialog::~UMLEntityAttributeDialog()
+  */
+ void UMLEntityAttributeDialog::setupDialog()
+ {
+-    int margin = fontMetrics().height();
+-    QFrame *frame = new QFrame(this);
+-    setMainWidget(frame);
+-    QVBoxLayout * mainLayout = new QVBoxLayout(frame);
+-
+-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout * valuesLayout = new QGridLayout(m_pValuesGB);
+-    valuesLayout->setMargin(margin);
+-    valuesLayout->setSpacing(10);
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(m_pEntityAttribute);
+-    m_datatypeWidget->addToLayout(valuesLayout, 0);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
+-                                    m_pNameL, i18nc("name of entity attribute", "&Name:"),
+-                                    m_pNameLE, m_pEntityAttribute->name());
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 2,
+-                                    m_pInitialL, i18n("&Default value:"),
+-                                    m_pInitialLE, m_pEntityAttribute->getInitialValue());
+-
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pEntityAttribute);
+-    m_stereotypeWidget->addToLayout(valuesLayout, 3);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 4,
+-                                    m_pValuesL, i18n("Length/Values:"),
+-                                    m_pValuesLE, m_pEntityAttribute->getValues());
+-
+-    m_pAutoIncrementCB = new QCheckBox(i18n("&Auto increment"), m_pValuesGB);
+-    m_pAutoIncrementCB->setChecked(m_pEntityAttribute->getAutoIncrement());
+-    valuesLayout->addWidget(m_pAutoIncrementCB, 5, 0);
+-
+-    m_pNullCB = new QCheckBox(i18n("Allow &null"), m_pValuesGB);
+-    m_pNullCB->setChecked(m_pEntityAttribute->getNull());
+-    valuesLayout->addWidget(m_pNullCB, 6, 0);
++    ui->dataTypeWidget->setEntityAttribute(m_pEntityAttribute);
++    ui->stereotypeWidget->setUMLObject(m_pEntityAttribute);
++    ui->ck_autoIncrement->setChecked(m_pEntityAttribute->getAutoIncrement());
++    ui->ck_allowNull->setChecked(m_pEntityAttribute->getNull());
+ 
+     // enable/disable isNull depending on the state of Auto Increment Check Box
+-    slotAutoIncrementStateChanged(m_pAutoIncrementCB->isChecked());
+-
+-    m_pAttributesL = new QLabel(i18n("Attributes:"), m_pValuesGB);
+-    valuesLayout->addWidget(m_pAttributesL, 7, 0);
+-
+-    m_pAttributesCB = new KComboBox(true, m_pValuesGB);
+-#if QT_VERSION < 0x050000
+-    m_pAttributesCB->setCompletionMode(KGlobalSettings::CompletionPopup);
+-#endif
+-    valuesLayout->addWidget(m_pAttributesCB, 7, 1);
+-    m_pAttributesL->setBuddy(m_pAttributesCB);
++    slotAutoIncrementStateChanged(ui->ck_autoIncrement->isChecked());
+ 
+     insertAttribute(m_pEntityAttribute->getAttributes());
+-    insertAttribute(QString::fromLatin1("binary"), m_pAttributesCB->count());
+-    insertAttribute(QString::fromLatin1("unsigned"), m_pAttributesCB->count());
+-    insertAttribute(QString::fromLatin1("unsigned zerofill"), m_pAttributesCB->count());
+-
+-    mainLayout->addWidget(m_pValuesGB);
+-
+-    m_pScopeGB = new QGroupBox(i18n("Indexing"), frame);
+-    QHBoxLayout* scopeLayout = new QHBoxLayout(m_pScopeGB);
+-    scopeLayout->setMargin(margin);
+-
+-    m_pNoneRB = new QRadioButton(i18n("&Not Indexed"), m_pScopeGB);
+-    scopeLayout->addWidget(m_pNoneRB);
+-
++    insertAttribute(QString::fromLatin1("binary"), ui->cb_attributesTypes->count());
++    insertAttribute(QString::fromLatin1("unsigned"), ui->cb_attributesTypes->count());
++    insertAttribute(QString::fromLatin1("unsigned zerofill"), ui->cb_attributesTypes->count());
++#if 0
+     /*
+     m_pPublicRB = new QRadioButton(i18n("&Primary"), m_pScopeGB);
+     scopeLayout->addWidget(m_pPublicRB);
+@@ -129,10 +81,6 @@ void UMLEntityAttributeDialog::setupDialog()
+     scopeLayout->addWidget(m_pProtectedRB);
+     */
+ 
+-    m_pPrivateRB = new QRadioButton(i18n("&Indexed"), m_pScopeGB);
+-    scopeLayout->addWidget(m_pPrivateRB);
+-
+-    mainLayout->addWidget(m_pScopeGB);
+     UMLEntityAttribute::DBIndex_Type scope = m_pEntityAttribute->indexType();
+ 
+     /*
+@@ -152,6 +100,11 @@ void UMLEntityAttributeDialog::setupDialog()
+     connect(m_pNameLE, &KLineEdit::textChanged, this, &UMLEntityAttributeDialog::slotNameChanged);
+     connect(m_pAutoIncrementCB, &QCheckBox::clicked, this, &UMLEntityAttributeDialog::slotAutoIncrementStateChanged);
+     slotNameChanged(m_pNameLE->text());
++#endif
++    ui->tb_name->setFocus();
++    connect(ui->tb_name, SIGNAL(textChanged(QString)), this, SLOT(slotNameChanged(QString)));
++    connect(ui->ck_autoIncrement, SIGNAL(clicked()), this, SLOT(slotAutoIncrementStateChanged));
++    slotNameChanged(ui->tb_name->text());
+ }
+ 
+ void UMLEntityAttributeDialog::slotNameChanged(const QString &_text)
+@@ -165,11 +118,11 @@ void UMLEntityAttributeDialog::slotNameChanged(const QString &_text)
+  */
+ bool UMLEntityAttributeDialog::apply()
+ {
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if (name.isEmpty()) {
+         KMessageBox::error(this, i18n("You have entered an invalid entity attribute name."),
+                            i18n("Entity Attribute Name Invalid"), 0);
+-        m_pNameLE->setText(m_pEntityAttribute->name());
++        ui->tb_name->setText(m_pEntityAttribute->name());
+         return false;
+     }
+     UMLClassifier * pConcept = dynamic_cast<UMLClassifier *>(m_pEntityAttribute->parent());
+@@ -177,17 +130,17 @@ bool UMLEntityAttributeDialog::apply()
+     if (o && o != m_pEntityAttribute) {
+         KMessageBox::error(this, i18n("The entity attribute name you have chosen is already being used in this operation."),
+                            i18n("Entity Attribute Name Not Unique"), 0);
+-        m_pNameLE->setText(m_pEntityAttribute->name());
++        ui->tb_name->setText(m_pEntityAttribute->name());
+         return false;
+     }
+     m_pEntityAttribute->setName(name);
+-    m_pEntityAttribute->setInitialValue(m_pInitialLE->text());
+-    m_stereotypeWidget->apply();
+-    m_pEntityAttribute->setValues(m_pValuesLE->text());
+-    m_pEntityAttribute->setAttributes(m_pAttributesCB->currentText());
+-    m_pEntityAttribute->setAutoIncrement(m_pAutoIncrementCB->isChecked());
+-    m_pEntityAttribute->setNull(m_pNullCB->isChecked());
+-
++    m_pEntityAttribute->setInitialValue(ui->tb_defaultValue->text());
++    ui->stereotypeWidget->apply();
++    m_pEntityAttribute->setValues(ui->tb_lenghtValues->text());
++    m_pEntityAttribute->setAttributes(ui->cb_attributesTypes->currentText());
++    m_pEntityAttribute->setAutoIncrement(ui->ck_autoIncrement->isChecked());
++    m_pEntityAttribute->setNull(ui->ck_allowNull->isChecked());
++#if 0
+     /*
+     if (m_pPublicRB->isChecked()) {
+         m_pEntityAttribute->setIndexType(UMLEntityAttribute::Primary);
+@@ -201,8 +154,8 @@ bool UMLEntityAttributeDialog::apply()
+     } else {
+         m_pEntityAttribute->setIndexType(UMLEntityAttribute::None);
+     }
+-
+-    m_datatypeWidget->apply();
++#endif
++    ui->dataTypeWidget->apply();
+     return true;
+ }
+ 
+@@ -211,8 +164,7 @@ bool UMLEntityAttributeDialog::apply()
+  */
+ void UMLEntityAttributeDialog::insertAttribute(const QString& type, int index)
+ {
+-    m_pAttributesCB->insertItem(index, type);
+-    m_pAttributesCB->completionObject()->addItem(type);
++    ui->cb_attributesTypes->insertItem(index, type);
+ }
+ 
+ /**
+@@ -221,10 +173,10 @@ void UMLEntityAttributeDialog::insertAttribute(const QString& type, int index)
+ void UMLEntityAttributeDialog::slotAutoIncrementStateChanged(bool checked)
+ {
+     if (checked == true) {
+-        m_pNullCB->setChecked(false);
+-        m_pNullCB->setEnabled(false);
++        ui->ck_allowNull->setChecked(false);
++        ui->ck_allowNull->setEnabled(false);
+     } else if (checked == false) {
+-        m_pNullCB->setEnabled(true);
++        ui->ck_allowNull->setEnabled(true);
+     }
+ 
+ }
+diff --git a/umbrello/dialogs/umlentityattributedialog.h b/umbrello/dialogs/umlentityattributedialog.h
+index 3233dea2f5a08a1b8fdaf5a0adc63418a0df96f5..865909cf0fc932ca71171479c8351738d8330f06 100644
+--- a/umbrello/dialogs/umlentityattributedialog.h
++++ b/umbrello/dialogs/umlentityattributedialog.h
+@@ -12,6 +12,7 @@
+ #define UMLENTITYATTRIBUTEDIALOG_H
+ 
+ #include "singlepagedialogbase.h"
++#include "ui_umlentityattributedialog.h"
+ 
+ class QCheckBox;
+ class QGroupBox;
+@@ -34,6 +35,9 @@ public:
+     UMLEntityAttributeDialog(QWidget* pParent, UMLEntityAttribute* pEntityAttribute);
+     ~UMLEntityAttributeDialog();
+ 
++private:
++    Ui::UMLEntityAttributeDialog *ui;
++
+ protected:
+ 
+     void setupDialog();
+@@ -47,18 +51,6 @@ protected:
+      */
+     UMLEntityAttribute * m_pEntityAttribute;
+ 
+-    //GUI Widgets
+-    QGroupBox * m_pAttsGB, * m_pValuesGB;
+-    QGroupBox * m_pScopeGB;
+-    QRadioButton * m_pPublicRB, * m_pPrivateRB,  * m_pProtectedRB, * m_pNoneRB;
+-    QLabel * m_pNameL, * m_pInitialL, * m_pValuesL, * m_pAttributesL ;
+-    KComboBox * m_pAttributesCB;
+-    KLineEdit * m_pNameLE, * m_pInitialLE, * m_pValuesLE;
+-    QCheckBox* m_pAutoIncrementCB;
+-    QCheckBox* m_pNullCB;
+-    UMLDatatypeWidget *m_datatypeWidget;
+-    UMLStereotypeWidget *m_stereotypeWidget;
+-
+ public slots:
+     void slotAutoIncrementStateChanged(bool checked);
+     void slotNameChanged(const QString &);
+diff --git a/umbrello/dialogs/umlentityattributedialog.ui b/umbrello/dialogs/umlentityattributedialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..dc9b7b03d7ad0cfb0665e1c585888c874d807cd0
+--- /dev/null
++++ b/umbrello/dialogs/umlentityattributedialog.ui
+@@ -0,0 +1,137 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLEntityAttributeDialog</class>
++ <widget class="QWidget" name="UMLEntityAttributeDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>286</width>
++    <height>386</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <property name="layoutDirection">
++   <enum>Qt::LeftToRight</enum>
++  </property>
++  <layout class="QGridLayout" name="gridLayout">
++   <item row="4" column="3">
++    <widget class="QLineEdit" name="tb_defaultValue"/>
++   </item>
++   <item row="8" column="0" colspan="4">
++    <widget class="QCheckBox" name="ck_allowNull">
++     <property name="text">
++      <string>Allow Null</string>
++     </property>
++    </widget>
++   </item>
++   <item row="0" column="0" colspan="4">
++    <widget class="QLabel" name="label">
++     <property name="layoutDirection">
++      <enum>Qt::LeftToRight</enum>
++     </property>
++     <property name="text">
++      <string>General Properties</string>
++     </property>
++     <property name="alignment">
++      <set>Qt::AlignCenter</set>
++     </property>
++    </widget>
++   </item>
++   <item row="3" column="3">
++    <widget class="QLineEdit" name="tb_name"/>
++   </item>
++   <item row="6" column="0" colspan="3">
++    <widget class="QLabel" name="label_4">
++     <property name="text">
++      <string>Lenght/Values:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="10" column="0" colspan="4">
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>Indexing</string>
++     </property>
++     <layout class="QHBoxLayout" name="horizontalLayout_5">
++      <item>
++       <widget class="QRadioButton" name="radioButton">
++        <property name="text">
++         <string>Not Inde&amp;xed</string>
++        </property>
++        <property name="checked">
++         <bool>true</bool>
++        </property>
++       </widget>
++      </item>
++      <item>
++       <widget class="QRadioButton" name="radioButton_2">
++        <property name="text">
++         <string>Indexed</string>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++   <item row="3" column="0">
++    <widget class="QLabel" name="label_2">
++     <property name="text">
++      <string>Name:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="4" column="0" colspan="3">
++    <widget class="QLabel" name="label_3">
++     <property name="text">
++      <string>Default Value:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="1" column="0" colspan="4">
++    <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
++   </item>
++   <item row="9" column="0" colspan="2">
++    <widget class="QLabel" name="label_5">
++     <property name="text">
++      <string>Attributes:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="9" column="2" colspan="2">
++    <widget class="QComboBox" name="cb_attributesTypes"/>
++   </item>
++   <item row="7" column="0" colspan="4">
++    <widget class="QCheckBox" name="ck_autoIncrement">
++     <property name="text">
++      <string>Auto Increment:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="5" column="0" colspan="4">
++    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true"/>
++   </item>
++   <item row="6" column="3">
++    <widget class="QLineEdit" name="tb_lenghtValues"/>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/umloperationdialog.cpp b/umbrello/dialogs/umloperationdialog.cpp
+index 1d10e8f2ff311d44a61efda780b24aa7d9a7c44c..7b02c16f8df62da604d9ac1499afc3f29d7cb393 100644
+--- a/umbrello/dialogs/umloperationdialog.cpp
++++ b/umbrello/dialogs/umloperationdialog.cpp
+@@ -59,8 +59,10 @@
+  */
+ UMLOperationDialog::UMLOperationDialog(QWidget * parent, UMLOperation * pOperation)
+   : SinglePageDialogBase(parent)
++  , ui(new Ui::UMLOperationDialog)
+ {
+     setCaption(i18n("Operation Properties"));
++    ui->setupUi(mainWidget());
+     m_operation = pOperation;
+     m_doc = UMLApp::app()->document();
+     m_menu = 0;
+@@ -79,117 +81,37 @@ UMLOperationDialog::~UMLOperationDialog()
+  */
+ void UMLOperationDialog::setupDialog()
+ {
+-    QFrame *frame = new QFrame(this);
+-    setMainWidget(frame);
+-    int margin = fontMetrics().height();
+-    QVBoxLayout * topLayout = new QVBoxLayout(frame);
+-
+-    m_pGenGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout * genLayout = new QGridLayout(m_pGenGB);
+-    genLayout->setColumnStretch(1, 1);
+-    genLayout->setColumnStretch(3, 1);
+-    genLayout->addItem(new QSpacerItem(200, 0), 0, 1);
+-    genLayout->addItem(new QSpacerItem(200, 0), 0, 3);
+-    genLayout->setMargin(margin);
+-    genLayout->setSpacing(10);
+-
+-    Dialog_Utils::makeLabeledEditField(genLayout, 0,
+-                                    m_pNameL, i18nc("operation name", "&Name:"),
+-                                    m_pNameLE, m_operation->name());
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(m_operation);
+-    m_datatypeWidget->addToLayout(genLayout, 0, 2);
+-
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_operation);
+-    m_stereotypeWidget->addToLayout(genLayout, 1);
+-
+-    m_pAbstractCB = new QCheckBox(i18n("&Abstract operation"), m_pGenGB);
+-    m_pAbstractCB->setChecked(m_operation->isAbstract());
+-    genLayout->addWidget(m_pAbstractCB, 2, 0);
+-    m_pStaticCB = new QCheckBox(i18n("Classifier &scope (\"static\")"), m_pGenGB);
+-    m_pStaticCB->setChecked(m_operation->isStatic());
+-    genLayout->addWidget(m_pStaticCB, 2, 1);
+-    m_pQueryCB = new QCheckBox(i18n("&Query (\"const\")"), m_pGenGB);
+-    m_pQueryCB->setChecked(m_operation->getConst());
+-    genLayout->addWidget(m_pQueryCB, 2, 2);
+-
+-    m_visibilityEnumWidget = new VisibilityEnumWidget(m_operation, this);
+-
+-    m_docWidget = new DocumentationWidget(m_operation, this);
+-
+-    m_pParmsGB = new QGroupBox(i18n("Parameters"), frame);
+-    QVBoxLayout* parmsLayout = new QVBoxLayout(m_pParmsGB);
+-    parmsLayout->setMargin(margin);
+-    parmsLayout->setSpacing(10);
+-
+-    // horizontal box contains the list box and the move up/down buttons
+-    QHBoxLayout* parmsHBoxLayout = new QHBoxLayout();
+-    m_pParmsLW = new QListWidget(m_pParmsGB);
+-    m_pParmsLW->setContextMenuPolicy(Qt::CustomContextMenu);
+-
+-    // the move up/down buttons (another vertical box)
+-    QVBoxLayout* buttonLayout = new QVBoxLayout();
+-
+-    m_pUpButton = new QToolButton(m_pParmsGB);
+-    m_pUpButton->setArrowType(Qt::UpArrow);
+-    m_pUpButton->setEnabled(false);
+-    buttonLayout->addWidget(m_pUpButton);
+-
+-    m_pDownButton = new QToolButton(m_pParmsGB);
+-    m_pDownButton->setArrowType(Qt::DownArrow);
+-    m_pDownButton->setEnabled(false);
+-    buttonLayout->addWidget(m_pDownButton);
+-
+-#if QT_VERSION >= 0x050000
+-    QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pParmsGB);
+-    QPushButton* newParam = buttonBox->addButton(i18n("Ne&w Parameter..."), QDialogButtonBox::ActionRole);
+-    connect(newParam, &QPushButton::clicked, this, &UMLOperationDialog::slotNewParameter);
+-    m_pDeleteButton = buttonBox->addButton(i18n("&Delete"), QDialogButtonBox::ActionRole);
+-    connect(m_pDeleteButton, &QPushButton::clicked, this, &UMLOperationDialog::slotDeleteParameter);
+-    m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), QDialogButtonBox::ActionRole);
+-    connect(m_pPropertiesButton, &QPushButton::clicked, this, &UMLOperationDialog::slotParameterProperties);
+-#else
+-    KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pParmsGB);
+-    buttonBox->addButton(i18n("Ne&w Parameter..."), KDialogButtonBox::ActionRole,
+-                          this, SLOT(slotNewParameter()));
+-    m_pDeleteButton = buttonBox->addButton(i18n("&Delete"), KDialogButtonBox::ActionRole,
+-                                            this, SLOT(slotDeleteParameter()));
+-    m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), KDialogButtonBox::ActionRole,
+-                          this, SLOT(slotParameterProperties()));
+-#endif
+-
+-    parmsHBoxLayout->addWidget(m_pParmsLW);
+-    parmsHBoxLayout->addLayout(buttonLayout);
++    ui->stereotypeWidget->setUMLObject(m_operation);
++    ui->visibilityWidget->setUMLObject(m_operation);
++    ui->documentationWidget->setUMLObject(m_operation);
++    ui->list_parameters->setContextMenuPolicy(Qt::CustomContextMenu);
+ 
+-    parmsLayout->addLayout(parmsHBoxLayout);
+-    parmsLayout->addWidget(buttonBox);
++    // setup push buttons signals
++    connect(ui->pb_newParameter, &QPushButton::clicked, this, &UMLOperationDialog::slotNewParameter);
++    connect(ui->pb_delete, &QPushButton::clicked, this, &UMLOperationDialog::slotDeleteParameter);
++    connect(ui->pb_properties, &QPushButton::clicked, this, &UMLOperationDialog::slotParameterProperties);
+ 
+-    topLayout->addWidget(m_pGenGB);
+-    topLayout->addWidget(m_visibilityEnumWidget);
+-    topLayout->addWidget(m_docWidget);
+-    topLayout->addWidget(m_pParmsGB);
+-
+-    m_pDeleteButton->setEnabled(false);
+-    m_pPropertiesButton->setEnabled(false);
+-    m_pUpButton->setEnabled(false);
+-    m_pDownButton->setEnabled(false);
++    ui->pb_delete->setEnabled(false);
++    ui->pb_properties->setEnabled(false);
++    ui->pb_down->setEnabled(false);
++    ui->pb_up->setEnabled(false);
+ 
+     // fill in parm list box
+     UMLAttributeList list = m_operation->getParmList();
+     foreach (UMLAttribute* pAtt, list) {
+-        m_pParmsLW->addItem(pAtt->toString(Uml::SignatureType::SigNoVis));
++        ui->list_parameters->addItem(pAtt->toString(Uml::SignatureType::SigNoVis));
+     }
+ 
+     // setup parm list box signals
+-    connect(m_pUpButton, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterUp);
+-    connect(m_pDownButton, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterDown);
+-    connect(m_pParmsLW, &QListWidget::itemClicked, this, &UMLOperationDialog::slotParamsBoxClicked);
+-    connect(m_pParmsLW, &QListWidget::customContextMenuRequested, this, &UMLOperationDialog::slotParmRightButtonPressed);
+-    connect(m_pParmsLW, &QListWidget::itemDoubleClicked, this, &UMLOperationDialog::slotParmDoubleClick);
+-
+-    m_pNameLE->setFocus();
+-    connect(m_pNameLE, &KLineEdit::textChanged, this, &UMLOperationDialog::slotNameChanged);
+-    slotNameChanged(m_pNameLE->text());
++    connect(ui->pb_up, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterUp);
++    connect(ui->pb_down, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterDown);
++    connect(ui->list_parameters, &QListWidget::itemClicked, this, &UMLOperationDialog::slotParamsBoxClicked);
++    connect(ui->list_parameters, &QListWidget::customContextMenuRequested, this, &UMLOperationDialog::slotParmRightButtonPressed);
++    connect(ui->list_parameters, &QListWidget::itemDoubleClicked, this, &UMLOperationDialog::slotParmDoubleClick);
++
++    ui->tb_name->setFocus();
++    connect(ui->tb_name, &KLineEdit::textChanged, this, &UMLOperationDialog::slotNameChanged);
++    slotNameChanged(ui->tb_name->text());
+ }
+ 
+ void UMLOperationDialog::slotNameChanged(const QString &_text)
+@@ -200,14 +122,12 @@ void UMLOperationDialog::slotNameChanged(const QString &_text)
+ void UMLOperationDialog::slotParmRightButtonPressed(const QPoint &p)
+ {
+     ListPopupMenu::MenuType type = ListPopupMenu::mt_Undefined;
+-    QListWidgetItem* item = m_pParmsLW->itemAt(p);
++    QListWidgetItem* item = ui->list_parameters->itemAt(p);
+     if (item) // pressed on an item
+-    {
+         type = ListPopupMenu::mt_Parameter_Selected;
+-    } else // pressed into fresh air
+-    {
++    else // pressed into fresh air
+         type = ListPopupMenu::mt_New_Parameter;
+-    }
++
+     if (m_menu) {
+         m_menu->hide();
+         disconnect(m_menu, &ListPopupMenu::triggered, this, &UMLOperationDialog::slotMenuSelection);
+@@ -215,7 +135,7 @@ void UMLOperationDialog::slotParmRightButtonPressed(const QPoint &p)
+         m_menu = 0;
+     }
+     ListPopupMenu popup(this, type);
+-    QAction *triggered = popup.exec(m_pParmsLW->mapToGlobal(p));
++    QAction *triggered = popup.exec(ui->list_parameters->mapToGlobal(p));
+     slotMenuSelection(triggered);
+ }
+ 
+@@ -257,7 +177,7 @@ void UMLOperationDialog::slotNewParameter()
+         if (!pAtt) {
+             newAttribute->setID(UniqueID::gen());
+             m_operation->addParm(newAttribute);
+-            m_pParmsLW->addItem(newAttribute->toString(Uml::SignatureType::SigNoVis));
++            ui->list_parameters->addItem(newAttribute->toString(Uml::SignatureType::SigNoVis));
+             m_doc->setModified(true);
+         } else {
+             KMessageBox::sorry(this, i18n("The parameter name you have chosen\nis already being used in this operation."),
+@@ -272,26 +192,26 @@ void UMLOperationDialog::slotNewParameter()
+ 
+ void UMLOperationDialog::slotDeleteParameter()
+ {
+-    UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(m_pParmsLW->currentItem()));
++    UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(ui->list_parameters->currentItem()));
+ 
+     m_operation->removeParm(pOldAtt);
+-    m_pParmsLW->takeItem(m_pParmsLW->currentRow());
++    ui->list_parameters->takeItem(ui->list_parameters->currentRow());
+     m_doc->setModified(true);
+ 
+-    m_pDeleteButton->setEnabled(false);
+-    m_pPropertiesButton->setEnabled(false);
+-    m_pUpButton->setEnabled(false);
+-    m_pDownButton->setEnabled(false);
++    ui->pb_delete->setEnabled(false);
++    ui->pb_properties->setEnabled(false);
++    ui->pb_up->setEnabled(false);
++    ui->pb_down->setEnabled(false);
+ }
+ 
+ void UMLOperationDialog::slotParameterProperties()
+ {
+     UMLAttribute* pAtt = 0, * pOldAtt = 0;
+ 
+-    int position = m_pParmsLW->row(m_pParmsLW->currentItem());
++    int position = ui->list_parameters->row(ui->list_parameters->currentItem());
+     pOldAtt = m_operation->getParmList().at(position);
+     if (!pOldAtt) {
+-        uDebug() << "THE impossible has occurred for:" << m_pParmsLW->currentItem()->text();
++        uDebug() << "THE impossible has occurred for:" << ui->list_parameters->currentItem()->text();
+         return;
+     } // should never occur
+ 
+@@ -316,7 +236,7 @@ void UMLOperationDialog::slotParameterProperties()
+             pOldAtt->setName(oldAttName); // reset the name if there was a naming conflict
+         }
+ 
+-        QListWidgetItem* item = m_pParmsLW->currentItem();
++        QListWidgetItem* item = ui->list_parameters->currentItem();
+         item->setText(pOldAtt->toString(Uml::SignatureType::SigNoVis));
+         m_doc->setModified(true);
+     }
+@@ -326,14 +246,14 @@ void UMLOperationDialog::slotParameterProperties()
+ 
+ void UMLOperationDialog::slotParameterUp()
+ {
+-    int row = m_pParmsLW->currentRow();
+-    QListWidgetItem* item = m_pParmsLW->currentItem();
++    int row = ui->list_parameters->currentRow();
++    QListWidgetItem* item = ui->list_parameters->currentItem();
+     if (item) {
+-        UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(item));
++        UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(item));
+ 
+         m_operation->moveParmLeft(pOldAtt);
+-        m_pParmsLW->takeItem(row);
+-        m_pParmsLW->insertItem(row - 1, item);
++        ui->list_parameters->takeItem(row);
++        ui->list_parameters->insertItem(row - 1, item);
+ 
+         m_doc->setModified(true);
+         slotParamsBoxClicked(item);
+@@ -345,14 +265,14 @@ void UMLOperationDialog::slotParameterUp()
+ 
+ void UMLOperationDialog::slotParameterDown()
+ {
+-    int row = m_pParmsLW->currentRow();
+-    QListWidgetItem* item = m_pParmsLW->currentItem();
++    int row = ui->list_parameters->currentRow();
++    QListWidgetItem* item = ui->list_parameters->currentItem();
+     if (item) {
+-        UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(item));
++        UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(item));
+ 
+         m_operation->moveParmRight(pOldAtt);
+-        m_pParmsLW->takeItem(row);
+-        m_pParmsLW->insertItem(row + 1, item);
++        ui->list_parameters->takeItem(row);
++        ui->list_parameters->insertItem(row + 1, item);
+ 
+         m_doc->setModified(true);
+         slotParamsBoxClicked(item);
+@@ -368,18 +288,18 @@ void UMLOperationDialog::slotParameterDown()
+ void UMLOperationDialog::slotParamsBoxClicked(QListWidgetItem* parameterItem)
+ {
+     if (parameterItem) {
+-        m_pDeleteButton->setEnabled(true);
+-        m_pPropertiesButton->setEnabled(true);
+-        int row = m_pParmsLW->row(parameterItem);
+-        bool hasNext = (row < m_pParmsLW->count() - 1);
++        ui->pb_delete->setEnabled(true);
++        ui->pb_properties->setEnabled(true);
++        int row = ui->list_parameters->row(parameterItem);
++        bool hasNext = (row < ui->list_parameters->count() - 1);
+         bool hasPrev = (row > 0);
+-        m_pUpButton->setEnabled(hasPrev);
+-        m_pDownButton->setEnabled(hasNext);
++        ui->pb_up->setEnabled(hasPrev);
++        ui->pb_down->setEnabled(hasNext);
+     } else {
+-        m_pDeleteButton->setEnabled(false);
+-        m_pPropertiesButton->setEnabled(false);
+-        m_pUpButton->setEnabled(false);
+-        m_pDownButton->setEnabled(false);
++        ui->pb_delete->setEnabled(false);
++        ui->pb_properties->setEnabled(false);
++        ui->pb_up->setEnabled(false);
++        ui->pb_down->setEnabled(false);
+     }
+ }
+ 
+@@ -389,11 +309,11 @@ void UMLOperationDialog::slotParamsBoxClicked(QListWidgetItem* parameterItem)
+  */
+ bool UMLOperationDialog::apply()
+ {
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if(name.length() == 0) {
+         KMessageBox::error(this, i18n("You have entered an invalid operation name."),
+                            i18n("Operation Name Invalid"), 0);
+-        m_pNameLE->setText(m_operation->name());
++        ui->tb_name->setText(m_operation->name());
+         return false;
+     }
+ 
+@@ -409,11 +329,11 @@ bool UMLOperationDialog::apply()
+     }
+     m_operation->setName(name);
+ 
+-    m_visibilityEnumWidget->apply();
+-    m_datatypeWidget->apply();
+-    m_stereotypeWidget->apply();
++    ui->visibilityWidget->apply();
++    ui->dataTypeWidget->apply();
++    ui->stereotypeWidget->apply();
+ 
+-    bool isAbstract = m_pAbstractCB->isChecked();
++    bool isAbstract = ui->ck_abstract->isChecked();
+     m_operation->setAbstract(isAbstract);
+     if (isAbstract) {
+         /* If any operation is abstract then the owning class needs
+@@ -425,9 +345,9 @@ bool UMLOperationDialog::apply()
+             classifier->setAbstract(true);
+         }
+     }
+-    m_operation->setStatic(m_pStaticCB->isChecked());
+-    m_operation->setConst(m_pQueryCB->isChecked());
+-    m_docWidget->apply();
++    m_operation->setStatic(ui->ck_classifierScope->isChecked());
++    m_operation->setConst(ui->ck_queryConst->isChecked());
++    ui->documentationWidget->apply();
+ 
+     return true;
+ }
+diff --git a/umbrello/dialogs/umloperationdialog.h b/umbrello/dialogs/umloperationdialog.h
+index 8cc4e5a1d0b70f5a1bb0779c8d0c47f80204a6a0..9721bcf1c918e0ec4d6b664e221ab60e2e5d7caa 100644
+--- a/umbrello/dialogs/umloperationdialog.h
++++ b/umbrello/dialogs/umloperationdialog.h
+@@ -13,6 +13,7 @@
+ 
+ //kde includes
+ #include "singlepagedialogbase.h"
++#include "ui_umloperationdialog.h"
+ 
+ class DocumentationWidget;
+ class KComboBox;
+@@ -44,6 +45,8 @@ public:
+ 
+     UMLOperationDialog(QWidget * parent, UMLOperation * pOperation);
+     ~UMLOperationDialog();
++private:
++    Ui::UMLOperationDialog *ui;
+ 
+ protected:
+ 
+@@ -57,29 +60,6 @@ protected:
+     UMLDoc*           m_doc;        ///< The UMLDocument where all objects live.
+     ListPopupMenu*    m_menu;       ///< Menu used in parameter list box.
+ 
+-    //GUI widgets
+-    QGroupBox*            m_pParmsGB;
+-    QGroupBox*            m_pGenGB;
+-    QListWidget*          m_pParmsLW;
+-    QGroupBox*            m_pScopeGB;
+-    QRadioButton*         m_pPublicRB;
+-    QRadioButton*         m_pPrivateRB;
+-    QRadioButton*         m_pProtectedRB;
+-    QRadioButton*         m_pImplementationRB;
+-    QLabel*               m_pNameL;
+-    UMLDatatypeWidget*    m_datatypeWidget;
+-    UMLStereotypeWidget*  m_stereotypeWidget;
+-    KLineEdit*            m_pNameLE;
+-    QCheckBox*            m_pAbstractCB;
+-    QCheckBox*            m_pStaticCB;
+-    QCheckBox*            m_pQueryCB;
+-    QPushButton*          m_pDeleteButton;
+-    QPushButton*          m_pPropertiesButton;
+-    QToolButton*          m_pUpButton;
+-    QToolButton*          m_pDownButton;
+-    DocumentationWidget*  m_docWidget;
+-    VisibilityEnumWidget* m_visibilityEnumWidget;
+-
+ public slots:
+     void slotParmRightButtonPressed(const QPoint &p);
+     void slotParmDoubleClick(QListWidgetItem *item);
+diff --git a/umbrello/dialogs/umloperationdialog.ui b/umbrello/dialogs/umloperationdialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..4e9eeeac29a1ec1a519d21d0fad6ed10543cd329
+--- /dev/null
++++ b/umbrello/dialogs/umloperationdialog.ui
+@@ -0,0 +1,254 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLOperationDialog</class>
++ <widget class="QWidget" name="UMLOperationDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>515</width>
++    <height>539</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout_2">
++   <item>
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>General Properties</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout">
++      <item row="0" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout">
++        <item>
++         <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QLabel" name="label">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++          <property name="text">
++           <string>Name:</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QLineEdit" name="tb_name">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <spacer name="horizontalSpacer_2">
++          <property name="orientation">
++           <enum>Qt::Horizontal</enum>
++          </property>
++          <property name="sizeHint" stdset="0">
++           <size>
++            <width>40</width>
++            <height>20</height>
++           </size>
++          </property>
++         </spacer>
++        </item>
++       </layout>
++      </item>
++      <item row="1" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout_4">
++        <item>
++         <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true">
++          <property name="sizePolicy">
++           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
++            <horstretch>0</horstretch>
++            <verstretch>0</verstretch>
++           </sizepolicy>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <spacer name="horizontalSpacer_3">
++          <property name="orientation">
++           <enum>Qt::Horizontal</enum>
++          </property>
++          <property name="sizeHint" stdset="0">
++           <size>
++            <width>40</width>
++            <height>20</height>
++           </size>
++          </property>
++         </spacer>
++        </item>
++       </layout>
++      </item>
++      <item row="2" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout_3">
++        <item>
++         <widget class="QCheckBox" name="ck_abstract">
++          <property name="text">
++           <string>Abstract Operation</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QCheckBox" name="ck_classifierScope">
++          <property name="text">
++           <string>Classifier scope (&quot;static&quot;)</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QCheckBox" name="ck_queryConst">
++          <property name="text">
++           <string>Query (&quot;const&quot;)</string>
++          </property>
++         </widget>
++        </item>
++       </layout>
++      </item>
++     </layout>
++    </widget>
++   </item>
++   <item>
++    <widget class="VisibilityEnumWidget" name="visibilityWidget" native="true"/>
++   </item>
++   <item>
++    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
++   </item>
++   <item>
++    <widget class="QGroupBox" name="groupBox_2">
++     <property name="title">
++      <string>Parameters</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout_2">
++      <item row="0" column="0" rowspan="2">
++       <widget class="QListWidget" name="list_parameters">
++        <property name="sizePolicy">
++         <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
++          <horstretch>0</horstretch>
++          <verstretch>0</verstretch>
++         </sizepolicy>
++        </property>
++       </widget>
++      </item>
++      <item row="2" column="0">
++       <layout class="QHBoxLayout" name="horizontalLayout_2">
++        <item>
++         <spacer name="horizontalSpacer">
++          <property name="orientation">
++           <enum>Qt::Horizontal</enum>
++          </property>
++          <property name="sizeHint" stdset="0">
++           <size>
++            <width>40</width>
++            <height>20</height>
++           </size>
++          </property>
++         </spacer>
++        </item>
++        <item>
++         <widget class="QPushButton" name="pb_newParameter">
++          <property name="text">
++           <string>New Parameter</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QPushButton" name="pb_delete">
++          <property name="text">
++           <string>Delete</string>
++          </property>
++         </widget>
++        </item>
++        <item>
++         <widget class="QPushButton" name="pb_properties">
++          <property name="text">
++           <string>Properties</string>
++          </property>
++         </widget>
++        </item>
++       </layout>
++      </item>
++      <item row="1" column="1">
++       <widget class="QToolButton" name="pb_down">
++        <property name="text">
++         <string/>
++        </property>
++        <property name="arrowType">
++         <enum>Qt::DownArrow</enum>
++        </property>
++       </widget>
++      </item>
++      <item row="0" column="1">
++       <widget class="QToolButton" name="pb_up">
++        <property name="text">
++         <string/>
++        </property>
++        <property name="arrowType">
++         <enum>Qt::UpArrow</enum>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++   <item>
++    <spacer name="verticalSpacer">
++     <property name="orientation">
++      <enum>Qt::Vertical</enum>
++     </property>
++     <property name="sizeHint" stdset="0">
++      <size>
++       <width>20</width>
++       <height>40</height>
++      </size>
++     </property>
++    </spacer>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>DocumentationWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/documentationwidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>VisibilityEnumWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/visibilityenumwidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/umltemplatedialog.cpp b/umbrello/dialogs/umltemplatedialog.cpp
+index 766573772aeaf68eb4e965a30e5e8ae4be044713..42d4afe2c50d17cc026396003c39de9446ebb0b0 100644
+--- a/umbrello/dialogs/umltemplatedialog.cpp
++++ b/umbrello/dialogs/umltemplatedialog.cpp
+@@ -37,9 +37,11 @@
+ 
+ UMLTemplateDialog::UMLTemplateDialog(QWidget* pParent, UMLTemplate* pTemplate)
+   : SinglePageDialogBase(pParent)
++  , ui(new Ui::UMLTemplateDialog)
+ {
+     m_pTemplate = pTemplate;
+     setCaption(i18n("Template Properties"));
++    ui->setupUi(mainWidget());
+     setupDialog();
+ }
+ 
+@@ -52,32 +54,10 @@ UMLTemplateDialog::~UMLTemplateDialog()
+  */
+ void UMLTemplateDialog::setupDialog()
+ {
+-    int margin = fontMetrics().height();
+-
+-    QFrame *frame = new QFrame(this);
+-    setMainWidget(frame);
+-    QVBoxLayout* mainLayout = new QVBoxLayout(frame);
+-
+-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
+-    QGridLayout* valuesLayout = new QGridLayout(m_pValuesGB);
+-    valuesLayout->setMargin(margin);
+-    valuesLayout->setSpacing(10);
+-
+-    m_datatypeWidget = new UMLDatatypeWidget(m_pTemplate);
+-    m_datatypeWidget->addToLayout(valuesLayout, 0);
+-
+-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
+-                                    m_pNameL, i18nc("template name", "&Name:"),
+-                                    m_pNameLE, m_pTemplate->name());
+-    m_stereotypeWidget = new UMLStereotypeWidget(m_pTemplate);
+-    m_stereotypeWidget->addToLayout(valuesLayout, 2);
+-
+-    mainLayout->addWidget(m_pValuesGB);
+-
+-    m_docWidget = new DocumentationWidget(m_pTemplate, this);
+-    mainLayout->addWidget(m_docWidget);
+-
+-    m_pNameLE->setFocus();
++    ui->dataTypeWidget->setTemplate(m_pTemplate);
++    ui->stereotypeWidget->setUMLObject(m_pTemplate);
++    ui->documentationWidget->setUMLObject(m_pTemplate);
++    ui->tb_name->setFocus();
+ }
+ 
+ /**
+@@ -86,13 +66,13 @@ void UMLTemplateDialog::setupDialog()
+  */
+ bool UMLTemplateDialog::apply()
+ {
+-    m_datatypeWidget->apply();
++    ui->dataTypeWidget->apply();
+ 
+-    QString name = m_pNameLE->text();
++    QString name = ui->tb_name->text();
+     if(name.length() == 0) {
+         KMessageBox::error(this, i18n("You have entered an invalid template name."),
+                            i18n("Template Name Invalid"), 0);
+-        m_pNameLE->setText(m_pTemplate->name());
++        ui->tb_name->setText(m_pTemplate->name());
+         return false;
+     }
+ 
+@@ -102,13 +82,13 @@ bool UMLTemplateDialog::apply()
+         if (o && o != m_pTemplate) {
+             KMessageBox::error(this, i18n("The template parameter name you have chosen is already being used in this operation."),
+                                i18n("Template Name Not Unique"), 0);
+-            m_pNameLE->setText(m_pTemplate->name());
++            ui->tb_name->setText(m_pTemplate->name());
+             return false;
+         }
+     }
+     m_pTemplate->setName(name);
+-    m_stereotypeWidget->apply();
+-    m_docWidget->apply();
++    ui->stereotypeWidget->apply();
++    ui->documentationWidget->apply();
+ 
+     return true;
+ }
+diff --git a/umbrello/dialogs/umltemplatedialog.h b/umbrello/dialogs/umltemplatedialog.h
+index 2ab6dd3365ce978196836ade91278647fd4b5930..698ef9ea7028db5871a8bcf665b7b21f840c04c8 100644
+--- a/umbrello/dialogs/umltemplatedialog.h
++++ b/umbrello/dialogs/umltemplatedialog.h
+@@ -12,6 +12,7 @@
+ #define UMLTEMPLATEDIALOG_H
+ 
+ #include "singlepagedialogbase.h"
++#include "ui_umltemplatedialog.h"
+ 
+ class DocumentationWidget;
+ class KComboBox;
+@@ -34,6 +35,8 @@ class UMLTemplateDialog : public SinglePageDialogBase
+ public:
+     UMLTemplateDialog(QWidget* pParent, UMLTemplate* pAttribute);
+     ~UMLTemplateDialog();
++private:
++    Ui::UMLTemplateDialog *ui;
+ 
+ protected:
+ 
+@@ -46,14 +49,6 @@ protected:
+      */
+     UMLTemplate* m_pTemplate;
+ 
+-    // GUI Widgets
+-    QGroupBox *m_pValuesGB;
+-    QLabel *m_pNameL;
+-    KLineEdit *m_pNameLE;
+-    UMLDatatypeWidget *m_datatypeWidget;
+-    UMLStereotypeWidget *m_stereotypeWidget;
+-    DocumentationWidget *m_docWidget;
+-
+ protected:
+ 
+     void insertTypesSorted(const QString& type = QString());
+diff --git a/umbrello/dialogs/umltemplatedialog.ui b/umbrello/dialogs/umltemplatedialog.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..92b21a36d62d058c7dd9abf6df907ccee9830b27
+--- /dev/null
++++ b/umbrello/dialogs/umltemplatedialog.ui
+@@ -0,0 +1,74 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLTemplateDialog</class>
++ <widget class="QWidget" name="UMLTemplateDialog">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>315</width>
++    <height>138</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QGridLayout" name="gridLayout">
++   <item row="0" column="0" colspan="2">
++    <widget class="QLabel" name="label">
++     <property name="text">
++      <string>General Properties</string>
++     </property>
++    </widget>
++   </item>
++   <item row="1" column="0" colspan="2">
++    <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
++   </item>
++   <item row="2" column="0">
++    <widget class="QLabel" name="label_2">
++     <property name="text">
++      <string>Name:</string>
++     </property>
++    </widget>
++   </item>
++   <item row="2" column="1">
++    <widget class="QLineEdit" name="tb_name">
++     <property name="sizePolicy">
++      <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
++       <horstretch>0</horstretch>
++       <verstretch>0</verstretch>
++      </sizepolicy>
++     </property>
++    </widget>
++   </item>
++   <item row="3" column="0" colspan="2">
++    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true"/>
++   </item>
++   <item row="4" column="0" colspan="2">
++    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
++   </item>
++  </layout>
++ </widget>
++ <customwidgets>
++  <customwidget>
++   <class>UMLDatatypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umldatatypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>UMLStereotypeWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/umlstereotypewidget.h</header>
++   <container>1</container>
++  </customwidget>
++  <customwidget>
++   <class>DocumentationWidget</class>
++   <extends>QWidget</extends>
++   <header>widgets/documentationwidget.h</header>
++   <container>1</container>
++  </customwidget>
++ </customwidgets>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/widgets/documentationwidget.cpp b/umbrello/dialogs/widgets/documentationwidget.cpp
+index 09cbe298e95ca877a7b0d9bdaacb5d358b01e945..912a8299b73b6ed7154e702dc5727b165743203a 100644
+--- a/umbrello/dialogs/widgets/documentationwidget.cpp
++++ b/umbrello/dialogs/widgets/documentationwidget.cpp
+@@ -19,13 +19,10 @@
+ #include <QGroupBox>
+ #include <QHBoxLayout>
+ 
+-DocumentationWidget::DocumentationWidget(UMLObject *o, QWidget *parent) :
+-    QWidget(parent),
+-    m_object(o),
++DocumentationWidget::DocumentationWidget(QWidget *parent)
++    :QWidget(parent),
+     m_widget(0)
+ {
+-    Q_ASSERT(o);
+-    init(o->doc());
+ }
+ 
+ DocumentationWidget::DocumentationWidget(UMLWidget *w, QWidget *parent) :
+@@ -54,6 +51,13 @@ void DocumentationWidget::apply()
+         m_widget->setDocumentation(m_editField->toPlainText());
+ }
+ 
++void DocumentationWidget::setUMLObject(UMLObject *o)
++{
++    Q_ASSERT(o);
++    m_object = o;
++    init(o->doc());
++}
++
+ /**
+  * initialize widget
+  * @param text text to display
+diff --git a/umbrello/dialogs/widgets/documentationwidget.h b/umbrello/dialogs/widgets/documentationwidget.h
+index 279553ef97a398917d3578411d2d8e680b0a17eb..36234b5ed20efc0467d27bb031cf733ed3ca4fb3 100644
+--- a/umbrello/dialogs/widgets/documentationwidget.h
++++ b/umbrello/dialogs/widgets/documentationwidget.h
+@@ -25,11 +25,12 @@ class DocumentationWidget : public QWidget
+ {
+     Q_OBJECT
+ public:
+-    explicit DocumentationWidget(UMLObject *o, QWidget *parent = 0);
++    explicit DocumentationWidget(QWidget *parent = 0);
+     explicit DocumentationWidget(UMLWidget *w, QWidget *parent = 0);
+     ~DocumentationWidget();
+ 
+     void apply();
++    void setUMLObject(UMLObject *o);
+ 
+ protected:
+     QGroupBox *m_box;
+diff --git a/umbrello/dialogs/widgets/umldatatypewidget.cpp b/umbrello/dialogs/widgets/umldatatypewidget.cpp
+index 5cd1fbaab377f68722254d9f683b028c3b510d38..ef1ca7736f27f0c6e98e0dead5198eab2b180efb 100644
+--- a/umbrello/dialogs/widgets/umldatatypewidget.cpp
++++ b/umbrello/dialogs/widgets/umldatatypewidget.cpp
+@@ -30,69 +30,14 @@
+ #include <QLabel>
+ #include <QWidget>
+ 
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLAttribute *attribute, QWidget *parent)
+-  : QWidget(parent),
+-    m_attribute(attribute),
+-    m_datatype(0),
+-    m_entityAttribute(0),
+-    m_operation(0),
+-    m_template(0)
++UMLDatatypeWidget::UMLDatatypeWidget(QWidget *parent) : QWidget(parent)
++  , m_attribute(nullptr)
++  , m_datatype(nullptr)
++  , m_operation(nullptr)
++  , m_entityAttribute(nullptr)
++  , m_template(nullptr)
+ {
+     init();
+-    m_parent = dynamic_cast<UMLClassifier*>(m_attribute->parent()->parent());
+-    insertTypesSortedParameter(m_attribute->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLClassifierListItem *datatype, QWidget *parent)
+-  : QWidget(parent),
+-    m_attribute(0),
+-    m_datatype(datatype),
+-    m_entityAttribute(0),
+-    m_operation(0),
+-    m_template(0)
+-{
+-    init();
+-    m_parent = dynamic_cast<UMLClassifier *>(m_datatype->parent());
+-    insertTypesSortedAttribute(m_datatype->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLEntityAttribute *entityAttribute, QWidget *parent)
+-   : QWidget(parent),
+-     m_attribute(0),
+-     m_datatype(0),
+-     m_entityAttribute(entityAttribute),
+-     m_operation(0),
+-     m_template(0)
+-{
+-    init();
+-    m_parent = 0;
+-    insertTypesSortedEntityAttribute(m_entityAttribute->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLOperation *operation, QWidget *parent)
+- :  QWidget(parent),
+-    m_attribute(0),
+-    m_datatype(0),
+-    m_entityAttribute(0),
+-    m_operation(operation),
+-    m_template(0)
+-{
+-    init();
+-    m_parent = dynamic_cast<UMLClassifier*>(m_operation->parent());
+-    insertTypesSortedOperation(m_operation->getTypeName());
+-}
+-
+-UMLDatatypeWidget::UMLDatatypeWidget(UMLTemplate *_template, QWidget *parent)
+- :  QWidget(parent),
+-    m_attribute(0),
+-    m_datatype(0),
+-    m_entityAttribute(0),
+-    m_operation(0),
+-    m_template(_template)
+-{
+-    init();
+-    m_parent = 0;
+-    insertTypesSortedTemplate(m_template->getTypeName());
+ }
+ 
+ void UMLDatatypeWidget::init()
+@@ -113,12 +58,52 @@ void UMLDatatypeWidget::init()
+     setLayout(layout);
+ }
+ 
++
++
+ UMLDatatypeWidget::~UMLDatatypeWidget()
+ {
+     delete m_comboBox;
+     delete m_label;
+ }
+ 
++void UMLDatatypeWidget::setAttribute(UMLAttribute *attribute)
++{
++    m_attribute = attribute;
++    m_parent = dynamic_cast<UMLClassifier*>(m_attribute->parent()->parent());
++    insertTypesSortedParameter(m_attribute->getTypeName());
++}
++
++void UMLDatatypeWidget::setClassifierItem(UMLClassifierListItem *datatype)
++{
++    m_datatype = datatype;
++    m_parent = dynamic_cast<UMLClassifier *>(m_datatype->parent());
++    insertTypesSortedAttribute(m_datatype->getTypeName());
++
++}
++
++void UMLDatatypeWidget::setEntityAttribute(UMLEntityAttribute *entityAttribute)
++{
++    m_entityAttribute = entityAttribute;
++    m_parent = 0;
++    insertTypesSortedEntityAttribute(m_entityAttribute->getTypeName());
++}
++
++void UMLDatatypeWidget::setOPeration(UMLOperation *operation)
++{
++    m_operation = operation;
++    m_parent = dynamic_cast<UMLClassifier*>(m_operation->parent());
++    insertTypesSortedOperation(m_operation->getTypeName());
++
++}
++
++void UMLDatatypeWidget::setTemplate(UMLTemplate *_template)
++{
++    m_template = _template;
++    m_parent = 0;
++    insertTypesSortedTemplate(m_template->getTypeName());
++
++}
++
+ bool UMLDatatypeWidget::apply()
+ {
+     if (m_datatype)
+@@ -137,16 +122,23 @@ bool UMLDatatypeWidget::apply()
+ bool UMLDatatypeWidget::applyAttribute()
+ {
+     QString typeName = m_comboBox->currentText();
+-    UMLTemplate *tmplParam = m_parent->findTemplate(typeName);
++    Uml::TypeQualifiers::Enum typeQualifier = m_datatype->qualifier();
++    Uml::TypeModifiers::Enum typeModifierEnum = m_datatype->modifier();
++    //Need to find a better way to do that
++    QString m = Uml::TypeModifiers::toString(typeModifierEnum);
++    QString q = Uml::TypeQualifiers::toString(typeQualifier);
++    QString finalString = q + typeName + m;
++
++    UMLTemplate *tmplParam = m_parent->findTemplate(finalString);
+     if (tmplParam) {
+         m_datatype->setType(tmplParam);
+         return true;
+     }
+     UMLDoc * pDoc = UMLApp::app()->document();
+ 
+-    UMLObject *obj = 0;
++    UMLObject *obj = nullptr;
+     if (!typeName.isEmpty()) {
+-        obj = pDoc->findUMLObject(typeName);
++        obj = pDoc->findUMLObject(finalString);
+     }
+ 
+     UMLClassifier *classifier = dynamic_cast<UMLClassifier*>(obj);
+@@ -154,23 +146,22 @@ bool UMLDatatypeWidget::applyAttribute()
+         Uml::ProgrammingLanguage::Enum pl = UMLApp::app()->activeLanguage();
+         // Import_Utils does not handle creating a new object with empty name
+         // string well. Use Object_Factory in those cases.
+-        if (
+-            (!typeName.isEmpty()) &&
+-            ((pl == Uml::ProgrammingLanguage::Cpp) ||
+-                (pl == Uml::ProgrammingLanguage::Java))
+-        ) {
++        if (!typeName.isEmpty() && ((pl == Uml::ProgrammingLanguage::Cpp) || (pl == Uml::ProgrammingLanguage::Java)) )
++        {
+             // Import_Utils::createUMLObject works better for C++ namespace
+             // and java package than Object_Factory::createUMLObject
+             Import_Utils::setRelatedClassifier(m_parent);
+-            obj = Import_Utils::createUMLObject(UMLObject::ot_UMLObject, typeName);
++            obj = Import_Utils::createUMLObject(UMLObject::ot_UMLObject, finalString);
+             Import_Utils::setRelatedClassifier(NULL);
+         } else {
+             // If it's obviously a pointer type (C++) then create a datatype.
+             // Else we don't know what it is so as a compromise create a class.
++            bool contains = false;
++            if(finalString.contains(QChar::fromLatin1('*')) || finalString.contains(QChar::fromLatin1('&')))
++                contains = true;
+             UMLObject::ObjectType ot =
+-                (typeName.contains(QChar::fromLatin1('*')) ? UMLObject::ot_Datatype
+-                                                          : UMLObject::ot_Class);
+-            obj = Object_Factory::createUMLObject(ot, typeName);
++                (contains ? UMLObject::ot_Datatype : UMLObject::ot_Class);
++            obj = Object_Factory::createUMLObject(ot, finalString);
+         }
+         if (obj == NULL)
+             return false;
+diff --git a/umbrello/dialogs/widgets/umldatatypewidget.h b/umbrello/dialogs/widgets/umldatatypewidget.h
+index bdac23e0c88040941a07ce6b1268b47f683d4103..75b92bd65b40c748ba15fdcee18e24656890b357 100644
+--- a/umbrello/dialogs/widgets/umldatatypewidget.h
++++ b/umbrello/dialogs/widgets/umldatatypewidget.h
+@@ -26,13 +26,15 @@ class UMLTemplate;
+ class UMLDatatypeWidget : public QWidget
+ {
+ public:
+-    UMLDatatypeWidget(UMLAttribute *attribute, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLClassifierListItem *datatype, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLEntityAttribute *entityAttribute, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLOperation *operation, QWidget *parent=0);
+-    UMLDatatypeWidget(UMLTemplate *_template, QWidget *parent=0);
++    UMLDatatypeWidget(QWidget *parent = 0);
+     ~UMLDatatypeWidget();
+ 
++    void setAttribute(UMLAttribute *attribute);
++    void setClassifierItem(UMLClassifierListItem *datatype);
++    void setEntityAttribute(UMLEntityAttribute *entityAttribute);
++    void setOPeration(UMLOperation *operation);
++    void setTemplate(UMLTemplate *_template);
++
+     void addToLayout(QGridLayout *layout, int row, int startColumn = 0);
+     bool apply();
+     void reset();
+diff --git a/umbrello/dialogs/widgets/umlstereotypewidget.cpp b/umbrello/dialogs/widgets/umlstereotypewidget.cpp
+index 6d7f3e46903a83e3494889a27dabdeb832358416..1130b52120add34044f31bbe36cc385b2285df26 100644
+--- a/umbrello/dialogs/widgets/umlstereotypewidget.cpp
++++ b/umbrello/dialogs/widgets/umlstereotypewidget.cpp
+@@ -23,14 +23,11 @@
+ #include <QLabel>
+ #include <QWidget>
+ 
+-Q_DECLARE_METATYPE(UMLStereotype*);
++Q_DECLARE_METATYPE(UMLStereotype*)
+ 
+-UMLStereotypeWidget::UMLStereotypeWidget(UMLObject *object, QWidget *parent)
+-    : QWidget(parent),
+-      m_object(object)
+-{
+-    Q_ASSERT(m_object);
+-    init();
++UMLStereotypeWidget::UMLStereotypeWidget(QWidget *parent)
++    : QWidget(parent)
++{    
+ }
+ 
+ UMLStereotypeWidget::~UMLStereotypeWidget()
+@@ -39,6 +36,12 @@ UMLStereotypeWidget::~UMLStereotypeWidget()
+     delete m_label;
+ }
+ 
++void UMLStereotypeWidget::setUMLObject(UMLObject *o)
++{
++    m_object = o;
++    init();
++}
++
+ /**
+  * Set state if stereotypes could be edited. By default stereotypes could be edited.
+  * @param state edit state
+diff --git a/umbrello/dialogs/widgets/umlstereotypewidget.h b/umbrello/dialogs/widgets/umlstereotypewidget.h
+index 8a936cf2640debfe19fc11ea5c81243afa2f7274..a68a28f630917921b6a3aea5e2489f492a64d0bb 100644
+--- a/umbrello/dialogs/widgets/umlstereotypewidget.h
++++ b/umbrello/dialogs/widgets/umlstereotypewidget.h
+@@ -24,13 +24,15 @@ class QLabel;
+ class UMLStereotypeWidget : public QWidget
+ {
+ public:
+-    explicit UMLStereotypeWidget(UMLObject *object, QWidget *parent=0);
++    explicit UMLStereotypeWidget(QWidget *parent=0);
+     ~UMLStereotypeWidget();
+ 
++    void setUMLObject(UMLObject *o);
+     void setEditable(bool state);
+     void addToLayout(QGridLayout *layout, int row);
+     void apply();
+ 
++
+ protected:
+     QLabel *m_label;
+     KComboBox *m_comboBox;
+diff --git a/umbrello/dialogs/widgets/umltypemodifierwidget.cpp b/umbrello/dialogs/widgets/umltypemodifierwidget.cpp
+new file mode 100644
+index 0000000000000000000000000000000000000000..77c7278538ddb2491cd74c5120ff8e429d1414f7
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypemodifierwidget.cpp
+@@ -0,0 +1,54 @@
++/***************************************************************************
++ *   This program is free software; you can redistribute it and/or modify  *
++ *   it under the terms of the GNU General Public License as published by  *
++ *   the Free Software Foundation; either version 2 of the License, or     *
++ *   (at your option) any later version.                                   *
++ *                                                                         *
++ *   copyright (C) 2016                                                    *
++ *   Umbrello UML Modeller Authors <umbrello-devel@kde.org>                *
++ ***************************************************************************/
++#include "umltypemodifierwidget.h"
++#include "classifierlistitem.h"
++#include "uml.h"
++
++#include <KLocalizedString>
++
++UMLTypeModifierWidget::UMLTypeModifierWidget(QWidget *parent)
++    :QWidget(parent),
++      m_typeModifier(nullptr)
++{
++    m_texts[Uml::TypeModifiers::None] = i18nc("none", "None");
++    m_texts[Uml::TypeModifiers::Pointer] = i18nc("pointer type", "*");
++    m_texts[Uml::TypeModifiers::Reference] = i18nc("reference type", "&");
++    init(i18n("Type Modifiers:"));
++
++}
++
++void UMLTypeModifierWidget::apply()
++{
++    QString currData = m_typeCB->currentText();
++    Uml::TypeModifiers::Enum key = m_texts.key(currData);
++    if(m_typeModifier)
++        m_typeModifier->setModifier(key);
++}
++
++void UMLTypeModifierWidget::setUMLClassifierItem(UMLClassifierListItem *o)
++{
++    Q_ASSERT(o);
++    m_typeModifier = o;
++}
++
++void UMLTypeModifierWidget::init(const QString &title)
++{
++    auto layout = new QHBoxLayout;
++    auto label = new QLabel(title);
++    layout->addWidget(label);
++    m_typeCB = new QComboBox();
++
++    foreach (const auto &text, m_texts) {
++        m_typeCB->addItem(text);
++    }
++
++    layout->addWidget(m_typeCB);
++    setLayout(layout);
++}
+diff --git a/umbrello/dialogs/widgets/umltypemodifierwidget.h b/umbrello/dialogs/widgets/umltypemodifierwidget.h
+new file mode 100644
+index 0000000000000000000000000000000000000000..4dfee8038b7d1195051fd83934c3e828f65dd294
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypemodifierwidget.h
+@@ -0,0 +1,38 @@
++/***************************************************************************
++ *   This program is free software; you can redistribute it and/or modify  *
++ *   it under the terms of the GNU General Public License as published by  *
++ *   the Free Software Foundation; either version 2 of the License, or     *
++ *   (at your option) any later version.                                   *
++ *                                                                         *
++ *   copyright (C) 2016                                                    *
++ *   Umbrello UML Modeller Authors <umbrello-devel@kde.org>                *
++ ***************************************************************************/
++#ifndef UMLTYPEMODIFIERWIDGET_H
++#define UMLTYPEMODIFIERWIDGET_H
++
++#include <QtWidgets>
++
++#include "basictypes.h"
++
++class UMLClassifierListItem;
++
++class UMLTypeModifierWidget : public QWidget
++{
++    Q_OBJECT
++public:
++    explicit UMLTypeModifierWidget(QWidget *parent = 0);
++
++    void apply();
++
++    void setUMLClassifierItem(UMLClassifierListItem *o);
++
++private:
++    void init(const QString &title);
++    typedef QMap<Uml::TypeModifiers::Enum,QString> TextMap;
++    TextMap m_texts;
++    UMLClassifierListItem *m_typeModifier;
++    QComboBox *m_typeCB;
++
++};
++
++#endif // UMLTYPEMODIFIERWIDGET_H
+diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.cpp b/umbrello/dialogs/widgets/umltypequalifierswidget.cpp
+new file mode 100644
+index 0000000000000000000000000000000000000000..a2b9e5ec445ca8d7c333815a91b343b24fd60d0c
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypequalifierswidget.cpp
+@@ -0,0 +1,80 @@
++/***************************************************************************
++ *   This program is free software; you can redistribute it and/or modify  *
++ *   it under the terms of the GNU General Public License as published by  *
++ *   the Free Software Foundation; either version 2 of the License, or     *
++ *   (at your option) any later version.                                   *
++ *                                                                         *
++ *   copyright (C) 2016                                                    *
++ *   Umbrello UML Modeller Authors <umbrello-devel@kde.org>                *
++ ***************************************************************************/
++#include "umltypequalifierswidget.h"
++#include "classifierlistitem.h"
++#include "uml.h"
++#include "basictypes.h"
++
++#include <KLocalizedString>
++
++UmlTypeQualifiersWidget::UmlTypeQualifiersWidget(QWidget *parent)
++    :QWidget(parent),
++    ui(new Ui::UMLTypeQualifiersWidget),
++    m_typeQualifier(nullptr)
++{
++    ui->setupUi(this);
++    //Using some connects with lambda to control the widgets
++    connect(ui->rb_none, &QRadioButton::clicked, [=]{
++        if(ui->rb_none->isChecked()){
++            ui->rb_mutable->setEnabled(true);
++            ui->ck_const->setEnabled(true);
++            ui->ck_volatile->setEnabled(true);
++        }
++    });
++
++    connect(ui->rb_mutable, &QRadioButton::clicked, [=]{
++        if(ui->rb_mutable->isChecked()){
++            ui->ck_const->setDisabled(true);
++            ui->ck_volatile->setDisabled(true);
++        }
++    });
++    connect(ui->ck_const, &QCheckBox::clicked, [=]{
++        if(ui->ck_const->isChecked() || ui->ck_volatile->isChecked()){
++            ui->rb_mutable->setDisabled(true);
++            ui->rb_none->setDisabled(true);
++            ui->rb_none->setChecked(false);
++        }
++        else{
++            ui->rb_mutable->setDisabled(false);
++            ui->rb_none->setDisabled(false);
++        }
++    });
++    connect(ui->ck_volatile, &QCheckBox::clicked, [=]{
++       if(ui->ck_volatile->isChecked() || ui->ck_const->isChecked()){
++           ui->rb_mutable->setDisabled(true);
++           ui->rb_none->setDisabled(true);
++           ui->rb_none->setChecked(false);
++       }
++       else{
++           ui->rb_mutable->setDisabled(false);
++           ui->rb_none->setDisabled(false);
++       }
++    });
++}
++
++void UmlTypeQualifiersWidget::apply()
++{
++    if(ui->ck_const->isChecked() && ui->ck_volatile->isChecked())
++        m_typeQualifier->setQualifier(Uml::TypeQualifiers::ConstVolatile);
++    else if(ui->rb_none->isChecked())
++        m_typeQualifier->setQualifier(Uml::TypeQualifiers::None);
++    else if(ui->ck_const->isChecked())
++        m_typeQualifier->setQualifier(Uml::TypeQualifiers::Const);
++    else if(ui->rb_mutable->isChecked())
++        m_typeQualifier->setQualifier(Uml::TypeQualifiers::Mutable);
++    else if(ui->ck_volatile->isChecked())
++        m_typeQualifier->setQualifier(Uml::TypeQualifiers::Volatile);
++}
++
++void UmlTypeQualifiersWidget::setUMLClassifierItem(UMLClassifierListItem *o)
++{
++    Q_ASSERT(o);
++    m_typeQualifier = o;
++}
+diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.h b/umbrello/dialogs/widgets/umltypequalifierswidget.h
+new file mode 100644
+index 0000000000000000000000000000000000000000..b14f266840d2630c701d25a7841c3d57025a973d
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypequalifierswidget.h
+@@ -0,0 +1,36 @@
++/***************************************************************************
++ *   This program is free software; you can redistribute it and/or modify  *
++ *   it under the terms of the GNU General Public License as published by  *
++ *   the Free Software Foundation; either version 2 of the License, or     *
++ *   (at your option) any later version.                                   *
++ *                                                                         *
++ *   copyright (C) 2016                                                    *
++ *   Umbrello UML Modeller Authors <umbrello-devel@kde.org>                *
++ ***************************************************************************/
++#ifndef UMLTYPEQUALIFIERSWIDGET_H
++#define UMLTYPEQUALIFIERSWIDGET_H
++
++#include "ui_umltypequalifierswidget.h"
++#include <QtWidgets>
++#include <QMap>
++
++class UMLClassifierListItem;
++
++class UmlTypeQualifiersWidget : public QWidget
++{
++    Q_OBJECT
++
++public:
++    explicit UmlTypeQualifiersWidget(QWidget *parent = 0);
++
++    void apply();
++    void setUMLClassifierItem(UMLClassifierListItem *o);
++
++private:
++
++    Ui::UMLTypeQualifiersWidget *ui;
++    UMLClassifierListItem *m_typeQualifier;
++
++};
++
++#endif // UMLTYPEQUALIFIERSWIDGET_H
+diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.ui b/umbrello/dialogs/widgets/umltypequalifierswidget.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..cb41c5b55b774dad7b5d7af435a015d676855f3f
+--- /dev/null
++++ b/umbrello/dialogs/widgets/umltypequalifierswidget.ui
+@@ -0,0 +1,58 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>UMLTypeQualifiersWidget</class>
++ <widget class="QWidget" name="UMLTypeQualifiersWidget">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>316</width>
++    <height>97</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout">
++   <item>
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>Type Qualifiers</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout">
++      <item row="0" column="0">
++       <widget class="QRadioButton" name="rb_none">
++        <property name="text">
++         <string>None</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="0">
++       <widget class="QRadioButton" name="rb_mutable">
++        <property name="text">
++         <string>&amp;Mutable</string>
++        </property>
++       </widget>
++      </item>
++      <item row="0" column="1">
++       <widget class="QCheckBox" name="ck_const">
++        <property name="text">
++         <string>Const</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="1">
++       <widget class="QCheckBox" name="ck_volatile">
++        <property name="text">
++         <string>Volatile</string>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++  </layout>
++ </widget>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.cpp b/umbrello/dialogs/widgets/visibilityenumwidget.cpp
+index b453808edb2d6f0999126ab2327d6d9a90c5b2e7..5aa1554e479259b8471cc0c6ce49ed4c7f832790 100644
+--- a/umbrello/dialogs/widgets/visibilityenumwidget.cpp
++++ b/umbrello/dialogs/widgets/visibilityenumwidget.cpp
+@@ -20,20 +20,17 @@
+ #include <QGroupBox>
+ #include <QRadioButton>
+ 
+-VisibilityEnumWidget::VisibilityEnumWidget(UMLObject *o, QWidget *parent)
+-    : QWidget(parent),
+-      m_object(o),
+-      m_widget(0),
+-      m_role(Uml::RoleType::A)
++VisibilityEnumWidget::VisibilityEnumWidget(QWidget *parent)
++    :QWidget(parent),
++     m_widget(0),
++     ui(new Ui::visibilityEnumWidget),
++     m_role(Uml::RoleType::A)
+ {
+-    Q_ASSERT(o);
+-
+     m_texts[Uml::Visibility::Public] = i18nc("public visibility", "P&ublic");
+     m_texts[Uml::Visibility::Protected] = i18nc("protected visibility", "Pro&tected");
+     m_texts[Uml::Visibility::Private] = i18nc("private visibility", "P&rivate");
+     m_texts[Uml::Visibility::Implementation] = i18n("Imple&mentation");
+-    init(i18n("Visibility"));
+-    m_buttons[m_object->visibility()]->setChecked(true);
++    ui->setupUi(this);
+ }
+ 
+ VisibilityEnumWidget::VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::Enum role, QWidget *parent)
+@@ -47,15 +44,13 @@ VisibilityEnumWidget::VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::
+         m_texts[Uml::Visibility::Protected] = i18nc("scope for A is protected", "Protected");
+         m_texts[Uml::Visibility::Private] = i18nc("scope for A is private", "Private");
+         m_texts[Uml::Visibility::Implementation] = i18nc("scope for A is implementation", "Implementation");
+-        init(i18n("Role A Visibility"));
+     } else {
+         m_texts[Uml::Visibility::Public] = i18nc("scope for B is public", "Public");
+         m_texts[Uml::Visibility::Protected] = i18nc("scope for B is protected", "Protected");
+         m_texts[Uml::Visibility::Private] = i18nc("scope for B is private", "Private");
+         m_texts[Uml::Visibility::Implementation] = i18nc("scope for B is implementation", "Implementation");
+-        init(i18n("Role B Visibility"));
+     }
+-    m_buttons[a->visibility(role)]->setChecked(true);
++    //m_buttons[a->visibility(role)]->setChecked(true);
+ }
+ 
+ VisibilityEnumWidget::~VisibilityEnumWidget()
+@@ -63,13 +58,33 @@ VisibilityEnumWidget::~VisibilityEnumWidget()
+     // nothing here, parenting makes sure that all objects are destroyed
+ }
+ 
++void VisibilityEnumWidget::setUMLObject(UMLObject *o)
++{
++    m_object = o;
++    switch (m_object->visibility()) {
++    case Uml::Visibility::Public:
++            ui->rb_public->setChecked(true);
++        break;
++    case Uml::Visibility::Protected:
++        ui->rb_protected->setChecked(true);
++        break;
++    case Uml::Visibility::Private:
++        ui->rb_protected->setChecked(true);
++        break;
++    case Uml::Visibility::Implementation:
++        ui->rb_implementation->setChecked(true);
++        break;
++    }
++}
++
+ /**
+  * Add this widget to a given layout.
+  * @param layout The layout to which the widget should be added
+  */
++//TODO: REMOVE THIS METHOD AFTER FIX CLASS GENERAL PAGE
+ void VisibilityEnumWidget::addToLayout(QVBoxLayout *layout)
+ {
+-    layout->addWidget(m_box);
++    //layout->addWidget(m_box);
+ }
+ 
+ /**
+@@ -77,34 +92,13 @@ void VisibilityEnumWidget::addToLayout(QVBoxLayout *layout)
+  */
+ void VisibilityEnumWidget::apply()
+ {
+-    for(ButtonMap::const_iterator i = m_buttons.constBegin(); i != m_buttons.constEnd(); ++i) {
+-        if (i.value()->isChecked()) {
+-            if (m_object)
+-                m_object->setVisibility(i.key());
+-            else
+-                m_widget->setVisibility(i.key(), m_role);
+-        }
+-    }
++    if(ui->rb_public->isChecked())
++        m_object->setVisibility(Uml::Visibility::Public);
++    else if(ui->rb_protected->isChecked())
++        m_object->setVisibility(Uml::Visibility::Protected);
++    else if(ui->rb_private->isChecked())
++        m_object->setVisibility(Uml::Visibility::Private);
++    else
++        m_object->setVisibility(Uml::Visibility::Implementation);
+ }
+ 
+-void VisibilityEnumWidget::init(const QString &title)
+-{
+-    QHBoxLayout *layout = new QHBoxLayout;
+-    layout->setContentsMargins(0,0,0,0);
+-
+-    m_box = new QGroupBox(title, this);
+-    QHBoxLayout* boxlayout = new QHBoxLayout(m_box);
+-    int margin = fontMetrics().height();
+-    boxlayout->setMargin(margin);
+-    QList<Uml::Visibility::Enum> orders;
+-    orders << Uml::Visibility::Public << Uml::Visibility::Protected << Uml::Visibility::Private << Uml::Visibility::Implementation;
+-
+-    for(QList<Uml::Visibility::Enum>::const_iterator i = orders.constBegin(); i != orders.constEnd(); ++i) {
+-        Uml::Visibility::Enum key = *i;
+-        QRadioButton *button = new QRadioButton(m_texts[key], m_box);
+-        m_buttons[key] = button;
+-        boxlayout->addWidget(button);
+-    }
+-    layout->addWidget(m_box);
+-    setLayout(layout);
+-}
+diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.h b/umbrello/dialogs/widgets/visibilityenumwidget.h
+index 477b81eea96496a498789f5a64629941253671a9..6be9c94957908eb275e4a73708e6630f0f2aab76 100644
+--- a/umbrello/dialogs/widgets/visibilityenumwidget.h
++++ b/umbrello/dialogs/widgets/visibilityenumwidget.h
+@@ -12,7 +12,7 @@
+ #define VISIBILITYENUMWIDGET_H
+ 
+ #include "basictypes.h"
+-
++#include "ui_visibilityenumwidget.h"
+ #include <QMap>
+ #include <QWidget>
+ 
+@@ -28,24 +28,23 @@ class VisibilityEnumWidget : public QWidget
+     Q_OBJECT
+ public:
+     typedef QMap<Uml::Visibility::Enum,QString> TextMap;
+-    typedef QMap<Uml::Visibility::Enum,QRadioButton*> ButtonMap;
+ 
+-    explicit VisibilityEnumWidget(UMLObject *o, QWidget *parent=0);
++    explicit VisibilityEnumWidget(QWidget *parent=0);
+     VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::Enum role, QWidget *parent=0);
+     ~VisibilityEnumWidget();
+ 
++    void setUMLObject(UMLObject *o);
+     void addToLayout(QVBoxLayout *layout);
+     void apply();
+ 
++private:
++    Ui::visibilityEnumWidget *ui;
++
+ protected:
+     TextMap m_texts;
+-    QGroupBox *m_box;
+-    ButtonMap m_buttons;
+     UMLObject *m_object;
+     AssociationWidget *m_widget;
+     Uml::RoleType::Enum m_role;
+-
+-    void init(const QString &title);
+ };
+ 
+ #endif // VISIBILITYENUMWIDGET_H
+diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.ui b/umbrello/dialogs/widgets/visibilityenumwidget.ui
+new file mode 100644
+index 0000000000000000000000000000000000000000..5a42fb6f0fa148fef6f7afa02bdbd126f0d78d8a
+--- /dev/null
++++ b/umbrello/dialogs/widgets/visibilityenumwidget.ui
+@@ -0,0 +1,58 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<ui version="4.0">
++ <class>visibilityEnumWidget</class>
++ <widget class="QWidget" name="visibilityEnumWidget">
++  <property name="geometry">
++   <rect>
++    <x>0</x>
++    <y>0</y>
++    <width>252</width>
++    <height>97</height>
++   </rect>
++  </property>
++  <property name="windowTitle">
++   <string>Form</string>
++  </property>
++  <layout class="QVBoxLayout" name="verticalLayout">
++   <item>
++    <widget class="QGroupBox" name="groupBox">
++     <property name="title">
++      <string>Visibility</string>
++     </property>
++     <layout class="QGridLayout" name="gridLayout">
++      <item row="0" column="0">
++       <widget class="QRadioButton" name="rb_public">
++        <property name="text">
++         <string>Pub&amp;lic</string>
++        </property>
++       </widget>
++      </item>
++      <item row="0" column="1">
++       <widget class="QRadioButton" name="rb_private">
++        <property name="text">
++         <string>Pri&amp;vate</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="0">
++       <widget class="QRadioButton" name="rb_protected">
++        <property name="text">
++         <string>Protected</string>
++        </property>
++       </widget>
++      </item>
++      <item row="1" column="1">
++       <widget class="QRadioButton" name="rb_implementation">
++        <property name="text">
++         <string>I&amp;mplementation</string>
++        </property>
++       </widget>
++      </item>
++     </layout>
++    </widget>
++   </item>
++  </layout>
++ </widget>
++ <resources/>
++ <connections/>
++</ui>
+diff --git a/umbrello/umlmodel/classifierlistitem.cpp b/umbrello/umlmodel/classifierlistitem.cpp
+index 5c997e309041c27e156c3df8a36fa6990669d01e..24a42f233748c3b0d99f8aa92340fc431aa7df9d 100644
+--- a/umbrello/umlmodel/classifierlistitem.cpp
++++ b/umbrello/umlmodel/classifierlistitem.cpp
+@@ -80,6 +80,33 @@ void UMLClassifierListItem::copyInto(UMLObject *lhs) const
+     UMLObject::copyInto(lhs);
+ }
+ 
++void UMLClassifierListItem::setQualifier(Uml::TypeQualifiers::Enum qualifier)
++{
++    if(m_typeQualifier != qualifier){
++        m_typeQualifier = qualifier;
++        UMLObject::emitModified();
++    }
++
++}
++
++Uml::TypeQualifiers::Enum UMLClassifierListItem::qualifier() const
++{
++    return m_typeQualifier;
++}
++
++void UMLClassifierListItem::setModifier(Uml::TypeModifiers::Enum modifier)
++{
++    if(m_typeModifier != modifier){
++        m_typeModifier = modifier;
++        UMLObject::emitModified();
++    }
++}
++
++Uml::TypeModifiers::Enum UMLClassifierListItem::modifier() const
++{
++    return m_typeModifier;
++}
++
+ /**
+  * Returns a string representation of the list item.
+  *
+diff --git a/umbrello/umlmodel/classifierlistitem.h b/umbrello/umlmodel/classifierlistitem.h
+index 518aa7fe3ec078b2b85b95ed0802daa5a6d351e0..3fa356dae375a4202080e60acaab42fa234637f3 100644
+--- a/umbrello/umlmodel/classifierlistitem.h
++++ b/umbrello/umlmodel/classifierlistitem.h
+@@ -53,6 +53,15 @@ public:
+      */
+     virtual UMLObject* clone() const = 0;
+ 
++    //TypeQualifiers Methods
++    virtual void setQualifier(Uml::TypeQualifiers::Enum qualifier);
++    //virtual void setQualifierCmd(Uml::TypeQualifiers::Enum qualifier);
++    virtual Uml::TypeQualifiers::Enum qualifier() const;
++
++    //TypeModifiers Methods
++    virtual void setModifier(Uml::TypeModifiers::Enum modifier);
++    virtual Uml::TypeModifiers::Enum modifier() const;
++
+ };
+ 
+ #endif
+diff --git a/umbrello/umlmodel/umlobject.h b/umbrello/umlmodel/umlobject.h
+index 66282b035faa5e3d8ba4655d85a2737e4b9f4dc9..1a33052be5c89fab43634baf1f6fffd862c40781 100644
+--- a/umbrello/umlmodel/umlobject.h
++++ b/umbrello/umlmodel/umlobject.h
+@@ -176,6 +176,8 @@ protected:
+     QString                m_name;         ///< objects name
+     ObjectType             m_BaseType;     ///< objects type
+     Uml::Visibility::Enum  m_visibility;   ///< objects visibility
++    Uml::TypeQualifiers::Enum m_typeQualifier; ///< object qualifier
++    Uml::TypeModifiers::Enum m_typeModifier; ///< object modifier
+     bool                   m_bAbstract;    ///< state of whether the object is abstract or not
+     bool                   m_bStatic;      ///< flag for instance scope
+     bool                   m_bInPaste;     ///< caller sets this true when in paste operation
+
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index fb1eeb3c649de021f4a80540bd098cabf6545c04..7debae0796167bdc63892323c3159d0a67c4fcf5 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -1,18 +1,10 @@
-
-if(NOT BUILD_KF5)
-    set(LIBS Qt4::QtXml Qt4::QtCore)
-else()
-    set(LIBS Qt5::Xml Qt5::Core)
-endif()
-
+set(LIBS Qt5::Xml Qt5::Core)
 set(po2xmi_SRCS po2xmi.cpp shared.cpp)
-
 ecm_add_executable(po2xmi ${po2xmi_SRCS})
 target_link_libraries(po2xmi ${LIBS})
 
 install(TARGETS po2xmi  ${INSTALL_TARGETS_DEFAULT_ARGS})
 
-
 set(xmi2pot_SRCS xmi2pot.cpp shared.cpp)
 
 ecm_add_executable(xmi2pot ${xmi2pot_SRCS})
diff --git a/umbrello/CMakeLists.txt b/umbrello/CMakeLists.txt
index 10cd5a39f7c212666922ad0ca29dc6f578ab3ed4..223ec9ef6d9098c07a22b369cc48b6299f2f5991 100644
--- a/umbrello/CMakeLists.txt
+++ b/umbrello/CMakeLists.txt
@@ -507,75 +507,49 @@ set(umbrello_SRCS
 
 set(LIB_BUILD_MODE STATIC)
 
-if(NOT BUILD_KF5)
-    kde4_add_library(libumbrello ${LIB_BUILD_MODE} ${libumbrello_SRCS})
-    set_target_properties(libumbrello PROPERTIES OUTPUT_NAME umbrello)
-    target_link_libraries(libumbrello
-        Qt4::QtCore
-        Qt4::QtGui
-        Qt4::QtXml
-        ${LIBXML2_LIBRARIES}
-        ${LIBXSLT_LIBRARIES}
-        ${KDE4_KTEXTEDITOR_LIBS}
-        ${KDE4_KFILE_LIBS}
-    )
-    kde4_add_app_icon(umbrello_SRCS "${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi*-apps-umbrello.png")
-    kde4_add_executable(umbrello ${umbrello_SRCS})
-    target_link_libraries(umbrello ${LIBXML2_LIBRARIES} ${LIBXSLT_LIBRARIES} ${KDE4_KTEXTEDITOR_LIBS} ${KDE4_KFILE_LIBS} libumbrello)
-else()
-    add_library(libumbrello ${LIB_BUILD_MODE} ${libumbrello_SRCS})
-    set_target_properties(libumbrello PROPERTIES OUTPUT_NAME umbrello)
-    target_link_libraries(libumbrello
-        Qt5::Widgets
-        Qt5::Xml
-        Qt5::PrintSupport
-        Qt5::Svg
-        KF5::Archive
-        KF5::Completion
-        KF5::CoreAddons
-        KF5::I18n
-        KF5::IconThemes
-        KF5::KIOCore
-        KF5::TextEditor
-        KF5::WidgetsAddons
-        KF5::XmlGui
-        ${LIBXSLT_LIBRARIES}
-        ${LIBXML2_LIBRARIES}
-    )
-    ecm_add_app_icon(umbrello_SRCS
-        ICONS
-        ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi16-apps-umbrello.png
-        ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi22-apps-umbrello.png
-        ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi32-apps-umbrello.png
-        ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi48-apps-umbrello.png
-        ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi64-apps-umbrello.png
-        ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi128-apps-umbrello.png
-    )
-    add_executable(umbrello ${umbrello_SRCS})
-    target_link_libraries(umbrello libumbrello)
-endif()
+add_library(libumbrello ${LIB_BUILD_MODE} ${libumbrello_SRCS})
+set_target_properties(libumbrello PROPERTIES OUTPUT_NAME umbrello)
+target_link_libraries(libumbrello
+    Qt5::Widgets
+    Qt5::Xml
+    Qt5::PrintSupport
+    Qt5::Svg
+    KF5::Archive
+    KF5::Completion
+    KF5::CoreAddons
+    KF5::I18n
+    KF5::IconThemes
+    KF5::KIOCore
+    KF5::TextEditor
+    KF5::WidgetsAddons
+    KF5::XmlGui
+    ${LIBXSLT_LIBRARIES}
+    ${LIBXML2_LIBRARIES}
+)
+ecm_add_app_icon(umbrello_SRCS
+    ICONS
+    ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi16-apps-umbrello.png
+    ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi22-apps-umbrello.png
+    ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi32-apps-umbrello.png
+    ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi48-apps-umbrello.png
+    ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi64-apps-umbrello.png
+    ${CMAKE_CURRENT_SOURCE_DIR}/pics/global/hi128-apps-umbrello.png
+)
+add_executable(umbrello ${umbrello_SRCS})
+target_link_libraries(umbrello libumbrello)
+
 if(LIB_BUILD_MODE EQUAL SHARED)
     install(TARGETS libumbrello ${INSTALL_TARGETS_DEFAULT_ARGS} )
 endif()
 install(TARGETS umbrello ${INSTALL_TARGETS_DEFAULT_ARGS} )
 
 ########### install files #############
-
-if(NOT BUILD_KF5)
-    install( PROGRAMS umbrello.desktop  DESTINATION  ${XDG_APPS_INSTALL_DIR} )
-    install( FILES
-        umbrelloui.rc
-        DESTINATION ${DATA_INSTALL_DIR}/umbrello )
-else()
-    file(READ umbrello.desktop UMBRELLO_DESKTOP)
-    string(REPLACE "-caption" "-qwindowtitle" UMBRELLO_DESKTOP_OUT "${UMBRELLO_DESKTOP}")
-    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/umbrello.desktop "${UMBRELLO_DESKTOP_OUT}")
-    install( PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/umbrello.desktop  DESTINATION  ${XDG_APPS_INSTALL_DIR} RENAME org.kde.umbrello.desktop)
-    install( FILES org.kde.umbrello.appdata.xml  DESTINATION  ${CMAKE_INSTALL_METAINFODIR})
-    install( FILES
-        umbrelloui.rc
-        DESTINATION ${KXMLGUI_INSTALL_DIR}/umbrello )
-endif()
+file(READ umbrello.desktop UMBRELLO_DESKTOP)
+string(REPLACE "-caption" "-qwindowtitle" UMBRELLO_DESKTOP_OUT "${UMBRELLO_DESKTOP}")
+file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/umbrello.desktop "${UMBRELLO_DESKTOP_OUT}")
+install( PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/umbrello.desktop  DESTINATION  ${XDG_APPS_INSTALL_DIR} RENAME org.kde.umbrello.desktop)
+install( FILES org.kde.umbrello.appdata.xml  DESTINATION  ${CMAKE_INSTALL_METAINFODIR})
+install( FILES umbrelloui.rc DESTINATION ${KXMLGUI_INSTALL_DIR}/umbrello )
 
 install( FILES
     docgenerators/xmi2docbook.xsl
diff --git a/umbrello/basictypes.cpp b/umbrello/basictypes.cpp
index 85d819201593897d2068dde4aeafb434e3927008..2c9097730ac8c74426779ab215637dd38842a8a7 100644
--- a/umbrello/basictypes.cpp
+++ b/umbrello/basictypes.cpp
@@ -23,14 +23,8 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <KGlobalSettings>
-#endif
-
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QFontDatabase>
-#endif
 #include <QRegExp>
 
 namespace Uml
@@ -1157,11 +1151,7 @@ ID::Type fromString(const QString &id)
 
 QFont systemFont()
 {
-#if QT_VERSION >= 0x050000
     return QFontDatabase::systemFont(QFontDatabase::GeneralFont);
-#else
-    return KGlobalSettings::generalFont();
-#endif
 }
 
 }  // end namespace Uml
diff --git a/umbrello/cmdlineexportallviewsevent.cpp b/umbrello/cmdlineexportallviewsevent.cpp
index c546634c388d71ad0a4e88433b4c985f7083dac9..0a34b435593cd805ff117946313ba41a0bfba831 100644
--- a/umbrello/cmdlineexportallviewsevent.cpp
+++ b/umbrello/cmdlineexportallviewsevent.cpp
@@ -17,15 +17,8 @@
 #include "umldoc.h"
 #include "umlviewimageexportermodel.h"
 
-// kde includes
-#if QT_VERSION < 0x050000
-#include <kapplication.h>
-#endif
-
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QApplication>
-#endif
 #include <QCloseEvent>
 #include <QStringList>
 
@@ -79,10 +72,5 @@ void CmdLineExportAllViewsEvent::exportAllViews()
             uError() << *it;
         }
     }
-
-#if QT_VERSION >= 0x050000
     qApp->quit();
-#else
-    kapp->quit();
-#endif
 }
diff --git a/umbrello/codegenerators/codegenerationpolicy.cpp b/umbrello/codegenerators/codegenerationpolicy.cpp
index 424afbec3a903c1eb991e1583679dd961d2b30e9..c90d32ab7358ff0aec2b8b8a0437ed5802625934 100644
--- a/umbrello/codegenerators/codegenerationpolicy.cpp
+++ b/umbrello/codegenerators/codegenerationpolicy.cpp
@@ -21,16 +21,11 @@
 
 // kde includes
 #include <kconfig.h>
-#if QT_VERSION < 0x050000
-#include <kstandarddirs.h>
-#endif
 
 // qt includes
 #include <QDateTime>
 #include <QRegExp>
-#if QT_VERSION >= 0x050000
 #include <QStandardPaths>
-#endif
 #include <QStringList>
 #include <QTextStream>
 
@@ -481,14 +476,9 @@ void CodeGenerationPolicy::setDefaults(bool emitUpdateSignal)
 
     path = UmbrelloSettings::headingsDirectory();
     if (path.isEmpty()) {
-#if QT_VERSION >= 0x050000
         path =  QStandardPaths::locateAll(QStandardPaths::GenericDataLocation,
                                           QLatin1String("umbrello/headings"),
                                           QStandardPaths::LocateDirectory).first();
-#else
-        KStandardDirs stddirs;
-        path =  stddirs.findDirs("data", QLatin1String("umbrello/headings")).first();
-#endif
     }
     setHeadingFileDir (path);
 
diff --git a/umbrello/codegenerators/codegenerator.cpp b/umbrello/codegenerators/codegenerator.cpp
index 7592b9d3250181ba661e2332560b1f655d03c452..3b7a1450fda3c9bb655322b08a899e701228583c 100644
--- a/umbrello/codegenerators/codegenerator.cpp
+++ b/umbrello/codegenerators/codegenerator.cpp
@@ -443,11 +443,7 @@ QString CodeGenerator::overwritableName(const QString& name, const QString &exte
         break;
     case CodeGenerationPolicy::Ask:            //ask if we can overwrite
         switch(overwriteDialog->exec()) {
-#if QT_VERSION >= 0x050000
         case OverwriteDialog::Ok:  //overwrite file
-#else
-        case QDialog::Accepted:
-#endif
             if (overwriteDialog->applyToAllRemaining()) {
                 pol->setOverwritePolicy(CodeGenerationPolicy::Ok);
                 filename = name + extension;
@@ -456,11 +452,7 @@ QString CodeGenerator::overwritableName(const QString& name, const QString &exte
                 m_applyToAllRemaining = false;
             }
             break;
-#if QT_VERSION >= 0x050000
         case OverwriteDialog::No: //generate similar name
-#else
-        case KDialog::No:
-#endif
             suffix = 1;
             while (1) {
                 filename = name + QLatin1String("__") + QString::number(suffix) + extension;
@@ -475,11 +467,7 @@ QString CodeGenerator::overwritableName(const QString& name, const QString &exte
                 m_applyToAllRemaining = false;
             }
             break;
-#if QT_VERSION >= 0x050000
         case OverwriteDialog::Cancel: //don't output anything
-#else
-        case QDialog::Rejected:
-#endif
             if (overwriteDialog->applyToAllRemaining()) {
                 pol->setOverwritePolicy(CodeGenerationPolicy::Cancel);
             }
diff --git a/umbrello/codegenerators/cpp/cppcodegenerationform.cpp b/umbrello/codegenerators/cpp/cppcodegenerationform.cpp
index f1998ab916ed91a5cab89f47ddc7490d9bc94670..655f38fc2d64d983bbdd3971a88260b5a0181e7e 100644
--- a/umbrello/codegenerators/cpp/cppcodegenerationform.cpp
+++ b/umbrello/codegenerators/cpp/cppcodegenerationform.cpp
@@ -12,17 +12,12 @@
 #include "cppcodegenerationform.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kfiledialog.h>
-#endif
 #include <KLocalizedString>
 #include <kcombobox.h>
 #include <KMessageBox>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QFileDialog>
-#endif
 #include <QLabel>
 #include <QListWidget>
 #include <QRegExp>
@@ -87,11 +82,7 @@ CPPCodeGenerationForm::~CPPCodeGenerationForm()
 void CPPCodeGenerationForm::browseClicked()
 {
     QString button = sender()->objectName();
-#if QT_VERSION >= 0x050000
     QString file = QFileDialog::getOpenFileName(this, QLatin1String("Get Header File"), QString(), QLatin1String("*.h"));
-#else
-    QString file = KFileDialog::getOpenFileName(KUrl(), QLatin1String("*.h"), this, QLatin1String("Get Header File"));
-#endif
     if (file.isEmpty()) {
         return;
     }
diff --git a/umbrello/codegenerators/simplecodegenerator.cpp b/umbrello/codegenerators/simplecodegenerator.cpp
index 762792cb97980e054e36348cfd6f15f128ab74c1..18ea3434eecdce25f2144ca5e2c28d3759df954c 100644
--- a/umbrello/codegenerators/simplecodegenerator.cpp
+++ b/umbrello/codegenerators/simplecodegenerator.cpp
@@ -26,9 +26,6 @@
 #include "uml.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kdialog.h>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
 
@@ -183,22 +180,14 @@ QString SimpleCodeGenerator::overwritableName(UMLPackage* concept, const QString
         break;
     case CodeGenerationPolicy::Ask:               //ask if we can overwrite
         switch(overwriteDialog->exec()) {
-#if QT_VERSION >= 0x050000
         case OverwriteDialog::Ok:  //overwrite file
-#else
-        case QDialog::Accepted:
-#endif
             if (overwriteDialog->applyToAllRemaining()) {
                 commonPolicy->setOverwritePolicy(CodeGenerationPolicy::Ok);
             } else {
                 m_applyToAllRemaining = false;
             }
             break;
-#if QT_VERSION >= 0x050000
         case OverwriteDialog::No: //generate similar name
-#else
-        case KDialog::No:
-#endif
             suffix = 1;
             while (1) {
                 filename = name + QLatin1String("__") + QString::number(suffix) + ext;
@@ -212,11 +201,7 @@ QString SimpleCodeGenerator::overwritableName(UMLPackage* concept, const QString
                 m_applyToAllRemaining = false;
             }
             break;
-#if QT_VERSION >= 0x050000
         case OverwriteDialog::Cancel: //don't output anything
-#else
-        case QDialog::Rejected:
-#endif
             if (overwriteDialog->applyToAllRemaining()) {
                 commonPolicy->setOverwritePolicy(CodeGenerationPolicy::Cancel);
             } else {
diff --git a/umbrello/codegenwizard/codegenoptionspage.cpp b/umbrello/codegenwizard/codegenoptionspage.cpp
index 4bdf00de2c789950f6fc74742844398b35afc149..55abd56427ffb539101e26ccf80b97f9421465a3 100644
--- a/umbrello/codegenwizard/codegenoptionspage.cpp
+++ b/umbrello/codegenwizard/codegenoptionspage.cpp
@@ -22,17 +22,11 @@
 #include "uml.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kfiledialog.h>
-#include <KIntSpinBox>
-#endif
 #include <KMessageBox>
 #include <KLocalizedString>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QFileDialog>
-#endif
 
 /**
  * Constructor.
@@ -322,11 +316,7 @@ void CodeGenOptionsPage::changeLanguage()
 void CodeGenOptionsPage::browseClicked()
 {
     QString button = sender()->objectName();
-#if QT_VERSION > 0x050000
     QString dir = QFileDialog::getExistingDirectory();
-#else
-    QString dir = KFileDialog::getExistingDirectory();
-#endif
     if (dir.isEmpty()) {
         return;
     }
diff --git a/umbrello/codegenwizard/codegenstatuspage.cpp b/umbrello/codegenwizard/codegenstatuspage.cpp
index b6d1fd1f82c944e9292686736267c94dfee12632..3980c648c237729cd61ae20f431e1038e70af1d0 100644
--- a/umbrello/codegenwizard/codegenstatuspage.cpp
+++ b/umbrello/codegenwizard/codegenstatuspage.cpp
@@ -26,17 +26,11 @@
 #include "umldoc.h"
 
 //kde includes
-#if QT_VERSION < 0x050000
-#include <kfiledialog.h>
-#include <KIntSpinBox>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
 
 //qt includes
-#if QT_VERSION >= 0x050000
 #include <QFileDialog>
-#endif
 #include <QListWidget>
 
 /**
@@ -214,11 +208,7 @@ void CodeGenStatusPage::loggerClear()
 void CodeGenStatusPage::loggerExport()
 {
     const QString caption = i18n("Umbrello Code Generation - Logger Export");
-#if QT_VERSION >= 0x050000
     QString fileName = QFileDialog::getSaveFileName(this, caption, QLatin1String("UmbrelloCodeGenerationLogger.html"));
-#else
-    QString fileName = KFileDialog::getSaveFileName(KUrl(), QString(), 0, caption);
-#endif
     if (!fileName.isEmpty()) {
         QFile file(fileName);
         if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
diff --git a/umbrello/codeimport/idlimport.cpp b/umbrello/codeimport/idlimport.cpp
index e9e138d0043bea0c495b9bac8f1e041afc76cad8..830eb4126af31b5a6542e4a725706c8f6ddab4b1 100644
--- a/umbrello/codeimport/idlimport.cpp
+++ b/umbrello/codeimport/idlimport.cpp
@@ -23,17 +23,10 @@
 #include "umldoc.h"
 #include "umlpackagelist.h"
 
-// kde includes
-#if QT_VERSION < 0x050000
-#include <KStandardDirs>
-#endif
-
 // qt includes
 #include <QProcess>
 #include <QRegExp>
-#if QT_VERSION >= 0x050000
 #include <QStandardPaths>
-#endif
 #include <QStringList>
 
 #include <stdio.h>
@@ -54,29 +47,17 @@ IDLImport::IDLImport(CodeImpThread* thread) : NativeImportBase(QLatin1String("//
     }
 
     QStringList arguments;
-#if QT_VERSION >= 0x050000
     QString executable = QStandardPaths::findExecutable(QLatin1String("cpp"));
-#else
-    QString executable = KStandardDirs::findExe(QLatin1String("cpp"));
-#endif
     if (!executable.isEmpty()) {
         arguments << QLatin1String("-C");   // -C means "preserve comments"
     }
 #ifdef Q_OS_WIN
     else {
-#if QT_VERSION >= 0x050000
         executable = QStandardPaths::findExecutable(QLatin1String("cl"));
-#else
-        executable = KStandardDirs::findExe(QLatin1String("cl"));
-#endif
         if (executable.isEmpty()) {
             QString path = QLatin1String(qgetenv("VS100COMNTOOLS").constData());
             if (!path.isEmpty())
-#if QT_VERSION >= 0x050000
                 executable = QStandardPaths::findExecutable(QLatin1String("cl"), QStringList() << path + QLatin1String("/../../VC/bin"));
-#else
-                executable = KStandardDirs::findExe(QLatin1String("cl"), path + QLatin1String("/../../VC/bin"));
-#endif
         }
         if (!executable.isEmpty()) {
             arguments << QLatin1String("-E");   // -E means "preprocess to stdout"
diff --git a/umbrello/codeimport/sqlimport.cpp b/umbrello/codeimport/sqlimport.cpp
index 8fc76f9fcad0e585abfe734950e56b1a869eed1b..02f738afc9f6143a935eec274202abb6bd559178 100644
--- a/umbrello/codeimport/sqlimport.cpp
+++ b/umbrello/codeimport/sqlimport.cpp
@@ -40,17 +40,10 @@
 #include "umldoc.h"
 #include "umlpackagelist.h"
 
-// kde includes
-#if QT_VERSION < 0x050000
-#include <KStandardDirs>
-#endif
-
 // qt includes
 #include <QProcess>
 #include <QRegExp>
-#if QT_VERSION >= 0x050000
 #include <QStandardPaths>
-#endif
 #include <QStringList>
 
 #include <stdio.h>
diff --git a/umbrello/codeimpwizard/codeimportingwizard.cpp b/umbrello/codeimpwizard/codeimportingwizard.cpp
index 4ed20c8bbc279ff9cdc549f0056c5249b8a86a03..b16223bbc04bcfda4bc20454f8ed4a1e49077789 100644
--- a/umbrello/codeimpwizard/codeimportingwizard.cpp
+++ b/umbrello/codeimpwizard/codeimportingwizard.cpp
@@ -27,10 +27,6 @@
 #include "uml.h"
 
 // kde includes
-#if QT_VERSION >= 0x050000
-#else
-#include <kdebug.h>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
 
diff --git a/umbrello/codeimpwizard/codeimpstatuspage.cpp b/umbrello/codeimpwizard/codeimpstatuspage.cpp
index 8916961e8ff87db0adf4c30eafc61b516303f3f8..5a1cf5426458671453e4722adc1e911cd5e7976b 100644
--- a/umbrello/codeimpwizard/codeimpstatuspage.cpp
+++ b/umbrello/codeimpwizard/codeimpstatuspage.cpp
@@ -34,16 +34,11 @@
 #include "umllistview.h"
 
 //kde includes
-#if QT_VERSION < 0x050000
-#include <kfiledialog.h>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
 
 //qt includes
-#if QT_VERSION >= 0x050000
 #include <QFileDialog>
-#endif
 #include <QListWidget>
 #include <QTimer>
 
@@ -331,11 +326,7 @@ void CodeImpStatusPage::loggerClear()
 void CodeImpStatusPage::loggerExport()
 {
     const QString caption = i18n("Umbrello Code Import - Logger Export");
-#if QT_VERSION >= 0x050000
     QString fileName = QFileDialog::getSaveFileName(wizard(), caption);
-#else
-    QString fileName = KFileDialog::getSaveFileName(KUrl(), QString(), 0, caption);
-#endif
     if (!fileName.isEmpty()) {
         QFile file(fileName);
         if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
diff --git a/umbrello/debug/debug_utils.cpp b/umbrello/debug/debug_utils.cpp
index 6b76119d324e471286a1007029a3a8d5d4bcfa49..9480fc42a69ec9683694811149d69de745212de5 100644
--- a/umbrello/debug/debug_utils.cpp
+++ b/umbrello/debug/debug_utils.cpp
@@ -25,9 +25,7 @@
 
 #include <QFileInfo>
 
-#if QT_VERSION >= 0x050000
 Q_LOGGING_CATEGORY(UMBRELLO, "umbrello")
-#endif
 
 Tracer* Tracer::m_instance = 0;
 Tracer::MapType *Tracer::m_classes = 0;
diff --git a/umbrello/debug/debug_utils.h b/umbrello/debug/debug_utils.h
index 4480ba5d227e1f92f780ccef7022ecf0cdf69b4b..462c6b88f748b2301e0db2464a34562de16081fe 100644
--- a/umbrello/debug/debug_utils.h
+++ b/umbrello/debug/debug_utils.h
@@ -23,15 +23,8 @@
 #define DEBUG_UTILS_H
 
 #include <QtGlobal>
-
-#if QT_VERSION < 0x050000
-#include <kdebug.h>
-#endif
-
-#if QT_VERSION >= 0x050000
 #include <QLoggingCategory>
 Q_DECLARE_LOGGING_CATEGORY(UMBRELLO)
-#endif
 #include <QMetaEnum>
 #include <QTreeWidget>
 
@@ -112,15 +105,9 @@ private:
 };
 
 // convenience macros for console output to the Umbrello area
-#if QT_VERSION >= 0x050000
 #define uDebug()   qCDebug(UMBRELLO)
 #define uError()   qCCritical(UMBRELLO)
 #define uWarning() qCWarning(UMBRELLO)
-#else
-#define uDebug()   kDebug(8060)
-#define uError()   kError(8060)
-#define uWarning() kWarning(8060)
-#endif
 
 #define DBG_SRC  QString::fromLatin1(metaObject()->className())
 #define DEBUG_SHOW_FILTER() Tracer::instance()->show()
diff --git a/umbrello/dialogs/associationpropertiesdialog.cpp b/umbrello/dialogs/associationpropertiesdialog.cpp
index 5478cc3c68b14946042a7e7e10e6c84a3496825a..92e09ddb2baaaa356fa26d9cb0a8d815d2779886 100644
--- a/umbrello/dialogs/associationpropertiesdialog.cpp
+++ b/umbrello/dialogs/associationpropertiesdialog.cpp
@@ -23,9 +23,6 @@
 // kde includes
 #include <KLocalizedString>
 #include <KMessageBox>
-#if QT_VERSION < 0x050000
-#include <kvbox.h>
-#endif
 
 // qt includes
 #include <QFrame>
diff --git a/umbrello/dialogs/codeeditor.cpp b/umbrello/dialogs/codeeditor.cpp
index e361a3caee55d36b3c71138456afc30d91040667..229b23eadb528136eaaa7aeb191ed1a000aa4c2e 100644
--- a/umbrello/dialogs/codeeditor.cpp
+++ b/umbrello/dialogs/codeeditor.cpp
@@ -36,10 +36,6 @@
 #include "umloperationdialog.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kaction.h>
-#include <kmenu.h>
-#endif
 #include <KLocalizedString>
 
 // qt includes
@@ -734,11 +730,7 @@ void CodeEditor::slotInsertCodeBlockAfterSelected()
  */
 void CodeEditor::contextMenuEvent(QContextMenuEvent * event)
 {
-#if QT_VERSION >= 0x050000
     QMenu* menu = createPopup();
-#else
-    KMenu* menu = createPopup();
-#endif
     menu->exec(event->globalPos());
     delete menu;
 }
@@ -747,38 +739,21 @@ void CodeEditor::contextMenuEvent(QContextMenuEvent * event)
  * Create the popup menu.
  * @return   the popup menu
  */
-#if QT_VERSION >= 0x050000
 QMenu * CodeEditor::createPopup()
-#else
-KMenu * CodeEditor::createPopup()
-#endif
 {
     DEBUG(DBG_SRC) << "called...";
 
-#if QT_VERSION >= 0x050000
     QMenu * menu = new QMenu(this);
-#else
-    KMenu * menu = new KMenu(this);
-#endif
-
     TextBlock * tb = m_selectedTextBlock;
     if (tb) {
         if (tb->getWriteOutText()) {
-#if QT_VERSION >= 0x050000
             QAction* hideAct = new QAction(i18n("Hide"), this);
-#else
-            KAction* hideAct = new KAction(i18n("Hide"), this);
-#endif
             hideAct->setShortcut(Qt::Key_H);
             connect(hideAct, &QAction::triggered, this, &CodeEditor::slotChangeSelectedBlockView);
             menu->addAction(hideAct);
         }
         else {
-#if QT_VERSION >= 0x050000
             QAction* showAct = new QAction(i18n("Show"), this);
-#else
-            KAction* showAct = new KAction(i18n("Show"), this);
-#endif
             showAct->setShortcut(Qt::Key_S);
             connect(showAct, &QAction::triggered, this, &CodeEditor::slotChangeSelectedBlockView);
             menu->addAction(showAct);
@@ -787,21 +762,13 @@ KMenu * CodeEditor::createPopup()
         CodeBlockWithComments * cb = dynamic_cast<CodeBlockWithComments*>(tb);
         if (cb) {
             if (cb->getComment()->getWriteOutText()) {
-#if QT_VERSION >= 0x050000
                 QAction* hideCommAct = new QAction(i18n("Hide Comment"), this);
-#else
-                KAction* hideCommAct = new KAction(i18n("Hide Comment"), this);
-#endif
                 hideCommAct->setShortcut(Qt::CTRL + Qt::Key_H);
                 connect(hideCommAct, &QAction::triggered, this, &CodeEditor::slotChangeSelectedBlockCommentView);
                 menu->addAction(hideCommAct);
             }
             else {
-#if QT_VERSION >= 0x050000
                 QAction* showCommAct = new QAction(i18n("Show Comment"), this);
-#else
-                KAction* showCommAct = new KAction(i18n("Show Comment"), this);
-#endif
                 showCommAct->setShortcut(Qt::CTRL + Qt::Key_S);
                 connect(showCommAct, &QAction::triggered, this, &CodeEditor::slotChangeSelectedBlockCommentView);
                 menu->addAction(showCommAct);
@@ -809,49 +776,29 @@ KMenu * CodeEditor::createPopup()
         }
         menu->addSeparator();
 
-#if QT_VERSION >= 0x050000
         QAction* insCodeBeforeAct = new QAction(i18n("Insert Code Block Before"), this);
-#else
-        KAction* insCodeBeforeAct = new KAction(i18n("Insert Code Block Before"), this);
-#endif
         insCodeBeforeAct->setShortcut(Qt::CTRL + Qt::Key_B);
         connect(insCodeBeforeAct, &QAction::triggered, this, &CodeEditor::slotInsertCodeBlockBeforeSelected);
         menu->addAction(insCodeBeforeAct);
 
-#if QT_VERSION >= 0x050000
         QAction* insCodeAfterAct = new QAction(i18n("Insert Code Block After"), this);
-#else
-        KAction* insCodeAfterAct = new KAction(i18n("Insert Code Block After"), this);
-#endif
         insCodeAfterAct->setShortcut(Qt::CTRL + Qt::Key_A);
         connect(insCodeAfterAct, &QAction::triggered, this, &CodeEditor::slotInsertCodeBlockAfterSelected);
         menu->addAction(insCodeAfterAct);
 
         menu->addSeparator();
 
-#if QT_VERSION >= 0x050000
         QAction* copyAct = new QAction(i18n("Copy"), this);
-#else
-        KAction* copyAct = new KAction(i18n("Copy"), this);
-#endif
         copyAct->setShortcut(Qt::CTRL + Qt::Key_C);
         connect(copyAct, &QAction::triggered, this, &CodeEditor::slotCopyTextBlock);
         menu->addAction(copyAct);
 
-#if QT_VERSION >= 0x050000
         QAction* pasteAct = new QAction(i18n("Paste"), this);
-#else
-        KAction* pasteAct = new KAction(i18n("Paste"), this);
-#endif
         pasteAct->setShortcut(Qt::CTRL + Qt::Key_V);
         connect(pasteAct, &QAction::triggered, this, &CodeEditor::slotPasteTextBlock);
         menu->addAction(pasteAct);
 
-#if QT_VERSION >= 0x050000
         QAction* cutAct = new QAction(i18n("Cut"), this);
-#else
-        KAction* cutAct = new KAction(i18n("Cut"), this);
-#endif
         cutAct->setShortcut(Qt::CTRL + Qt::Key_X);
         connect(cutAct, &QAction::triggered, this, &CodeEditor::slotCutTextBlock);
         menu->addAction(cutAct);
diff --git a/umbrello/dialogs/codeeditor.h b/umbrello/dialogs/codeeditor.h
index da994cab3c16ecefd6a8f0b55976d02a872d648c..8a6ff6984fb9e814e294e675b0fd5d19c15fced2 100644
--- a/umbrello/dialogs/codeeditor.h
+++ b/umbrello/dialogs/codeeditor.h
@@ -27,7 +27,7 @@ class CodeClassFieldDeclarationBlock;
 class CodeMethodBlock;
 class CodeBlockWithComments;
 class HierarchicalCodeBlock;
-class KMenu;
+class QMenu;
 class QLabel;
 class TextBlock;
 class UMLObject;
@@ -97,11 +97,7 @@ protected:
 
     void loadFromDocument();
 
-#if QT_VERSION >= 0x050000
     QMenu * createPopup();
-#else
-    KMenu * createPopup();
-#endif
 
 private:
     QString            m_parentDocName;
diff --git a/umbrello/dialogs/dialog_utils.cpp b/umbrello/dialogs/dialog_utils.cpp
index f2690558bfe77440cd404a526a19276ab4889330..ab2c0d9309e83c06d9e4314a83d2f68f8afc289b 100644
--- a/umbrello/dialogs/dialog_utils.cpp
+++ b/umbrello/dialogs/dialog_utils.cpp
@@ -18,18 +18,13 @@
 #include "umlwidget.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 #include <KMessageBox>
 #include <KLocalizedString>
 #include <klineedit.h>
 #include <kcombobox.h>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QGridLayout>
 #include <QLabel>
 #include <QLineEdit>
@@ -74,14 +69,10 @@ void askNameForWidget(UMLWidget * &targetWidget, const QString& dialogTitle,
 {
     bool pressedOK = false;
 
-#if QT_VERSION >= 0x050000
     QString name = QInputDialog::getText(UMLApp::app(),
                                          dialogTitle, dialogPrompt,
                                          QLineEdit::Normal,
                                          defaultName, &pressedOK);
-#else
-    QString name = KInputDialog::getText(dialogTitle, dialogPrompt, defaultName, &pressedOK, UMLApp::app());
-#endif
 
     if (pressedOK) {
         targetWidget->setName(name);
@@ -104,11 +95,7 @@ void askNameForWidget(UMLWidget * &targetWidget, const QString& dialogTitle,
 bool askName(const QString& title, const QString& prompt, QString& name)
 {
     bool ok;
-#if QT_VERSION >= 0x050000
      name = QInputDialog::getText((QWidget*)UMLApp::app(), title, prompt, QLineEdit::Normal, name, &ok);
-#else
-     name = KInputDialog::getText(title, prompt, name, &ok, (QWidget*)UMLApp::app());
-#endif
      return ok;
 }
 
diff --git a/umbrello/dialogs/exportallviewsdialog.h b/umbrello/dialogs/exportallviewsdialog.h
index a910b834a81d1289d1949b685229844fc2c3f4c7..82e9483bbdda003a4753747976b9d38a10891bdb 100644
--- a/umbrello/dialogs/exportallviewsdialog.h
+++ b/umbrello/dialogs/exportallviewsdialog.h
@@ -17,18 +17,14 @@
 #include "singlepagedialogbase.h"
 
 // KDE forward declarations
-#if QT_VERSION >= 0x050000
 class KComboBox;
-#else
-class KFileFilterCombo;
-#endif
 
 /**
  * Dialog for collecting the "Export all views" params.
  * Inherits ExportAllViewsDialogBase and adds a KFileFilterCombo that uses
  * only the mime types of the supported images types.
  *
- * The KFileFilterCombo is declared here instead of in the .ui file because QT
+ * The KComboBox is declared here instead of in the .ui file because QT
  * Designer and uic don't recognize it.
  */
 class ExportAllViewsDialog : public SinglePageDialogBase, private Ui::ExportAllViewsDialogBase
diff --git a/umbrello/dialogs/finddialog.cpp b/umbrello/dialogs/finddialog.cpp
index 42df21a401cce45be5d4557219c1bbaec1ba3183..2c5304fb811ae992f8e661dcee185bed70078010 100644
--- a/umbrello/dialogs/finddialog.cpp
+++ b/umbrello/dialogs/finddialog.cpp
@@ -89,9 +89,5 @@ void FindDialog::slotFilterButtonClicked(int button)
 void FindDialog::showEvent(QShowEvent *event)
 {
     ui_searchTerm->setFocus();
-#if QT_VERSION >= 0x050000
     QDialog::showEvent(event);
-#else
-    KDialog::showEvent(event);
-#endif
 }
diff --git a/umbrello/dialogs/multipagedialogbase.cpp b/umbrello/dialogs/multipagedialogbase.cpp
index 2c3bf4d8c48ac5ad387f5dd57b9e25423eaa0bf9..29fab2b1dddfc0cecb1576451053e1d286d6de4e 100644
--- a/umbrello/dialogs/multipagedialogbase.cpp
+++ b/umbrello/dialogs/multipagedialogbase.cpp
@@ -22,9 +22,7 @@
 #include "umlwidgetstylepage.h"
 
 #include <KFontChooser>
-#if QT_VERSION >=0x050000
 #include <KHelpClient>
-#endif
 #include <KLocalizedString>
 #include <KPageDialog>
 #include <KPageWidget>
@@ -43,7 +41,6 @@ DEBUG_REGISTER(MultiPageDialogBase)
 /**
  * Constructor
  */
-#if QT_VERSION >= 0x050000
 MultiPageDialogBase::MultiPageDialogBase(QWidget *parent, bool withDefaultButton)
   : QWidget(parent),
     m_pAssocGeneralPage(0),
@@ -77,39 +74,6 @@ MultiPageDialogBase::MultiPageDialogBase(QWidget *parent, bool withDefaultButton
         m_pageWidget->setFaceType(KPageView::Tree);
     }
 }
-#else
-MultiPageDialogBase::MultiPageDialogBase(QWidget *parent, bool withDefaultButton)
-  : QWidget(parent),
-    m_pAssocGeneralPage(0),
-    m_pRolePage(0),
-    m_fontChooser(0),
-    m_pStylePage(0),
-    m_pageItem(0),
-    m_pageDialog(0),
-    m_pageWidget(0),
-    m_useDialog(!parent || strcmp(parent->metaObject()->className(),"PropertiesWindow") != 0),
-    m_isModified(false)
-{
-    if (m_useDialog) {
-        m_pageDialog = new KPageDialog(parent);
-        KDialog::ButtonCodes buttons = KDialog::Ok | KDialog::Apply | KDialog::Cancel | KDialog::Help;
-        if (withDefaultButton)
-            buttons |=  KDialog::Default;
-        m_pageDialog->setButtons(buttons);
-        m_pageDialog->setDefaultButton(KDialog::Ok);
-        m_pageDialog->showButtonSeparator(true);
-        m_pageDialog->setFaceType(KPageDialog::List);
-        m_pageDialog->setModal(true);
-        m_pageDialog->setHelp(QString::fromLatin1("umbrello/index.html"), QString());
-        connect(m_pageDialog, &KPageDialog::okClicked, this, &MultiPageDialogBase::slotOkClicked);
-        connect(m_pageDialog, &KPageDialog::applyClicked, this, &MultiPageDialogBase::slotApplyClicked);
-        connect(m_pageDialog, &KPageDialog::defaultClicked, this, &MultiPageDialogBase::slotDefaultClicked);
-    } else {
-        m_pageWidget = new KPageWidget(this);
-        m_pageWidget->setFaceType(KPageView::Tree);
-    }
-}
-#endif
 
 MultiPageDialogBase::~MultiPageDialogBase()
 {
@@ -138,13 +102,8 @@ void MultiPageDialogBase::apply()
 
 void MultiPageDialogBase::setCaption(const QString &caption)
 {
-#if QT_VERSION >= 0x050000
     if (m_pageDialog)
         m_pageDialog->setWindowTitle(caption);
-#else
-    if (m_pageDialog)
-        m_pageDialog->setCaption(caption);
-#endif
 }
 
 void MultiPageDialogBase::accept()
@@ -190,11 +149,7 @@ void MultiPageDialogBase::setCurrentPage(KPageWidgetItem *page)
 
 int MultiPageDialogBase::spacingHint()
 {
-#if QT_VERSION >= 0x050000
     return 0;  // FIXME KF5 was QDialog::spacingHint();
-#else
-    return KDialog::spacingHint();
-#endif
 }
 
 int MultiPageDialogBase::exec()
@@ -246,15 +201,9 @@ void MultiPageDialogBase::slotDefaultClicked()
 void MultiPageDialogBase::slotHelpClicked()
 {
     DEBUG(DBG_SRC)  << "HELP clicked...directly handled";
-#if QT_VERSION >= 0x050000
     KHelpClient::invokeHelp(QLatin1String("help:/umbrello/index.html"), QLatin1String("umbrello"));
-#else
-    QUrl url = QUrl(QLatin1String("help:/umbrello/index.html"));
-    QDesktopServices::openUrl(url);
-#endif
 }
 
-#if QT_VERSION >= 0x050000
 /**
  * Button clicked event handler for the dialog button box.
  * @param button  the button which was clicked
@@ -280,7 +229,6 @@ void MultiPageDialogBase::slotButtonClicked(QAbstractButton *button)
         DEBUG(DBG_SRC)  << "Button clicked with unhandled role.";
     }
 }
-#endif
 
 /**
  * Handle key press event.
@@ -310,11 +258,7 @@ QFrame* MultiPageDialogBase::createPage(const QString& name, const QString& head
     m_pageItem = new KPageWidgetItem(page, name);
     if (!m_pageWidget) {
         m_pageItem->setHeader(header);
-#if QT_VERSION >= 0x050000
         m_pageItem->setIcon(QIcon(Icon_Utils::DesktopIcon(icon)));
-#else
-        m_pageItem->setIcon(KIcon(Icon_Utils::DesktopIcon(icon)));
-#endif
     } else
         m_pageItem->setHeader(QString());
     addPage(m_pageItem);
diff --git a/umbrello/dialogs/multipagedialogbase.h b/umbrello/dialogs/multipagedialogbase.h
index 29fd0d7db97a4848a2453ad4ac7d20521376656b..b3ad07db3814388dbfe26dce7ec92c3b8d5b71d6 100644
--- a/umbrello/dialogs/multipagedialogbase.h
+++ b/umbrello/dialogs/multipagedialogbase.h
@@ -85,9 +85,8 @@ private slots:
     void slotApplyClicked();
     void slotDefaultClicked();
     void slotHelpClicked();
-#if QT_VERSION >= 0x050000
     void slotButtonClicked(QAbstractButton *button);
-#endif
+
 protected:
     AssociationGeneralPage *m_pAssocGeneralPage;
     AssociationRolePage *m_pRolePage;
diff --git a/umbrello/dialogs/pages/activitypage.cpp b/umbrello/dialogs/pages/activitypage.cpp
index dd64c7e5dd890d0d1740eaf67abfa6e534f0b925..3f0aa2303aab9d39314b9227b7b8dc91e0a225f4 100644
--- a/umbrello/dialogs/pages/activitypage.cpp
+++ b/umbrello/dialogs/pages/activitypage.cpp
@@ -15,19 +15,13 @@
 #include "statewidget.h"
 #include "uml.h"
 
-#if QT_VERSION < 0x050000
-#include <kdialogbuttonbox.h>
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 
 #include <QHBoxLayout>
 #include <QGridLayout>
 #include <QGroupBox>
-#if QT_VERSION >= 0x050000
 #include <QDialogButtonBox>
 #include <QInputDialog>
-#endif
 #include <QLayout>
 #include <QPushButton>
 #include <QStringList>
@@ -104,7 +98,6 @@ void ActivityPage::setupPage()
     m_pBottomArrowB->setToolTip(i18n("Move selected item to the bottom"));
     buttonLayout->addWidget(m_pBottomArrowB);
 
-#if QT_VERSION >= 0x050000
     QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pActivityGB);
     QPushButton* newActivity = buttonBox->addButton(i18n("New Activity..."), QDialogButtonBox::ActionRole);
     connect(newActivity, &QPushButton::clicked, this, &ActivityPage::slotNewActivity);
@@ -112,15 +105,6 @@ void ActivityPage::setupPage()
     connect(m_pDeleteActivityButton, &QPushButton::clicked, this, &ActivityPage::slotDelete);
     m_pRenameButton = buttonBox->addButton(i18n("Rename"), QDialogButtonBox::ActionRole);
     connect(m_pRenameButton, &QPushButton::clicked, this, &ActivityPage::slotRename);
-#else
-    KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pActivityGB);
-    buttonBox->addButton(i18n("New Activity..."), KDialogButtonBox::ActionRole,
-                          this, SLOT(slotNewActivity()));
-    m_pDeleteActivityButton = buttonBox->addButton(i18n("Delete"), KDialogButtonBox::ActionRole,
-                              this, SLOT(slotDelete()));
-    m_pRenameButton = buttonBox->addButton(i18n("Rename"), KDialogButtonBox::ActionRole,
-                                           this, SLOT(slotRename()));
-#endif
     listVBoxLayout->addWidget(buttonBox);
 
     mainLayout->addWidget(m_pActivityGB);
@@ -185,16 +169,11 @@ void ActivityPage::slotMenuSelection(QAction* action)
 void ActivityPage::slotNewActivity()
 {
     bool ok = false;
-#if QT_VERSION >= 0x050000
     QString name = QInputDialog::getText(UMLApp::app(),
                                          i18n("New Activity"),
                                          i18n("Enter the name of the new activity:"),
                                          QLineEdit::Normal,
                                          i18n("new activity"), &ok);
-#else
-    QString name = KInputDialog::getText(i18n("New Activity"),
-        i18n("Enter the name of the new activity:"), i18n("new activity"), &ok, UMLApp::app());
-#endif
     if (ok && name.length() > 0) {
         m_pActivityLW->addItem(name);
         m_pActivityLW->setCurrentRow(m_pActivityLW->count() - 1);
@@ -216,15 +195,11 @@ void ActivityPage::slotRename()
     bool ok = false;
     QString name = m_pActivityLW->currentItem()->text();
     QString oldName = name;
-#if QT_VERSION >= 0x050000
     name = QInputDialog::getText(UMLApp::app(),
                                  i18n("Rename Activity"),
                                  i18n("Enter the new name of the activity:"),
                                  QLineEdit::Normal,
                                  name, &ok);
-#else
-    name = KInputDialog::getText(i18n("Rename Activity"), i18n("Enter the new name of the activity:"), name, &ok, UMLApp::app());
-#endif
     if (ok && name.length() > 0) {
         QListWidgetItem* item = m_pActivityLW->currentItem();
         item->setText(name);
diff --git a/umbrello/dialogs/pages/associationgeneralpage.cpp b/umbrello/dialogs/pages/associationgeneralpage.cpp
index 78806a685477c219c89a33aac34d72695792ead9..2b68c6ad33a05336d30556463bc2a5a797bfbe1d 100644
--- a/umbrello/dialogs/pages/associationgeneralpage.cpp
+++ b/umbrello/dialogs/pages/associationgeneralpage.cpp
@@ -93,9 +93,6 @@ void AssociationGeneralPage::constructWidget()
 
     m_pAssocNameLE = new KLineEdit(m_pAssociationWidget->name());
     m_pAssocNameComB = new KComboBox(true, nameAndTypeGB);
-#if QT_VERSION < 0x050000
-    m_pAssocNameComB->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
     m_pAssocNameComB->setDuplicatesEnabled(false);  // only allow one of each type in box
 
     QWidget *nameInputWidget = m_pAssocNameLE;
@@ -177,9 +174,6 @@ void AssociationGeneralPage::constructWidget()
     m_pTypeCB->setCompletedItems(m_AssocTypeStrings);
 
     m_pTypeCB->setDuplicatesEnabled(false); // only allow one of each type in box
-#if QT_VERSION < 0x050000
-    m_pTypeCB->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
     m_pNameAndTypeLayout->addWidget(m_pTypeCB, 1, 1);
 
     // document
diff --git a/umbrello/dialogs/pages/classifierlistpage.cpp b/umbrello/dialogs/pages/classifierlistpage.cpp
index 421a498e598df949e86f14f03600432635100b90..b2475478f7cc2994d2cab9540b1dbe135fe63e17 100644
--- a/umbrello/dialogs/pages/classifierlistpage.cpp
+++ b/umbrello/dialogs/pages/classifierlistpage.cpp
@@ -26,13 +26,7 @@
 #include "entityattribute.h"
 #include "object_factory.h"
 
-#if QT_VERSION < 0x050000
-#include <kdialogbuttonbox.h>
-#endif
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <ktabwidget.h>
-#endif
 #include <ktextedit.h>
 
 #include <QApplication>
@@ -205,7 +199,6 @@ void ClassifierListPage::setupMoveButtons(QHBoxLayout* parentLayout)
  */
 void ClassifierListPage::setupActionButtons(const QString& itemType, QVBoxLayout* parentLayout)
 {
-#if QT_VERSION >= 0x050000
     QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pItemListGB);
     m_pNewClassifierListItemButton = buttonBox->addButton(itemType, QDialogButtonBox::ActionRole);
     connect(m_pNewClassifierListItemButton, &QPushButton::clicked, this, &ClassifierListPage::slotNewListItem);
@@ -213,14 +206,6 @@ void ClassifierListPage::setupActionButtons(const QString& itemType, QVBoxLayout
     connect(m_pDeleteListItemButton, &QPushButton::clicked, this, &ClassifierListPage::slotDelete);
     m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), QDialogButtonBox::ActionRole);
     connect(m_pPropertiesButton, &QPushButton::clicked, this, &ClassifierListPage::slotProperties);
-#else
-    KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pItemListGB);
-    m_pNewClassifierListItemButton = buttonBox->addButton(itemType, KDialogButtonBox::ActionRole, this,
-                          SLOT(slotNewListItem()));
-    m_pDeleteListItemButton = buttonBox->addButton(i18n("&Delete"),
-                              KDialogButtonBox::ActionRole, this, SLOT(slotDelete()));
-    m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), KDialogButtonBox::ActionRole, this, SLOT(slotProperties()));
-#endif
     parentLayout->addWidget(buttonBox);
 }
 
@@ -237,11 +222,7 @@ void ClassifierListPage::setupDocumentationGroup(int margin)
     if (m_itemType == UMLObject::ot_Operation) {
         m_docTE = new KTextEdit();
         m_pCodeTE = new CodeTextEdit();
-#if QT_VERSION >= 0x050000
         QTabWidget* tabWidget = new QTabWidget();
-#else
-        KTabWidget* tabWidget = new KTabWidget();
-#endif
         tabWidget->addTab(m_docTE, i18n("Comment"));
         tabWidget->addTab(m_pCodeTE, i18n("Source Code"));
         docLayout->addWidget(tabWidget);
diff --git a/umbrello/dialogs/pages/classoptionspage.cpp b/umbrello/dialogs/pages/classoptionspage.cpp
index f2f5b32f4523e5024f1666d668de1bb103f0c715..86ab904e7ececd20a2cf6f8b147de3867dda6a8c 100644
--- a/umbrello/dialogs/pages/classoptionspage.cpp
+++ b/umbrello/dialogs/pages/classoptionspage.cpp
@@ -297,9 +297,6 @@ void ClassOptionsPage::setupClassPageOption()
         insertAttribScope(i18n("Private"));
         insertAttribScope(i18n("Protected"));
         m_attribScopeCB->setCurrentIndex(m_options->classState.defaultAttributeScope);
-#if QT_VERSION < 0x050000
-        m_attribScopeCB->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
         scopeLayout->addWidget(m_attribScopeCB, 0, 1);
 
         m_operationScopeCB = new KComboBox(m_scopeGB);
@@ -307,9 +304,6 @@ void ClassOptionsPage::setupClassPageOption()
         insertOperationScope(i18n("Private"));
         insertOperationScope(i18n("Protected"));
         m_operationScopeCB->setCurrentIndex(m_options->classState.defaultOperationScope);
-#if QT_VERSION < 0x050000
-        m_operationScopeCB->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
         scopeLayout->addWidget(m_operationScopeCB, 1, 1);
         topLayout->addWidget(m_scopeGB);
     }
diff --git a/umbrello/dialogs/pages/constraintlistpage.cpp b/umbrello/dialogs/pages/constraintlistpage.cpp
index 7f484c79e14f3633ccd3575cd31d76487fb80108..f8cd547f0e66b5302eb6a6df2fab5e5b0917bdd9 100644
--- a/umbrello/dialogs/pages/constraintlistpage.cpp
+++ b/umbrello/dialogs/pages/constraintlistpage.cpp
@@ -24,21 +24,10 @@
 #include "umldoc.h"
 #include "uniqueconstraint.h"
 
-#if QT_VERSION < 0x050000
-#include <kaction.h>
-#include <kdialogbuttonbox.h>
-#endif
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kmenu.h>
-#include <kpushbutton.h>
-#endif
-
 #include <QApplication>
 #include <QHBoxLayout>
-#if QT_VERSION >= 0x050000
 #include <QPushButton>
-#endif
 #include <QVBoxLayout>
 
 /**
@@ -55,11 +44,7 @@ ConstraintListPage::ConstraintListPage(QWidget* parent, UMLClassifier* classifie
 {
     setupActions();
 
-#if QT_VERSION >= 0x050000
     buttonMenu = new QMenu(this);
-#else
-    buttonMenu = new KMenu(this);
-#endif
     // add a button menu
     m_pNewClassifierListItemButton->setMenu(buttonMenu);
     buttonMenu->addAction(newPrimaryKeyConstraintAction);
@@ -80,31 +65,13 @@ ConstraintListPage::~ConstraintListPage()
 
 void ConstraintListPage::setupActions()
 {
-#if QT_VERSION >= 0x050000
     newUniqueConstraintAction = new QAction(i18n("Unique Constraint..."), this);
-#else
-    newUniqueConstraintAction = new KAction(i18n("Unique Constraint..."), this);
-#endif
     connect(newUniqueConstraintAction, &QAction::triggered, this, &ConstraintListPage::slotNewUniqueConstraint);
-#if QT_VERSION >= 0x050000
     newPrimaryKeyConstraintAction = new QAction(i18n("Primary Key Constraint..."), this);
-#else
-    newPrimaryKeyConstraintAction = new KAction(i18n("Primary Key Constraint..."), this);
-#endif
     connect(newPrimaryKeyConstraintAction, &QAction::triggered, this, &ConstraintListPage::slotNewPrimaryKeyConstraint);
-
-#if QT_VERSION >= 0x050000
     newForeignKeyConstraintAction = new QAction(i18n("Foreign Key Constraint..."), this);
-#else
-    newForeignKeyConstraintAction = new KAction(i18n("Foreign Key Constraint..."), this);
-#endif
     connect(newForeignKeyConstraintAction, &QAction::triggered, this, &ConstraintListPage::slotNewForeignKeyConstraint);
-
-#if QT_VERSION >= 0x050000
     newCheckConstraintAction = new QAction(i18n("Check Constraint..."), this);
-#else
-    newCheckConstraintAction = new KAction(i18n("Check Constraint..."), this);
-#endif
     connect(newCheckConstraintAction, &QAction::triggered, this, &ConstraintListPage::slotNewCheckConstraint);
 }
 
diff --git a/umbrello/dialogs/pages/constraintlistpage.h b/umbrello/dialogs/pages/constraintlistpage.h
index d43ce60895bada499f3543ba2be3ac49146c60c5..07e6eaeabad7961970ce3fc6fda2a8f66c6f32e5 100644
--- a/umbrello/dialogs/pages/constraintlistpage.h
+++ b/umbrello/dialogs/pages/constraintlistpage.h
@@ -17,14 +17,8 @@
 
 //qt  includes
 #include <QWidget>
-
-#if QT_VERSION < 0x050000
-class KAction;
-class KMenu;
-#else
 class QAction;
 class QMenu;
-#endif
 
 /**
  * A dialog page to display entity constraint properties.
@@ -44,17 +38,10 @@ public:
 
 private:
 
-#if QT_VERSION >= 0x050000
     QAction* newUniqueConstraintAction;
     QAction* newPrimaryKeyConstraintAction;
     QAction* newForeignKeyConstraintAction;
     QAction* newCheckConstraintAction;
-#else
-    KAction* newUniqueConstraintAction;
-    KAction* newPrimaryKeyConstraintAction;
-    KAction* newForeignKeyConstraintAction;
-    KAction* newCheckConstraintAction;
-#endif
     void setupActions();
 
 private slots:
@@ -68,12 +55,7 @@ private slots:
 protected:
 
     bool greaterThan(UMLObject::ObjectType ct1, UMLObject::ObjectType ct2);
-
-#if QT_VERSION >= 0x050000
     QMenu* buttonMenu;
-#else
-    KMenu* buttonMenu;
-#endif
 
 };
 
diff --git a/umbrello/dialogs/pages/generaloptionpage.cpp b/umbrello/dialogs/pages/generaloptionpage.cpp
index 563bf33962749ff6ffb45a98a580fd0720a2f3fc..5f8d4a860bcbe821bb8a803f12853e24b82f5bce 100644
--- a/umbrello/dialogs/pages/generaloptionpage.cpp
+++ b/umbrello/dialogs/pages/generaloptionpage.cpp
@@ -17,10 +17,6 @@
 
 // kde includes
 #include <KComboBox>
-#if QT_VERSION < 0x050000
-#include <KDialog>
-#include <KIntSpinBox>
-#endif
 #include <KLineEdit>
 #include <KLocalizedString>
 
@@ -31,9 +27,7 @@
 #include <QLabel>
 #include <QPushButton>
 #include <QRadioButton>
-#if QT_VERSION >= 0x050000
 #include <QSpinBox>
-#endif
 
 /**
  * Constructor.
@@ -43,11 +37,7 @@ GeneralOptionPage::GeneralOptionPage(QWidget* parent)
   : DialogPageBase(parent)
 {
     Settings::OptionState &optionState = Settings::optionState();
-#if QT_VERSION >= 0x050000
     int spacingHint = 2;
-#else
-    int spacingHint = static_cast<KDialog*>(parent)->spacingHint();
-#endif
 
     QVBoxLayout *topLayout = new QVBoxLayout(this);
 
@@ -95,14 +85,10 @@ GeneralOptionPage::GeneralOptionPage(QWidget* parent)
     m_GeneralWidgets.autosaveL = new QLabel(i18n("Select auto-save time interval (mins):"), m_GeneralWidgets.autosaveGB);
     autosaveLayout->addWidget(m_GeneralWidgets.autosaveL, 1, 0);
 
-#if QT_VERSION >= 0x050000
     m_GeneralWidgets.timeISB = new QSpinBox(m_GeneralWidgets.autosaveGB);
     m_GeneralWidgets.timeISB->setRange(1, 600);
     m_GeneralWidgets.timeISB->setSingleStep(1);
     m_GeneralWidgets.timeISB->setValue(optionState.generalState.autosavetime);
-#else
-    m_GeneralWidgets.timeISB = new KIntSpinBox(1, 600, 1, optionState.generalState.autosavetime, m_GeneralWidgets.autosaveGB);
-#endif
     m_GeneralWidgets.timeISB->setEnabled(optionState.generalState.autosave);
     autosaveLayout->addWidget(m_GeneralWidgets.timeISB, 1, 1);
 
@@ -136,9 +122,6 @@ GeneralOptionPage::GeneralOptionPage(QWidget* parent)
     startupLayout->addWidget(m_GeneralWidgets.startL, 1, 0);
 
     m_GeneralWidgets.diagramKB = new KComboBox(m_GeneralWidgets.startupGB);
-#if QT_VERSION < 0x050000
-    m_GeneralWidgets.diagramKB->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
     startupLayout->addWidget(m_GeneralWidgets.diagramKB, 1, 1);
 
     // start at 1 because we don't allow No Diagram any more
@@ -156,9 +139,6 @@ GeneralOptionPage::GeneralOptionPage(QWidget* parent)
     startupLayout->addWidget(m_GeneralWidgets.defaultLanguageL, 2, 0);
 
     m_GeneralWidgets.languageKB = new KComboBox(m_GeneralWidgets.startupGB);
-#if QT_VERSION < 0x050000
-    m_GeneralWidgets.languageKB->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
     startupLayout->addWidget(m_GeneralWidgets.languageKB, 2, 1);
 
     int indexCounter = 0;
diff --git a/umbrello/dialogs/pages/generaloptionpage.h b/umbrello/dialogs/pages/generaloptionpage.h
index 15da7384648f6d5e66807c8d028af8adf79cf8aa..83c3b2ba8141f7849eb6f98a68e4df64001895ef 100644
--- a/umbrello/dialogs/pages/generaloptionpage.h
+++ b/umbrello/dialogs/pages/generaloptionpage.h
@@ -13,17 +13,12 @@
 
 #include "dialogpagebase.h"
 
-#if QT_VERSION < 0x050000
-class KIntSpinBox;
-#endif
 class KLineEdit;
 class KComboBox;
 class QGroupBox;
 class QCheckBox;
 class QLabel;
-#if QT_VERSION >= 0x050000
 class QSpinBox;
-#endif
 
 /**
  * A dialog page to display auto layouts options
@@ -51,11 +46,7 @@ protected:
         QGroupBox * autosaveGB;
         QGroupBox * startupGB;
 
-#if QT_VERSION >= 0x050000
         QSpinBox  * timeISB;
-#else
-        KIntSpinBox * timeISB;
-#endif
         KComboBox * diagramKB;
         KComboBox * languageKB;
 
diff --git a/umbrello/dialogs/pages/umlwidgetstylepage.cpp b/umbrello/dialogs/pages/umlwidgetstylepage.cpp
index 53ab7fae69da4d4b222262b0720614e2273c7d80..b8ef96488600b99789445af6a0af8b03a850740f 100644
--- a/umbrello/dialogs/pages/umlwidgetstylepage.cpp
+++ b/umbrello/dialogs/pages/umlwidgetstylepage.cpp
@@ -19,9 +19,6 @@
 
 #include <KLocalizedString>
 #include <kcolorbutton.h>
-#if QT_VERSION < 0x050000
-#include <KIntSpinBox>
-#endif
 
 #include <QCheckBox>
 #include <QGridLayout>
@@ -29,9 +26,7 @@
 #include <QLabel>
 #include <QLayout>
 #include <QPushButton>
-#if QT_VERSION >= 0x050000
 #include <QSpinBox>
-#endif
 #include <QVBoxLayout>
 
 /**
@@ -175,14 +170,10 @@ void UMLWidgetStylePage::init()
     m_lineWidthL = new QLabel(i18nc("line width", "Line &width:"), m_pStyleGB);
     styleLayout->addWidget(m_lineWidthL, ++row, 0);
 
-#if QT_VERSION >= 0x050000
     m_lineWidthB = new QSpinBox(m_pStyleGB);
     m_lineWidthB->setRange(0, 10);
     m_lineWidthB->setSingleStep(1);
     m_lineWidthB->setValue(0);
-#else
-    m_lineWidthB = new KIntSpinBox(0, 10, 1, 0, m_pStyleGB);
-#endif
     styleLayout->addWidget(m_lineWidthB, row, 1);
 
     m_lineWidthDefaultB = new QPushButton(i18nc("default line width button", "Defa&ult"), m_pStyleGB) ;
diff --git a/umbrello/dialogs/pages/umlwidgetstylepage.h b/umbrello/dialogs/pages/umlwidgetstylepage.h
index 31756cd5319c4ba83ca0ef41598e4a44dfca594d..472b5e2f41cc2678f0e5eb575704f5e68b8f0139 100644
--- a/umbrello/dialogs/pages/umlwidgetstylepage.h
+++ b/umbrello/dialogs/pages/umlwidgetstylepage.h
@@ -22,16 +22,11 @@
 class UMLScene;
 class WidgetBase;
 class KColorButton;
-#if QT_VERSION < 0x050000
-class KIntSpinBox;
-#endif
 class QLabel;
 class QPushButton;
 class QCheckBox;
 class QGroupBox;
-#if QT_VERSION >= 0x050000
 class QSpinBox;
-#endif
 
 class UMLWidgetStylePage : public QWidget
 {
@@ -83,11 +78,7 @@ protected:
     KColorButton * m_pFillColorB;
     KColorButton * m_BackgroundColorB;
     KColorButton * m_GridDotColorB;
-#if QT_VERSION >= 0x050000
     QSpinBox * m_lineWidthB;
-#else
-    KIntSpinBox * m_lineWidthB;
-#endif
 
 private:
     void init();
diff --git a/umbrello/dialogs/selectoperationdialog.cpp b/umbrello/dialogs/selectoperationdialog.cpp
index 4d6733c3df3231005028e28afabc445414cd9070..4fb4132f899af910554a4e95ba51da26b2003180 100644
--- a/umbrello/dialogs/selectoperationdialog.cpp
+++ b/umbrello/dialogs/selectoperationdialog.cpp
@@ -64,9 +64,6 @@ SelectOperationDialog::SelectOperationDialog(UMLView *parent, UMLClassifier * c,
     topLayout->addWidget(m_pOpGB);
 
     QGridLayout * mainLayout = new QGridLayout(m_pOpGB);
-#if QT_VERSION < 0x050000
-    mainLayout->setSpacing(spacingHint());
-#endif
     mainLayout->setMargin(fontMetrics().height());
 
     Dialog_Utils::makeLabeledEditField(mainLayout, 0,
@@ -81,9 +78,6 @@ SelectOperationDialog::SelectOperationDialog(UMLView *parent, UMLClassifier * c,
     mainLayout->addWidget(m_pOpRB, 1, 0);
 
     m_pOpCB = new KComboBox(m_pOpGB);
-#if QT_VERSION < 0x050000
-    m_pOpCB->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
     m_pOpCB->setDuplicatesEnabled(false); // only allow one of each type in box
     connect(m_pOpCB, static_cast<void (KComboBox::*)(int)> (&KComboBox::currentIndexChanged), this, &SelectOperationDialog::slotIndexChanged);
     mainLayout->addWidget(m_pOpCB, 1, 1, 1, 2);
diff --git a/umbrello/dialogs/settingsdialog.cpp b/umbrello/dialogs/settingsdialog.cpp
index d7b118e34224c3f3f0ada6ed17a7189a12185a9d..3c54a6a0bedd6b6c0dcc4949045cb37bd7ffedd7 100644
--- a/umbrello/dialogs/settingsdialog.cpp
+++ b/umbrello/dialogs/settingsdialog.cpp
@@ -26,20 +26,12 @@
 
 // kde includes
 #include <KColorButton>
-#if QT_VERSION < 0x050000
-#include <kfontchooser.h>
-#include <KIntSpinBox>
-#endif
 
 // qt includes
 #include <QCheckBox>
-#if QT_VERSION >= 0x050000
 #include <QFontDialog>
-#endif
 #include <QGroupBox>
-#if QT_VERSION >= 0x050000
 #include <QSpinBox>
-#endif
 
 //TODO don't do that, but it's better than hardcoded in the functions body
 #define FILL_COLOR QColor(255, 255, 192) 
@@ -166,15 +158,11 @@ void SettingsDialog::setupUIPage()
     m_UiWidgets.lineWidthCB = new QCheckBox(i18n("Custom line width:"), m_UiWidgets.colorGB);
     colorLayout->addWidget(m_UiWidgets.lineWidthCB, 5, 0);
 
-#if QT_VERSION >= 0x050000
     m_UiWidgets.lineWidthB = new QSpinBox(m_UiWidgets.colorGB);
     m_UiWidgets.lineWidthB->setMinimum(0);
     m_UiWidgets.lineWidthB->setMaximum(10);
     m_UiWidgets.lineWidthB->setSingleStep(1);
     m_UiWidgets.lineWidthB->setValue(m_pOptionState->uiState.lineWidth);
-#else
-    m_UiWidgets.lineWidthB = new KIntSpinBox(0, 10, 1, m_pOptionState->uiState.lineWidth, m_UiWidgets.colorGB);
-#endif
     colorLayout->addWidget(m_UiWidgets.lineWidthB, 5, 1);
     
     m_UiWidgets.useFillColorCB = new QCheckBox(i18n("&Use fill color"), m_UiWidgets.colorGB);
@@ -267,14 +255,9 @@ void SettingsDialog::setupCodeViewerPage(Settings::CodeViewerState options)
 
 void SettingsDialog::setupFontPage()
 {
-#if QT_VERSION >= 0x050000
     m_FontWidgets.chooser = new QFontDialog();
     m_FontWidgets.chooser->setCurrentFont(m_pOptionState->uiState.font);
     m_FontWidgets.chooser->setOption(QFontDialog::NoButtons);
-#else
-    m_FontWidgets.chooser = new KFontChooser(0, KFontChooser::NoDisplayFlags, QStringList(), 0);
-    m_FontWidgets.chooser->setFont(m_pOptionState->uiState.font);
-#endif
     pageFont = createPage(i18n("Font"), i18n("Font Settings"),
                           Icon_Utils::it_Properties_Font, m_FontWidgets.chooser);
 }
@@ -317,11 +300,7 @@ void SettingsDialog::slotDefault()
     }
     else if (current == pageFont)
     {
-#if QT_VERSION >= 0x050000
         m_FontWidgets.chooser->setCurrentFont(parentWidget()->font());
-#else
-        m_FontWidgets.chooser->setFont(parentWidget()->font());
-#endif
     }
     else if (current == pageUserInterface)
     {
@@ -360,11 +339,7 @@ void SettingsDialog::applyPage(KPageWidgetItem*item)
     }
     else if (item == pageFont)
     {
-#if QT_VERSION >= 0x050000
         m_pOptionState->uiState.font = m_FontWidgets.chooser->currentFont();
-#else
-        m_pOptionState->uiState.font = m_FontWidgets.chooser->font();
-#endif
     }
     else if (item == pageUserInterface)
     {
diff --git a/umbrello/dialogs/settingsdialog.h b/umbrello/dialogs/settingsdialog.h
index 402ad464a714de0b9d714377121b5b89efc5d46b..c84713adb106bd0b07c88f05201182625ccf9a12 100644
--- a/umbrello/dialogs/settingsdialog.h
+++ b/umbrello/dialogs/settingsdialog.h
@@ -26,18 +26,10 @@ class CodeGenOptionsPage;
 class CodeViewerOptionsPage;
 class GeneralOptionPage;
 class KColorButton;
-#if QT_VERSION < 0x050000
-class KFontChooser;
-class KIntSpinBox;
-#endif
 class QCheckBox;
-#if QT_VERSION >= 0x050000
 class QFontDialog;
-#endif
 class QGroupBox;
-#if QT_VERSION >= 0x050000
 class QSpinBox;
-#endif
 class UMLWidgetStylePage;
 
 /**
@@ -81,21 +73,13 @@ private:
         KColorButton * fillColorB;
         KColorButton * gridColorB;
         KColorButton * bgColorB;
-#if QT_VERSION >= 0x050000
         QSpinBox     * lineWidthB;
-#else
-        KIntSpinBox  * lineWidthB;
-#endif
         QCheckBox * useFillColorCB;
     }
     ;//end struct UIWidgets
 
     struct FontWidgets {
-#if QT_VERSION >= 0x050000
         QFontDialog *chooser;
-#else
-        KFontChooser *chooser;
-#endif
     };
 
     //private methods
diff --git a/umbrello/dialogs/singlepagedialogbase.cpp b/umbrello/dialogs/singlepagedialogbase.cpp
index a6a922f07c494d3a6650f375776907804244d0e3..e943f29c62f35719de1770305a214f4314bb14b1 100644
--- a/umbrello/dialogs/singlepagedialogbase.cpp
+++ b/umbrello/dialogs/singlepagedialogbase.cpp
@@ -16,7 +16,6 @@
 
 DEBUG_REGISTER(SinglePageDialogBase)
 
-#if QT_VERSION >= 0x050000
 #include <QDialogButtonBox>
 #include <QVBoxLayout>
 #include <QPushButton>
@@ -42,30 +41,6 @@ SinglePageDialogBase::SinglePageDialogBase(QWidget *parent, bool withApplyButton
     connect(m_buttonBox, &QDialogButtonBox::clicked, this, &SinglePageDialogBase::slotClicked);
     mainWidget();
 }
-#else
-
-/**
- * Constructor
- */
-SinglePageDialogBase::SinglePageDialogBase(QWidget *parent, bool withApplyButton, bool withSearchButton)
-  : KDialog(parent)
-{
-    if (withApplyButton)
-        setButtons(Help | Ok | Cancel | Apply);
-    else
-        setButtons(Help | Ok | Cancel);
-
-    if (withSearchButton)
-        setButtonText(Ok, i18n("Search"));
-
-    setDefaultButton(Ok);
-    setModal(true);
-    showButtonSeparator(true);
-
-    connect(this, &SinglePageDialogBase::okClicked, this, &SinglePageDialogBase::slotOk);
-    connect(this, &SinglePageDialogBase::applyClicked, this, &SinglePageDialogBase::slotApply);
-}
-#endif
 
 SinglePageDialogBase::~SinglePageDialogBase()
 {
@@ -85,7 +60,6 @@ bool SinglePageDialogBase::apply()
     return true;
 }
 
-#if QT_VERSION >= 0x050000
 void SinglePageDialogBase::setCaption(const QString &caption)
 {
     setWindowTitle(caption);
@@ -150,7 +124,7 @@ QWidget *SinglePageDialogBase::mainWidget()
 
     return m_mainWidget;
 }
-#endif
+
 
 /**
  * Used when the Apply button is clicked. Calls apply().
@@ -173,7 +147,6 @@ void SinglePageDialogBase::slotOk()
     }
 }
 
-#if QT_VERSION >= 0x050000
 /**
  * Used when the Cancel button is clicked.
  */
@@ -203,7 +176,6 @@ void SinglePageDialogBase::enableButtonOk(bool enable)
 {
     m_buttonBox->button(QDialogButtonBox::Ok)->setEnabled(enable);
 }
-#endif
 
 /**
  * Return state of dialog input validation.
diff --git a/umbrello/dialogs/singlepagedialogbase.h b/umbrello/dialogs/singlepagedialogbase.h
index 17863cc1f428eb24be72a66ebb406aeda8db56f4..f0cf35f81e584fec82a38069a1a91ebf28bb9284 100644
--- a/umbrello/dialogs/singlepagedialogbase.h
+++ b/umbrello/dialogs/singlepagedialogbase.h
@@ -13,13 +13,9 @@
 
 #include <QtGlobal>
 
-#if QT_VERSION >= 0x050000
 #include <QDialog>
 class QAbstractButton;
 class QDialogButtonBox;
-#else
-#include <KDialog>
-#endif
 
 /**
  * Base class for single page property dialogs
@@ -28,11 +24,7 @@ class QDialogButtonBox;
  *
  * Bugs and comments to umbrello-devel@kde.org or http://bugs.kde.org
  */
-#if QT_VERSION >= 0x050000
 class SinglePageDialogBase : public QDialog
-#else
-class SinglePageDialogBase : public KDialog
-#endif
 {
     Q_OBJECT
 public:
@@ -40,7 +32,6 @@ public:
     virtual ~SinglePageDialogBase();
     virtual bool apply();
 
-#if QT_VERSION >= 0x050000
     typedef enum { Cancel = 0, Ok = 1, Apply = 2, No = 2 } ButtonCode;
     // keep in sync with MultiPageDialogBase
     void setCaption(const QString &caption);
@@ -48,22 +39,17 @@ public:
     QWidget *mainWidget();
     void setMainWidget(QWidget *widget);
     void setButtonText(ButtonCode code, const QString &text);
-#endif
 
 protected slots:
     void slotApply();
     void slotOk();
-#if QT_VERSION >= 0x050000
     void slotCancel();
     void slotClicked(QAbstractButton*);
-#endif
 
 protected:
-#if QT_VERSION >= 0x050000
     QDialogButtonBox *m_buttonBox;
     QWidget *m_mainWidget;
     void enableButtonOk(bool enable);
-#endif
     virtual bool validate();
 };
 
diff --git a/umbrello/dialogs/umlentityattributedialog.cpp b/umbrello/dialogs/umlentityattributedialog.cpp
index ae2df442d4948a283f31828871e18a2e51f2a027..7ccfbf61d04cc1444aecf651a9a86e12df98112d 100644
--- a/umbrello/dialogs/umlentityattributedialog.cpp
+++ b/umbrello/dialogs/umlentityattributedialog.cpp
@@ -101,9 +101,6 @@ void UMLEntityAttributeDialog::setupDialog()
     valuesLayout->addWidget(m_pAttributesL, 7, 0);
 
     m_pAttributesCB = new KComboBox(true, m_pValuesGB);
-#if QT_VERSION < 0x050000
-    m_pAttributesCB->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
     valuesLayout->addWidget(m_pAttributesCB, 7, 1);
     m_pAttributesL->setBuddy(m_pAttributesCB);
 
diff --git a/umbrello/dialogs/umlfiledialog.cpp b/umbrello/dialogs/umlfiledialog.cpp
index 7cc8f030a19bcbc1817da8246f3286e8c44492c1..91a1d65f1c0a118225c6f929eaeb574057af5438 100644
--- a/umbrello/dialogs/umlfiledialog.cpp
+++ b/umbrello/dialogs/umlfiledialog.cpp
@@ -13,44 +13,10 @@
 #include "umlviewimageexportermodel.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <KMimeType>
-#endif
 #include <KLocalizedString>
 
-#if QT_VERSION < 0x050000
-static QStringList mime2KdeFilter(const QStringList &mimeTypes, QString *allExtensions = 0)
-{
-    const KUrl emptyUrl;
-    QStringList kdeFilter;
-    QStringList allExt;
-    foreach(const QString& mimeType, mimeTypes) {
-        KMimeType::Ptr mime(KMimeType::mimeType(mimeType));
-        if (mime) {
-            allExt += mime->patterns();
-            kdeFilter.append(mime->patterns().join(QLatin1String(" ")) + QLatin1Char('|') +
-            mime->comment(emptyUrl));
-        }
-        else if (mimeType == QString::fromLatin1("image/x-dot")) {
-            allExt += QString::fromLatin1("*.dot");
-            kdeFilter.append(QLatin1String("*.dot|Dot Files"));
-        }
-    }
-    if (allExtensions) {
-        allExt.sort();
-        *allExtensions = allExt.join(QLatin1String(" "));
-    }
-    return kdeFilter;
-}
-#endif
-
-#if QT_VERSION >= 0x050000
 UMLFileDialog::UMLFileDialog(const QUrl &startDir, const QString &filter, QWidget *parent, QWidget *widget)
   : m_dialog(new QFileDialog(parent, QString(), startDir.toLocalFile(), filter))
-#else
-UMLFileDialog::UMLFileDialog(const KUrl &startDir, const QString &filter, QWidget *parent, QWidget *widget)
-  : m_dialog(new KFileDialog(startDir, filter, parent, widget))
-#endif
 {
     Q_UNUSED(widget);
 }
@@ -65,7 +31,6 @@ int UMLFileDialog::exec()
     return m_dialog->exec();
 }
 
-#if QT_VERSION >= 0x050000
 void UMLFileDialog::setCaption(const QString &caption)
 {
     m_dialog->setWindowTitle(caption);
@@ -104,51 +69,3 @@ void UMLFileDialog::setSelection(const QString &name)
 {
     m_dialog->selectFile(name);
 }
-
-#else
-void UMLFileDialog::setCaption(const QString &caption)
-{
-    m_dialog->setCaption(caption);
-}
-
-void UMLFileDialog::setOperationMode(KFileDialog::OperationMode mode)
-{
-    m_dialog->setOperationMode(mode);
-}
-
-void UMLFileDialog::setUrl(const KUrl &url, bool clearforward)
-{
-    m_dialog->setUrl(url, clearforward);
-}
-
-KUrl UMLFileDialog::selectedUrl()
-{
-    return m_dialog->selectedUrl();
-}
-
-void UMLFileDialog::setSelection(const QString &name)
-{
-    m_dialog->setSelection(name);
-}
-
-void UMLFileDialog::setMimeFilter(const QStringList &types, const QString &defaultType)
-{
-    QString allExtensions;
-    QStringList filters = mime2KdeFilter(types, &allExtensions);
-    if (defaultType.isEmpty() && (types.count() > 1)) {
-        filters.prepend(allExtensions + QLatin1Char('|') + i18n("All Supported Files"));
-    }
-    m_dialog->setFilter(filters.join(QLatin1String("\n")));
-}
-
-/**
- * @brief return the mime type of the selected file
- * @return mime type string
- */
-QString UMLFileDialog::currentMimeFilter()
-{
-    KUrl url = m_dialog->selectedUrl();
-    QFileInfo fi(url.toLocalFile());
-    return UMLViewImageExporterModel::imageTypeToMimeType(fi.suffix());
-}
-#endif
diff --git a/umbrello/dialogs/umlfiledialog.h b/umbrello/dialogs/umlfiledialog.h
index 4dc5764f6682cb1476535efb4db1fc8b46e72009..bc8db45dab9321b184224d6980c9666fb9936912 100644
--- a/umbrello/dialogs/umlfiledialog.h
+++ b/umbrello/dialogs/umlfiledialog.h
@@ -12,13 +12,7 @@
 #define UMLFILEDIALOG_H
 
 #include <QtGlobal>
-
-#if QT_VERSION >= 0x050000
 #include <QFileDialog>
-#else
-#include <kfiledialog.h>
-#endif
-
 /**
  * Wrapper class for KFileDialog supporting graphviz *.dot files.
  *
@@ -32,40 +26,21 @@ class UMLFileDialog : public QObject
 {
     Q_OBJECT
 public:
-#if QT_VERSION >= 0x050000
     UMLFileDialog(const QUrl &startDir, const QString &filter, QWidget *parent, QWidget *widget=0);
-#else
-    UMLFileDialog(const KUrl &startDir, const QString &filter, QWidget *parent, QWidget *widget=0);
-#endif
     ~UMLFileDialog();
 
     int exec();
     void setCaption(const QString &caption);
-#if QT_VERSION >= 0x050000
     void setAcceptMode(QFileDialog::AcceptMode mode);
     void setMimeTypeFilters(const QStringList &filters);
 
     void selectUrl(const QUrl &url);
     void setUrl(const QUrl &url);
     QUrl selectedUrl();
-#else
-    void setOperationMode(KFileDialog::OperationMode mode);
-    void setUrl(const KUrl &url, bool clearforward=true);
-    KUrl selectedUrl();
-#endif
     void setSelection(const QString &name);
 
-#if QT_VERSION < 0x050000
-    void setMimeFilter(const QStringList &types, const QString &defaultType=QString());
-    QString currentMimeFilter();
-#endif
-
 protected:
-#if QT_VERSION >= 0x050000
     QFileDialog *m_dialog;
-#else
-    KFileDialog *m_dialog;
-#endif
 };
 
 #endif
diff --git a/umbrello/dialogs/umlforeignkeyconstraintdialog.cpp b/umbrello/dialogs/umlforeignkeyconstraintdialog.cpp
index 6bf0846e25ce4fbc917e437af72a7737d33567fc..0b99433ffa90a949007fd9c2759a2e415a8a4c40 100644
--- a/umbrello/dialogs/umlforeignkeyconstraintdialog.cpp
+++ b/umbrello/dialogs/umlforeignkeyconstraintdialog.cpp
@@ -30,9 +30,6 @@
 #include "icon_utils.h"
 
 #include <kcombobox.h>
-#if QT_VERSION < 0x050000
-#include <kdialogbuttonbox.h>
-#endif
 #include <klineedit.h>
 #include <KLocalizedString>
 #include <KMessageBox>
@@ -315,19 +312,11 @@ void UMLForeignKeyConstraintDialog::setupColumnPage()
     m_ColumnWidgets.referencedColumnCB = new KComboBox();
     columnsLayout->addWidget(m_ColumnWidgets.referencedColumnCB, 1, 1);
 
-#if QT_VERSION >= 0x050000
     QDialogButtonBox* buttonBox = new QDialogButtonBox();
     m_ColumnWidgets.addPB = buttonBox->addButton(i18n("&Add"), QDialogButtonBox::ActionRole);
     connect(m_ColumnWidgets.addPB, &QPushButton::clicked, this, &UMLForeignKeyConstraintDialog::slotAddPair);
     m_ColumnWidgets.removePB = buttonBox->addButton(i18n("&Delete"), QDialogButtonBox::ActionRole);
     connect(m_ColumnWidgets.removePB, &QPushButton::clicked, this, &UMLForeignKeyConstraintDialog::slotDeletePair);
-#else
-    KDialogButtonBox* buttonBox = new KDialogButtonBox(page);
-    m_ColumnWidgets.addPB = buttonBox->addButton(i18n("&Add"), KDialogButtonBox::ActionRole, this,
-                            SLOT(slotAddPair()));
-    m_ColumnWidgets.removePB = buttonBox->addButton(i18n("&Delete"), KDialogButtonBox::ActionRole, this,
-                               SLOT(slotDeletePair()));
-#endif
 
     columnsLayout->addWidget(buttonBox, 2, 1);
 
diff --git a/umbrello/dialogs/umloperationdialog.cpp b/umbrello/dialogs/umloperationdialog.cpp
index 1d10e8f2ff311d44a61efda780b24aa7d9a7c44c..4afa9c069c48da3ea5d50d0fea377a9a3a3c7d09 100644
--- a/umbrello/dialogs/umloperationdialog.cpp
+++ b/umbrello/dialogs/umloperationdialog.cpp
@@ -32,9 +32,6 @@
 #include "visibilityenumwidget.h"
 
 //kde includes
-#if QT_VERSION < 0x050000
-#include <kdialogbuttonbox.h>
-#endif
 #include <klineedit.h>
 #include <kcombobox.h>
 #include <KLocalizedString>
@@ -140,7 +137,6 @@ void UMLOperationDialog::setupDialog()
     m_pDownButton->setEnabled(false);
     buttonLayout->addWidget(m_pDownButton);
 
-#if QT_VERSION >= 0x050000
     QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pParmsGB);
     QPushButton* newParam = buttonBox->addButton(i18n("Ne&w Parameter..."), QDialogButtonBox::ActionRole);
     connect(newParam, &QPushButton::clicked, this, &UMLOperationDialog::slotNewParameter);
@@ -148,15 +144,6 @@ void UMLOperationDialog::setupDialog()
     connect(m_pDeleteButton, &QPushButton::clicked, this, &UMLOperationDialog::slotDeleteParameter);
     m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), QDialogButtonBox::ActionRole);
     connect(m_pPropertiesButton, &QPushButton::clicked, this, &UMLOperationDialog::slotParameterProperties);
-#else
-    KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pParmsGB);
-    buttonBox->addButton(i18n("Ne&w Parameter..."), KDialogButtonBox::ActionRole,
-                          this, SLOT(slotNewParameter()));
-    m_pDeleteButton = buttonBox->addButton(i18n("&Delete"), KDialogButtonBox::ActionRole,
-                                            this, SLOT(slotDeleteParameter()));
-    m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), KDialogButtonBox::ActionRole,
-                          this, SLOT(slotParameterProperties()));
-#endif
 
     parmsHBoxLayout->addWidget(m_pParmsLW);
     parmsHBoxLayout->addLayout(buttonLayout);
diff --git a/umbrello/dialogs/umluniqueconstraintdialog.cpp b/umbrello/dialogs/umluniqueconstraintdialog.cpp
index 4f5dd509dff750bd789231d54e53bfd68af6a4d6..e25d08497ef4feb8d1e69311af0d0918cf09f4de 100644
--- a/umbrello/dialogs/umluniqueconstraintdialog.cpp
+++ b/umbrello/dialogs/umluniqueconstraintdialog.cpp
@@ -25,9 +25,6 @@
 #include "umldoc.h"
 
 #include <kcombobox.h>
-#if QT_VERSION < 0x050000
-#include <kdialogbuttonbox.h>
-#endif
 #include <klineedit.h>
 #include <KLocalizedString>
 #include <KMessageBox>
@@ -110,20 +107,11 @@ void UMLUniqueConstraintDialog::setupDialog()
     comboButtonHBoxLayout->addWidget(m_pAttributeCB);
 
     //the action buttons
-#if QT_VERSION >= 0x050000
     QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pAttributeListGB);
     m_pAddPB = buttonBox->addButton(i18n("&Add"), QDialogButtonBox::ActionRole);
     connect(m_pAddPB, &QPushButton::clicked, this, &UMLUniqueConstraintDialog::slotAddAttribute);
     m_pRemovePB = buttonBox->addButton(i18n("&Delete"), QDialogButtonBox::ActionRole);
     connect(m_pRemovePB, &QPushButton::clicked, this, &UMLUniqueConstraintDialog::slotDeleteAttribute);
-#else
-    KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pAttributeListGB);
-    m_pAddPB = buttonBox->addButton(i18n("&Add"), KDialogButtonBox::ActionRole, this,
-                          SLOT(slotAddAttribute()));
-    m_pRemovePB = buttonBox->addButton(i18n("&Delete"), KDialogButtonBox::ActionRole, this,
-                          SLOT(slotDeleteAttribute()));
-#endif
-
     comboButtonHBoxLayout->addWidget(buttonBox);
 
     // We first insert all attributes to the combo box
diff --git a/umbrello/dialogs/umlviewdialog.cpp b/umbrello/dialogs/umlviewdialog.cpp
index 9023c95f3104c334179a224394868728ae53d868..a23d7050969c9baae1c7c1656b18838c44a7fb4d 100644
--- a/umbrello/dialogs/umlviewdialog.cpp
+++ b/umbrello/dialogs/umlviewdialog.cpp
@@ -23,16 +23,11 @@
 #include "umlwidgetstylepage.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kfontchooser.h>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QFontDialog>
-#endif
 #include <QFrame>
 #include <QHBoxLayout>
 
@@ -130,16 +125,10 @@ void UMLViewDialog::setupStylePage()
  */
 void UMLViewDialog::setupFontPage()
 {
-#if QT_VERSION >= 0x050000
     m_pChooser = new QFontDialog();
     m_pChooser->setCurrentFont(m_pScene->optionState().uiState.font);
     m_pChooser->setOption(QFontDialog::NoButtons);
-#else
-    m_pChooser = new KFontChooser(0, KFontChooser::NoDisplayFlags, QStringList(), 0);
-    m_pChooser->setFont(m_pScene->optionState().uiState.font);
-#endif
-    m_pageFontItem = createPage(i18n("Font"), i18n("Font Settings"),
-                                Icon_Utils::it_Properties_Font, m_pChooser);
+    m_pageFontItem = createPage(i18n("Font"), i18n("Font Settings"), Icon_Utils::it_Properties_Font, m_pChooser);
 }
 
 /**
@@ -162,11 +151,7 @@ void UMLViewDialog::applyPage(KPageWidgetItem *item)
     }
     else if (item == m_pageFontItem)
     {
-#if QT_VERSION >= 0x050000
         QFont font = m_pChooser->currentFont();
-#else
-        QFont font = m_pChooser->font();
-#endif
         uDebug() << "setting font " << font.toString();
         m_pScene->setFont(font, true);
     }
diff --git a/umbrello/dialogs/umlviewdialog.h b/umbrello/dialogs/umlviewdialog.h
index 6713f1c698566a578db94648a16a1d1595459568..ae343abd37e75e6cb02902160a536fead47a39b2 100644
--- a/umbrello/dialogs/umlviewdialog.h
+++ b/umbrello/dialogs/umlviewdialog.h
@@ -23,11 +23,7 @@ class DiagramPropertiesPage;
 class UMLScene;
 class UMLView;
 class UMLWidgetStylePage;
-#if QT_VERSION >= 0x050000
 class QFontDialog;
-#else
-class KFontChooser;
-#endif
 
 /**
  * @author Paul Hensgen
@@ -55,11 +51,7 @@ protected:
     void checkName();
 
     UMLScene*              m_pScene;  ///< the scene to represent
-#if QT_VERSION >= 0x050000
     QFontDialog*           m_pChooser;
-#else
-    KFontChooser*          m_pChooser;
-#endif
     DiagramPropertiesPage* m_diagramPropertiesPage;
     ClassOptionsPage*      m_pOptionsPage;
     KPageWidgetItem*       m_pageStyleItem;
diff --git a/umbrello/dialogs/widgets/imagetypewidget.cpp b/umbrello/dialogs/widgets/imagetypewidget.cpp
index b93be606f0c574143124a7df5b380a49e0fd6778..2625e79eec43e14dfa1e9b3f2648050238c0640e 100644
--- a/umbrello/dialogs/widgets/imagetypewidget.cpp
+++ b/umbrello/dialogs/widgets/imagetypewidget.cpp
@@ -22,9 +22,6 @@
 
 // kde includes
 #include <KComboBox>
-#if QT_VERSION < 0x050000
-#include <kfilefiltercombo.h>
-#endif
 #include <KLocalizedString>
 
 // qt includes
@@ -46,14 +43,9 @@ ImageTypeWidget::ImageTypeWidget(const QStringList &imageTypes, const QString &_
     m_label->setToolTip(i18n("The format that the images will be exported to"));
     layout->addWidget(m_label);
 
-#if QT_VERSION >= 0x050000
     m_comboBox = new KComboBox(this);
     m_comboBox->addItems(imageTypes);
     m_comboBox->setCurrentText(_default);
-#else
-    m_comboBox = new KFileFilterCombo(this);
-    m_comboBox->setMimeFilter(imageTypes, _default);
-#endif
     layout->addWidget(m_comboBox, 2);
     m_comboBox->setEditable(false);
     m_label->setBuddy(m_comboBox);
@@ -67,11 +59,7 @@ ImageTypeWidget::ImageTypeWidget(const QStringList &imageTypes, const QString &_
  */
 QString ImageTypeWidget::currentType()
 {
-#if QT_VERSION >= 0x050000
     return m_comboBox->currentText();
-#else
-    return m_comboBox->currentFilter();
-#endif
 }
 /**
  * Slot to export index changed signal from the combo box.
diff --git a/umbrello/dialogs/widgets/imagetypewidget.h b/umbrello/dialogs/widgets/imagetypewidget.h
index 55a24f17c85df4b2eca2bdf777d3f5d07de02bad..7512737e60d5a680b3d61d5889a8cd72f185181f 100644
--- a/umbrello/dialogs/widgets/imagetypewidget.h
+++ b/umbrello/dialogs/widgets/imagetypewidget.h
@@ -24,11 +24,7 @@
 #include <QWidget>
 
 // KDE forwards
-#if QT_VERSION >= 0x050000
 class KComboBox;
-#else
-class KFileFilterCombo;
-#endif
 
 // Qt forwards
 class QHBoxLayout;
@@ -43,11 +39,7 @@ public:
 
 private:
     QLabel *m_label;
-#if QT_VERSION >= 0x050000
     KComboBox* m_comboBox;  ///< The image type selected.
-#else
-    KFileFilterCombo* m_comboBox;  ///< The image type selected.
-#endif
 
 signals:
     void currentIndexChanged(const QString &index);
diff --git a/umbrello/dialogs/widgets/resolutionwidget.cpp b/umbrello/dialogs/widgets/resolutionwidget.cpp
index 52ebaba17a7cb3adb3cd5a7011206508621bf4b5..d6f06ef6f626d092d98b6958e7b3d1bdc7dff871 100644
--- a/umbrello/dialogs/widgets/resolutionwidget.cpp
+++ b/umbrello/dialogs/widgets/resolutionwidget.cpp
@@ -49,9 +49,6 @@ ResolutionWidget::ResolutionWidget(QWidget *parent) :
     layout->addWidget(postLabel);
 
     m_comboBox->setDuplicatesEnabled(false);  // only allow one of each type in box
-#if QT_VERSION < 0x050000
-    m_comboBox->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
     m_comboBox->clear();
     m_comboBox->addItem(QLatin1String("default"), QVariant(0.0));
     foreach(const QString &key, resolutions()) {
diff --git a/umbrello/dialogs/widgets/umldatatypewidget.cpp b/umbrello/dialogs/widgets/umldatatypewidget.cpp
index 5cd1fbaab377f68722254d9f683b028c3b510d38..b6ab1e972701bfc4a31ff3002f230418160a0976 100644
--- a/umbrello/dialogs/widgets/umldatatypewidget.cpp
+++ b/umbrello/dialogs/widgets/umldatatypewidget.cpp
@@ -107,9 +107,6 @@ void UMLDatatypeWidget::init()
     m_label->setBuddy(m_comboBox);
 
     m_comboBox->setDuplicatesEnabled(false); // only allow one of each type in box
-#if QT_VERSION < 0x050000
-    m_comboBox->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
     setLayout(layout);
 }
 
diff --git a/umbrello/dialogs/widgets/umlstereotypewidget.cpp b/umbrello/dialogs/widgets/umlstereotypewidget.cpp
index 6d7f3e46903a83e3494889a27dabdeb832358416..237c6daf1d5fc414e5e0f0775e7364ee85fc30ba 100644
--- a/umbrello/dialogs/widgets/umlstereotypewidget.cpp
+++ b/umbrello/dialogs/widgets/umlstereotypewidget.cpp
@@ -23,7 +23,7 @@
 #include <QLabel>
 #include <QWidget>
 
-Q_DECLARE_METATYPE(UMLStereotype*);
+Q_DECLARE_METATYPE(UMLStereotype*)
 
 UMLStereotypeWidget::UMLStereotypeWidget(UMLObject *object, QWidget *parent)
     : QWidget(parent),
@@ -102,9 +102,6 @@ void UMLStereotypeWidget::init()
     m_label->setBuddy(m_comboBox);
 
     m_comboBox->setDuplicatesEnabled(false);  // only allow one of each type in box
-#if QT_VERSION < 0x050000
-    m_comboBox->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
     insertItems(m_object->umlStereotype());
     setLayout(layout);
 }
diff --git a/umbrello/docgenerators/docbook2xhtmlgeneratorjob.cpp b/umbrello/docgenerators/docbook2xhtmlgeneratorjob.cpp
index eb2cc0c69f5657540dd06ba9bbaf40076d65da64..8fb4f50a4818b315d2b45b763c47f8476fc806f9 100644
--- a/umbrello/docgenerators/docbook2xhtmlgeneratorjob.cpp
+++ b/umbrello/docgenerators/docbook2xhtmlgeneratorjob.cpp
@@ -27,18 +27,11 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kstandarddirs.h>
-#include <ktemporaryfile.h>
-#include <KUrl>
-#endif
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QStandardPaths>
 #include <QTemporaryFile>
 #include <QUrl>
-#endif
 
 #include <QTextStream>
 
@@ -50,13 +43,8 @@ extern int xmlLoadExtDtdDefaultValue;
  * @param parent     Parent object for QThread constructor
  */
 
-#if QT_VERSION >= 0x050000
 Docbook2XhtmlGeneratorJob::Docbook2XhtmlGeneratorJob(QUrl& docBookUrl, QObject* parent)
     :QThread(parent), m_docbookUrl(docBookUrl)
-#else
-Docbook2XhtmlGeneratorJob::Docbook2XhtmlGeneratorJob(KUrl& docBookUrl, QObject* parent)
-    :QThread(parent), m_docbookUrl(docBookUrl)
-#endif
 {
 }
 
@@ -72,11 +60,7 @@ void Docbook2XhtmlGeneratorJob::run()
 
   umlDoc->writeToStatusBar(i18n("Exporting to XHTML..."));
 
-#if QT_VERSION >= 0x050000
   QString xsltFileName(QStandardPaths::locate(QStandardPaths::DataLocation, QLatin1String("docbook2xhtml.xsl")));
-#else
-  QString xsltFileName(KGlobal::dirs()->findResource("appdata", QLatin1String("docbook2xhtml.xsl")));
-#endif
   uDebug() << "XSLT file is'" << xsltFileName << "'";
   QFile xsltFile(xsltFileName);
   xsltFile.open(QIODevice::ReadOnly);
@@ -84,22 +68,14 @@ void Docbook2XhtmlGeneratorJob::run()
   uDebug() << "XSLT is'" << xslt << "'";
   xsltFile.close();
 
-#if QT_VERSION >= 0x050000
   QString localXsl = QStandardPaths::locate(QStandardPaths::GenericDataLocation, QLatin1String("ksgmltools2/docbook/xsl/html/docbook.xsl"));
-#else
-  QString localXsl = KGlobal::dirs()->findResource("data", QLatin1String("ksgmltools2/docbook/xsl/html/docbook.xsl"));
-#endif
   uDebug() << "Local xsl is'" << localXsl << "'";
   if (!localXsl.isEmpty())
   {
     localXsl = QLatin1String("href=\"file://") + localXsl + QLatin1String("\"");
     xslt.replace(QRegExp(QLatin1String("href=\"http://[^\"]*\"")), localXsl);
   }
-#if QT_VERSION >= 0x050000
   QTemporaryFile tmpXsl;
-#else
-  KTemporaryFile tmpXsl;
-#endif
   tmpXsl.setAutoRemove(false);
   tmpXsl.open();
   QTextStream str (&tmpXsl);
@@ -115,11 +91,7 @@ void Docbook2XhtmlGeneratorJob::run()
   uDebug() << "Applying stylesheet ";
   res = xsltApplyStylesheet(cur, doc, params);
 
-#if QT_VERSION >= 0x050000
   QTemporaryFile tmpXhtml;
-#else
-  KTemporaryFile tmpXhtml;
-#endif
   tmpXhtml.setAutoRemove(false);
   tmpXhtml.open();
 
diff --git a/umbrello/docgenerators/docbook2xhtmlgeneratorjob.h b/umbrello/docgenerators/docbook2xhtmlgeneratorjob.h
index 6a118ffc6f66c5e8905fc14ba51edb4f4f8389ba..ed6b92dacb29dab6364eb88df58a074b8e8717f2 100644
--- a/umbrello/docgenerators/docbook2xhtmlgeneratorjob.h
+++ b/umbrello/docgenerators/docbook2xhtmlgeneratorjob.h
@@ -12,12 +12,7 @@
 #define DOCBOOK2XHTMLGENERATORJOB_H
 
 #include <QThread>
-
-#if QT_VERSION >= 0x050000
 #include <QUrl>
-#else
-#include <KUrl>
-#endif
 
 /**
  * This class is used to generate XHTML from Docbook.
@@ -32,20 +27,12 @@ class Docbook2XhtmlGeneratorJob : public QThread
 {
     Q_OBJECT
   public:
-#if QT_VERSION >= 0x050000
     Docbook2XhtmlGeneratorJob(QUrl& docBookUrl, QObject* parent);
-#else
-    Docbook2XhtmlGeneratorJob(KUrl& docBookUrl, QObject* parent);
-#endif
   protected:
      void run();
 
   private:
-#if QT_VERSION >= 0x050000
      QUrl m_docbookUrl;
-#else
-     KUrl m_docbookUrl;
-#endif
 
   signals:
      void xhtmlGenerated(const QString&);
diff --git a/umbrello/docgenerators/docbookgenerator.cpp b/umbrello/docgenerators/docbookgenerator.cpp
index 55f759402bd50bb62e51bbaeac65615caa28b194..04ccdc4f27b64d80ea1efb9ba55970c21b4c40aa 100644
--- a/umbrello/docgenerators/docbookgenerator.cpp
+++ b/umbrello/docgenerators/docbookgenerator.cpp
@@ -17,14 +17,9 @@
 #include "umldoc.h"
 #include "umlviewimageexportermodel.h"
 
-#if QT_VERSION >= 0x050000
 #include <kjobwidgets.h>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
-#if QT_VERSION < 0x050000
-#include <kio/netaccess.h>
-#endif
 #include <kio/job.h>
 
 #include <QApplication>
@@ -61,18 +56,10 @@ DocbookGenerator::~DocbookGenerator()
  */
 bool DocbookGenerator::generateDocbookForProject()
 {
-#if QT_VERSION >= 0x050000
     QUrl url = umlDoc->url();
-#else
-    KUrl url = umlDoc->url();
-#endif
   QString fileName = url.fileName();
   fileName.remove(QRegExp(QLatin1String(".xmi$")));
-#if QT_VERSION >= 0x050000
   url.setPath(url.path() + QLatin1Char('/') + fileName);
-#else
-  url.setFileName(fileName);
-#endif
   uDebug() << "Exporting to directory: " << url;
   generateDocbookForProjectInto(url);
   return true;
@@ -85,11 +72,7 @@ bool DocbookGenerator::generateDocbookForProject()
  * @todo better handling of error conditions
  * @return true if saving is successful and false otherwise.
  */
-#if QT_VERSION >= 0x050000
 void DocbookGenerator::generateDocbookForProjectInto(const QUrl& destDir)
-#else
-void DocbookGenerator::generateDocbookForProjectInto(const KUrl& destDir)
-#endif
 {
     m_destDir = destDir;
     umlDoc->writeToStatusBar(i18n("Exporting all views..."));
@@ -114,28 +97,14 @@ void DocbookGenerator::generateDocbookForProjectInto(const KUrl& destDir)
 void DocbookGenerator::slotDocbookGenerationFinished(const QString& tmpFileName)
 {
     uDebug() << "Generation Finished" << tmpFileName;
-#if QT_VERSION >= 0x050000
     QUrl url = umlDoc->url();
-#else
-    KUrl url = umlDoc->url();
-#endif
     QString fileName = url.fileName();
     fileName.replace(QRegExp(QLatin1String(".xmi$")), QLatin1String(".docbook"));
-#if QT_VERSION >= 0x050000
     url.setPath(m_destDir.path() + QLatin1Char('/') + fileName);
-#else
-    url.setPath(m_destDir.path());
-    url.addPath(fileName);
-#endif
-#if QT_VERSION >= 0x050000
     KIO::Job* job = KIO::file_copy(QUrl::fromLocalFile(tmpFileName), url, -1, KIO::Overwrite | KIO::HideProgressInfo);
     KJobWidgets::setWindow(job, (QWidget*)UMLApp::app());
     job->exec();
     if (!job->error()) {
-#else
-    KIO::Job* job = KIO::file_copy(KUrl::fromPath(tmpFileName), url, -1, KIO::Overwrite | KIO::HideProgressInfo);
-    if (KIO::NetAccess::synchronousRun(job, (QWidget*)UMLApp::app())) {
-#endif
         umlDoc->writeToStatusBar(i18n("Docbook Generation Complete..."));
         m_pStatus = true;
     } else {
diff --git a/umbrello/docgenerators/docbookgenerator.h b/umbrello/docgenerators/docbookgenerator.h
index 1e043610111da041a53a670869dca0c6436b0af2..61165dc4988630c10e3407a33f05dcd4be4d9371 100644
--- a/umbrello/docgenerators/docbookgenerator.h
+++ b/umbrello/docgenerators/docbookgenerator.h
@@ -13,15 +13,8 @@
 #define DOCBOOKGENERATOR_H
 
 #include <QtGlobal>
-
-#if QT_VERSION < 0x050000
-#include <kurl.h>
-#endif
-
 #include <QObject>
-#if QT_VERSION >= 0x050000
 #include <QUrl>
-#endif
 
 class UMLDoc;
 class DocbookGeneratorJob;
@@ -45,11 +38,7 @@ class DocbookGenerator : public QObject
     virtual ~DocbookGenerator();
 
     bool generateDocbookForProject();
-#if QT_VERSION >= 0x050000
     void generateDocbookForProjectInto(const QUrl& destDir);
-#else
-    void generateDocbookForProjectInto(const KUrl& destDir);
-#endif
   signals:
 
     void finished(bool status);
@@ -66,11 +55,7 @@ class DocbookGenerator : public QObject
 
     bool m_pStatus;
     bool m_pThreadFinished;
-#if QT_VERSION >= 0x050000
     QUrl m_destDir;
-#else
-    KUrl m_destDir;
-#endif
     UMLDoc* umlDoc;
 };
 
diff --git a/umbrello/docgenerators/docbookgeneratorjob.cpp b/umbrello/docgenerators/docbookgeneratorjob.cpp
index 91076773789c89b072142da74bcaece977aa5177..f5680c1e9033ac26913a152b3ac3bfb77656f619 100644
--- a/umbrello/docgenerators/docbookgeneratorjob.cpp
+++ b/umbrello/docgenerators/docbookgeneratorjob.cpp
@@ -26,18 +26,12 @@
 #include <libxslt/xsltutils.h>
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kstandarddirs.h>
-#include <ktemporaryfile.h>
-#endif
 #include <KLocalizedString>
 
 // qt includes
 #include <QTextStream>
-#if QT_VERSION >= 0x050000
 #include <QStandardPaths>
 #include <QTemporaryFile>
-#endif
 
 extern int xmlLoadExtDtdDefaultValue;
 
@@ -55,11 +49,7 @@ void DocbookGeneratorJob::run()
     QString xmi;
     QTextStream xmiStream(&xmi, QIODevice::WriteOnly);
 
-#if QT_VERSION >= 0x050000
     QTemporaryFile file; // we need this tmp file if we are writing to a remote file
-#else
-    KTemporaryFile file; // we need this tmp file if we are writing to a remote file
-#endif
     file.setAutoRemove(false);
 
     // lets open the file for writing
@@ -77,11 +67,7 @@ void DocbookGeneratorJob::run()
     int nbparams = 0;
     params[nbparams] = NULL;
 
-#if QT_VERSION >= 0x050000
     QString xsltFile(QStandardPaths::locate(QStandardPaths::DataLocation, QLatin1String("xmi2docbook.xsl")));
-#else
-    QString xsltFile(KGlobal::dirs()->findResource("appdata", QLatin1String("xmi2docbook.xsl")));
-#endif
 
     xmlSubstituteEntitiesDefault(1);
     xmlLoadExtDtdDefaultValue = 1;
@@ -89,11 +75,7 @@ void DocbookGeneratorJob::run()
     doc = xmlParseFile((const char*)(file.fileName().toUtf8()));
     res = xsltApplyStylesheet(cur, doc, params);
 
-#if QT_VERSION >= 0x050000
     QTemporaryFile tmpDocBook;
-#else
-    KTemporaryFile tmpDocBook;
-#endif
     tmpDocBook.setAutoRemove(false);
     tmpDocBook.open();
 
diff --git a/umbrello/docgenerators/xhtmlgenerator.cpp b/umbrello/docgenerators/xhtmlgenerator.cpp
index c5851f28dcc902329e127e868e11c70470fc80de..6ffd9fd402df474763f8b616763d573dbafad24d 100644
--- a/umbrello/docgenerators/xhtmlgenerator.cpp
+++ b/umbrello/docgenerators/xhtmlgenerator.cpp
@@ -18,23 +18,15 @@
 #include "umlviewimageexportermodel.h"
 #include "docbookgenerator.h"
 
-#if QT_VERSION >= 0x050000
 #include <kjobwidgets.h>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
-#if QT_VERSION < 0x050000
-#include <kio/netaccess.h>
-#include <kstandarddirs.h>
-#endif
 #include <kio/job.h>
 
 #include <QApplication>
 #include <QFile>
 #include <QRegExp>
-#if QT_VERSION >= 0x050000
 #include <QStandardPaths>
-#endif
 #include <QTextStream>
 
 /**
@@ -66,18 +58,10 @@ XhtmlGenerator::~XhtmlGenerator()
  */
 bool XhtmlGenerator::generateXhtmlForProject()
 {
-#if QT_VERSION >= 0x050000
     QUrl url = m_umlDoc->url();
-#else
-    KUrl url = m_umlDoc->url();
-#endif
     QString fileName = url.fileName();
     fileName.remove(QRegExp(QLatin1String(".xmi$")));
-#if QT_VERSION >= 0x050000
     url.setPath(fileName);
-#else
-    url.setFileName(fileName);
-#endif
     uDebug() << "Exporting to directory: " << url;
     return generateXhtmlForProjectInto(url);
 }
@@ -89,11 +73,7 @@ bool XhtmlGenerator::generateXhtmlForProject()
  * @todo better handling of error conditions
  * @return true if saving is successful and false otherwise.
  */
-#if QT_VERSION >= 0x050000
 bool XhtmlGenerator::generateXhtmlForProjectInto(const QUrl& destDir)
-#else
-bool XhtmlGenerator::generateXhtmlForProjectInto(const KUrl& destDir)
-#endif
 {
     uDebug() << "First convert to docbook";
     m_destDir = destDir;
@@ -119,19 +99,10 @@ void XhtmlGenerator::slotDocbookToXhtml(bool status)
         return;
     }
     else {
-#if QT_VERSION >= 0x050000
         QUrl url = m_umlDoc->url();
-#else
-        KUrl url = m_umlDoc->url();
-#endif
         QString fileName = url.fileName();
         fileName.replace(QRegExp(QLatin1String(".xmi$")), QLatin1String(".docbook"));
-#if QT_VERSION >= 0x050000
         url.setPath(m_destDir.path() + QLatin1Char('/') + fileName);
-#else
-        url.setPath(m_destDir.path());
-        url.addPath(fileName);
-#endif
         m_umlDoc->writeToStatusBar(i18n("Generating XHTML..."));
         m_d2xg  = new Docbook2XhtmlGeneratorJob(url, this);
         connect(m_d2xg, &Docbook2XhtmlGeneratorJob::xhtmlGenerated, this, &XhtmlGenerator::slotHtmlGenerated);
@@ -149,28 +120,14 @@ void XhtmlGenerator::slotDocbookToXhtml(bool status)
 void XhtmlGenerator::slotHtmlGenerated(const QString& tmpFileName)
 {
     uDebug() << "HTML Generated " << tmpFileName;
-#if QT_VERSION >= 0x050000
     QUrl url = m_umlDoc->url();
-#else
-    KUrl url = m_umlDoc->url();
-#endif
     QString fileName = url.fileName();
     fileName.replace(QRegExp(QLatin1String(".xmi$")), QLatin1String(".html"));
-#if QT_VERSION >= 0x050000
     url.setPath(m_destDir.path() + QLatin1Char('/') + fileName);
-#else
-    url.setPath(m_destDir.path());
-    url.addPath(fileName);
-#endif
-#if QT_VERSION >= 0x050000
     KIO::Job* htmlCopyJob = KIO::file_copy(QUrl::fromLocalFile(tmpFileName), url, -1, KIO::Overwrite | KIO::HideProgressInfo);
     KJobWidgets::setWindow(htmlCopyJob, (QWidget*)UMLApp::app());
     htmlCopyJob->exec();
     if (!htmlCopyJob->error()) {
-#else
-    KIO::Job* htmlCopyJob = KIO::file_copy(KUrl::fromPath(tmpFileName), url, -1, KIO::Overwrite | KIO::HideProgressInfo);
-    if (KIO::NetAccess::synchronousRun(htmlCopyJob, (QWidget*)UMLApp::app())) {
-#endif
         m_umlDoc->writeToStatusBar(i18n("XHTML Generation Complete..."));
     } else {
         m_pStatus = false;
@@ -179,28 +136,13 @@ void XhtmlGenerator::slotHtmlGenerated(const QString& tmpFileName)
 
     m_umlDoc->writeToStatusBar(i18n("Copying CSS..."));
 
-#if QT_VERSION >= 0x050000
     QString cssFileName(QStandardPaths::locate(QStandardPaths::GenericDataLocation, QLatin1String("xmi.css")));
-#else
-    QString cssFileName(KGlobal::dirs()->findResource("appdata", QLatin1String("xmi.css")));
-#endif
-#if QT_VERSION >= 0x050000
     QUrl cssUrl = m_destDir;
     cssUrl.setPath(cssUrl.path() + QLatin1Char('/') + QLatin1String("xmi.css"));
-#else
-    KUrl cssUrl = m_destDir;
-    cssUrl.addPath(QLatin1String("xmi.css"));
-#endif
-#if QT_VERSION >= 0x050000
     KIO::Job* cssJob = KIO::file_copy(QUrl::fromLocalFile(cssFileName), cssUrl, -1, KIO::Overwrite | KIO::HideProgressInfo);
     KJobWidgets::setWindow(cssJob, (QWidget*)UMLApp::app());
     cssJob->exec();
     if (!cssJob->error()) {
-#else
-    KIO::Job* cssJob = KIO::file_copy(cssFileName, cssUrl, -1, KIO::Overwrite | KIO::HideProgressInfo);
-
-    if (KIO::NetAccess::synchronousRun(cssJob, (QWidget*)UMLApp::app())) {
-#endif
         m_umlDoc->writeToStatusBar(i18n("Finished Copying CSS..."));
         m_pStatus = true;
     } else {
diff --git a/umbrello/docgenerators/xhtmlgenerator.h b/umbrello/docgenerators/xhtmlgenerator.h
index 45b1ff4c1abef2e59857d96321077f8e3b644e47..a3b906073a8ae4f8712ffd1a1b5f52085abc7d2f 100644
--- a/umbrello/docgenerators/xhtmlgenerator.h
+++ b/umbrello/docgenerators/xhtmlgenerator.h
@@ -14,14 +14,8 @@
 
 #include "basictypes.h"
 
-#if QT_VERSION < 0x050000
-#include <kurl.h>
-#endif
-
 #include <QObject>
-#if QT_VERSION >= 0x050000
 #include <QUrl>
-#endif
 
 class UMLDoc;
 
@@ -47,11 +41,7 @@ public:
     virtual ~XhtmlGenerator();
 
     bool generateXhtmlForProject();
-#if QT_VERSION >= 0x050000
     bool generateXhtmlForProjectInto(const QUrl& destDir);
-#else
-    bool generateXhtmlForProjectInto(const KUrl& destDir);
-#endif
 signals:
 
     void finished(bool status);
@@ -70,11 +60,7 @@ private:
     bool m_pStatus;
     bool m_pThreadFinished;
 
-#if QT_VERSION >= 0x050000
     QUrl m_destDir;  ///< Destination directory where the final documentation will be written.
-#else
-    KUrl m_destDir;  ///< Destination directory where the final documentation will be written.
-#endif
     UMLDoc* m_umlDoc;
 };
 
diff --git a/umbrello/dotgenerator.cpp b/umbrello/dotgenerator.cpp
index 5ec6a4f43e207f592d2cd190da67a1f989d0f6f7..db0e722a81208627084e71033e0425d84c2023b9 100644
--- a/umbrello/dotgenerator.cpp
+++ b/umbrello/dotgenerator.cpp
@@ -23,9 +23,6 @@
 // kde includes
 #include <KConfigGroup>
 #include <KDesktopFile>
-#if QT_VERSION < 0x050000
-#include <KStandardDirs>
-#endif
 
 // qt includes
 #include <QFile>
@@ -33,9 +30,7 @@
 #include <QProcess>
 #include <QRectF>
 #include <QRegExp>
-#if QT_VERSION >= 0x050000
 #include <QStandardPaths>
-#endif
 #include <QString>
 #include <QTemporaryFile>
 #include <QTextStream>
@@ -190,13 +185,7 @@ void DotGenerator::setUseFullNodeLabels(bool state)
 bool DotGenerator::availableConfigFiles(UMLScene *scene, QHash<QString, QString> &configFiles)
 {
     QString diagramType = Uml::DiagramType::toString(scene->type()).toLower();
-#if QT_VERSION >= 0x050000
     QStringList fileNames = QStandardPaths::locateAll(QStandardPaths::GenericDataLocation, QString::fromLatin1("umbrello/layouts/%1*.desktop").arg(diagramType));
-#else
-    KStandardDirs dirs;
-
-    QStringList fileNames = dirs.findAllResources("data", QString::fromLatin1("umbrello/layouts/%1*.desktop").arg(diagramType));
-#endif
     foreach(const QString &fileName, fileNames) {
         QFileInfo fi(fileName);
         QString baseName;
@@ -230,11 +219,7 @@ bool DotGenerator::readConfigFile(QString diagramType, const QString &variant)
 
     QString configFileName;
     foreach(const QString &fileName, fileNames) {
-#if QT_VERSION >= 0x050000
         configFileName = QStandardPaths::locate(QStandardPaths::GenericDataLocation, QString::fromLatin1("umbrello/layouts/%1").arg(fileName));
-#else
-        configFileName = KStandardDirs::locate("data", QString::fromLatin1("umbrello/layouts/%1").arg(fileName));
-#endif
         if (!configFileName.isEmpty())
             break;
     }
diff --git a/umbrello/icon_utils.h b/umbrello/icon_utils.h
index 381dc5ef5c5d041a9b99f51321f58449a3235cc8..8dfee217d2e4cdc148d5228b260de2704110c2e0 100644
--- a/umbrello/icon_utils.h
+++ b/umbrello/icon_utils.h
@@ -23,16 +23,9 @@
 // app includes
 #include "basictypes.h"
 
-// kde includes
-#if QT_VERSION < 0x050000
-#include <kicon.h>
-#endif
-
 // qt includes
 #include <QCursor>
-#if QT_VERSION >= 0x050000
 #include <QIcon>
-#endif
 #include <QPixmap>
 
 /**
diff --git a/umbrello/import_argo.cpp b/umbrello/import_argo.cpp
index 26cfd572a996e23166b02ca4ade79cc75f74ece9..8b087ea9c1afab290e0471bb1c2ecfc5250dbbfd 100644
--- a/umbrello/import_argo.cpp
+++ b/umbrello/import_argo.cpp
@@ -18,17 +18,12 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <KTempDir>
-#endif
 #include <KZip>
 
 // qt includes
 #include <QFile>
 #include <QStringList>
-#if QT_VERSION >= 0x050000
 #include <QTemporaryDir>
-#endif
 #include <QXmlStreamReader>
 
 static void reportError(const QXmlStreamReader &xml, const KZip &zipFile, const QString &fileName)
@@ -114,20 +109,11 @@ bool Import_Argo::loadFromXMIFile(const KZip &zipFile, const QString &fileName)
     if (!file)
         return false;
 
-#if QT_VERSION >= 0x050000
     QTemporaryDir tmpDir;
-#else
-    KTempDir tmpDir;
-#endif
     tmpDir.setAutoRemove(true);
 
-#if QT_VERSION >= 0x050000
     file->copyTo(tmpDir.path());
     QFile xmiFile(tmpDir.path() + QLatin1Char('/') + file->name());
-#else
-    file->copyTo(tmpDir.name());
-    QFile xmiFile(tmpDir.name() + file->name());
-#endif
     if(!xmiFile.open(QIODevice::ReadOnly)) {
         return false;
     }
diff --git a/umbrello/layoutgenerator.cpp b/umbrello/layoutgenerator.cpp
index aed6a7af15dcb1ec0bece126741b11090bcb0914..af8d89b8568bf46efce29ad566aacb406c86ca9a 100644
--- a/umbrello/layoutgenerator.cpp
+++ b/umbrello/layoutgenerator.cpp
@@ -22,9 +22,6 @@
 #include <KConfigGroup>
 #include <KDesktopFile>
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <KStandardDirs>
-#endif
 
 // qt includes
 #include <QDir>
@@ -32,9 +29,7 @@
 #include <QHash>
 #include <QProcess>
 #include <QRegExp>
-#if QT_VERSION >= 0x050000
 #include <QStandardPaths>
-#endif
 #include <QString>
 #include <QTemporaryFile>
 //#include <QTextStream>
@@ -104,11 +99,7 @@ bool LayoutGenerator::isEnabled()
  */
 QString LayoutGenerator::currentDotPath()
 {
-#if QT_VERSION >= 0x050000
     QString executable = QStandardPaths::findExecutable(QLatin1String("dot"));
-#else
-    QString executable = KStandardDirs::findExe(QLatin1String("dot"));
-#endif
     if (!executable.isEmpty()) {
         QFileInfo fi(executable);
         return fi.absolutePath();
@@ -293,12 +284,7 @@ bool LayoutGenerator::apply(UMLScene *scene)
 bool LayoutGenerator::availableConfigFiles(UMLScene *scene, QHash<QString,QString> &configFiles)
 {
     QString diagramType = Uml::DiagramType::toString(scene->type()).toLower();
-#if QT_VERSION >= 0x050000
     QStringList fileNames = QStandardPaths::locateAll(QStandardPaths::GenericDataLocation, QString::fromLatin1("umbrello/layouts/%1*.desktop").arg(diagramType));
-#else
-    KStandardDirs dirs;
-    QStringList fileNames = dirs.findAllResources("data", QString::fromLatin1("umbrello/layouts/%1*.desktop").arg(diagramType));
-#endif
     foreach(const QString &fileName, fileNames) {
         QFileInfo fi(fileName);
         QString baseName;
diff --git a/umbrello/listpopupmenu.cpp b/umbrello/listpopupmenu.cpp
index 5d8f4a28688b83ae9d543181465a32675fc551d5..d8db2f872d27653c227afe2ed5dd333afcfed0f8 100644
--- a/umbrello/listpopupmenu.cpp
+++ b/umbrello/listpopupmenu.cpp
@@ -58,11 +58,7 @@ const bool CHECKABLE = true;
  */
 
 ListPopupMenu::ListPopupMenu(QWidget *parent, MenuType type, UMLView * view)
-#if QT_VERSION >= 0x050000
     : QMenu(parent),
-#else
-    : KMenu(parent),
-#endif
     m_isListView(false)
 {
     m_TriggerObject.m_View = view;
@@ -79,11 +75,7 @@ ListPopupMenu::ListPopupMenu(QWidget *parent, MenuType type, UMLView * view)
  * @param widget   The WidgetBase object.
  */
 ListPopupMenu::ListPopupMenu(QWidget *parent, MenuType type, WidgetBase *widget)
-#if QT_VERSION >= 0x050000
     : QMenu(parent),
-#else
-    : KMenu(parent),
-#endif
     m_isListView(false)
 {
     m_TriggerObject.m_Widget = widget;
@@ -100,11 +92,7 @@ ListPopupMenu::ListPopupMenu(QWidget *parent, MenuType type, WidgetBase *widget)
  * @param object   The UMLObject of the ListViewItem
  */
 ListPopupMenu::ListPopupMenu(QWidget *parent, UMLListViewItem::ListViewType type, UMLObject* object)
-#if QT_VERSION >= 0x050000
     : QMenu(parent),
-#else
-    : KMenu(parent),
-#endif
     m_isListView(true)
 {
     m_TriggerObject.m_Object = object;
@@ -341,11 +329,7 @@ ListPopupMenu::ListPopupMenu(QWidget *parent, UMLListViewItem::ListViewType type
  * @param uniqueType The type of widget shared by all selected widgets
  */
 ListPopupMenu::ListPopupMenu(QWidget * parent, WidgetBase * object, bool multi, WidgetBase::WidgetType uniqueType)
-#if QT_VERSION >= 0x050000
     : QMenu(parent),
-#else
-    : KMenu(parent),
-#endif
     m_isListView(false)
 {
     m_TriggerObject.m_Widget = object;
@@ -404,11 +388,7 @@ void ListPopupMenu::insertSingleSelectionMenu(WidgetBase* object)
 
     case WidgetBase::wt_Category:
        {
-#if QT_VERSION >= 0x050000
          QMenu* m = makeCategoryTypeMenu(
-#else
-         KMenu* m = makeCategoryTypeMenu(
-#endif
                         static_cast<UMLCategory*>(object->umlObject()));
          m->setTitle(i18n("Category Type"));
          addMenu(m);
@@ -688,11 +668,7 @@ void ListPopupMenu::insertMultiSelectionMenu(WidgetBase::WidgetType uniqueType)
 {
     insertSubMenuAlign();
 
-#if QT_VERSION >= 0x050000
     QMenu* color = new QMenu(i18nc("color menu", "Color"), this);
-#else
-    KMenu* color = new KMenu(i18nc("color menu", "Color"), this);
-#endif
     insert(mt_Line_Color_Selection, color, Icon_Utils::SmallIcon(Icon_Utils::it_Color_Line), i18n("Line Color..."));
     insert(mt_Fill_Color_Selection, color, Icon_Utils::SmallIcon(Icon_Utils::it_Color_Fill), i18n("Fill Color..."));
     insert(mt_Set_Use_Fill_Color_Selection, color, i18n("Use Fill Color"));
@@ -812,11 +788,7 @@ void ListPopupMenu::insert(MenuType m)
  * @param m      The MenuType for which to insert a menu item.
  * @param menu   The KMenu for which to insert a menu item.
  */
-#if QT_VERSION >= 0x050000
 void ListPopupMenu::insert(const MenuType m, QMenu* menu)
-#else
-void ListPopupMenu::insert(const MenuType m, KMenu* menu)
-#endif
 {
     Q_ASSERT(menu != NULL);
     switch (m) {
@@ -928,11 +900,7 @@ void ListPopupMenu::insert(const MenuType m, const QString & text, const bool ch
  * @param icon   The icon for this action.
  * @param text   The text for this action.
  */
-#if QT_VERSION >= 0x050000
 void ListPopupMenu::insert(const MenuType m, QMenu* menu, const QIcon & icon, const QString & text)
-#else
-void ListPopupMenu::insert(const MenuType m, KMenu* menu, const QIcon & icon, const QString & text)
-#endif
 {
     m_actions[m] = menu->addAction(icon, text);
 }
@@ -945,11 +913,7 @@ void ListPopupMenu::insert(const MenuType m, KMenu* menu, const QIcon & icon, co
  * @param text   The text for this action.
  * @param checkable   Sets the action to checkable.
  */
-#if QT_VERSION >= 0x050000
 void ListPopupMenu::insert(const MenuType m, QMenu* menu, const QString & text, const bool checkable)
-#else
-void ListPopupMenu::insert(const MenuType m, KMenu* menu, const QString & text, const bool checkable)
-#endif
 {
     m_actions[m] = menu->addAction(text);
     if (checkable) {
@@ -995,11 +959,7 @@ void ListPopupMenu::insertStdItems(bool insertLeadingSeparator /* = true */,
  */
 void ListPopupMenu::insertContainerItems(bool folderAndDiagrams)
 {
-#if QT_VERSION >= 0x050000
     QMenu* menu = new QMenu(i18nc("new container menu", "New"), this);
-#else
-    KMenu* menu = new KMenu(i18nc("new container menu", "New"), this);
-#endif
     menu->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_New));
     if (folderAndDiagrams)
         insert(mt_Logical_Folder, menu, Icon_Utils::BarIcon(Icon_Utils::it_Folder), i18n("Folder"));
@@ -1092,11 +1052,7 @@ void ListPopupMenu::insertAssociationTextItem(const QString &label, MenuType mt)
  */
 void ListPopupMenu::insertSubMenuLayout(AssociationLine *associationLine)
 {
-#if QT_VERSION >= 0x050000
     QMenu* layout = new QMenu(i18nc("Layout menu", "Layout"), this);
-#else
-    KMenu* layout = new KMenu(i18nc("Layout menu", "Layout"), this);
-#endif
     insert(mt_LayoutPolyline, layout, i18n("Polyline"), true);
     insert(mt_LayoutDirect, layout, i18n("Direct"), true);
     insert(mt_LayoutSpline, layout, i18n("Spline"), true);
@@ -1196,11 +1152,7 @@ void ListPopupMenu::makeClassifierShowPopup(ClassifierWidget *c)
 {
     WidgetBase::WidgetType type = c->baseType();
 
-#if QT_VERSION >= 0x050000
     QMenu* show = new QMenu(i18n("Show"), this);
-#else
-    KMenu* show = new KMenu(i18n("Show"), this);
-#endif
     show->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Show));
 #ifdef ENABLE_WIDGET_SHOW_DOC
     insert(mt_Show_Documentation, show, i18n("Documentation"), CHECKABLE);
@@ -1238,18 +1190,10 @@ void ListPopupMenu::makeClassifierShowPopup(ClassifierWidget *c)
  */
 void ListPopupMenu::makeMultiClassifierShowPopup(WidgetBase::WidgetType type)
 {
-#if QT_VERSION >= 0x050000
     QMenu* show = new QMenu(i18n("Show"), this);
-#else
-    KMenu* show = new KMenu(i18n("Show"), this);
-#endif
     show->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Show));
 
-#if QT_VERSION >= 0x050000
     QMenu* attributes = new QMenu(i18n("Attributes"), this);
-#else
-    KMenu* attributes = new KMenu(i18n("Attributes"), this);
-#endif
     if (type == WidgetBase::wt_Class) {
         insert(mt_Show_Attributes_Selection, attributes, i18n("Show"));
         insert(mt_Hide_Attributes_Selection, attributes, i18n("Hide"));
@@ -1258,43 +1202,27 @@ void ListPopupMenu::makeMultiClassifierShowPopup(WidgetBase::WidgetType type)
     }
     show->addMenu(attributes);
 
-#if QT_VERSION >= 0x050000
     QMenu* operations = new QMenu(i18n("Operations"), this);
-#else
-    KMenu* operations = new KMenu(i18n("Operations"), this);
-#endif
     insert(mt_Show_Operations_Selection, operations, i18n("Show"));
     insert(mt_Hide_Operations_Selection, operations, i18n("Hide"));
     insert(mt_Show_Operation_Signature_Selection, operations, i18n("Show Signatures"));
     insert(mt_Hide_Operation_Signature_Selection, operations, i18n("Hide Signatures"));
     show->addMenu(operations);
 
-#if QT_VERSION >= 0x050000
     QMenu* visibility = new QMenu(i18n("Visibility"), this);
-#else
-    KMenu* visibility = new KMenu(i18n("Visibility"), this);
-#endif
     insert(mt_Show_Visibility_Selection, visibility, i18n("Show"));
     insert(mt_Hide_Visibility_Selection, visibility, i18n("Hide"));
     insert(mt_Hide_NonPublic_Selection, visibility, i18n("Hide Non-public members"));
     insert(mt_Show_NonPublic_Selection, visibility, i18n("Show Non-public members"));
     show->addMenu(visibility);
 
-#if QT_VERSION >= 0x050000
     QMenu* packages = new QMenu(i18n("Packages"), this);
-#else
-    KMenu* packages = new KMenu(i18n("Packages"), this);
-#endif
     insert(mt_Show_Packages_Selection, packages, i18n("Show"));
     insert(mt_Hide_Packages_Selection, packages, i18n("Hide"));
     show->addMenu(packages);
 
     if (type == WidgetBase::wt_Class) {
-#if QT_VERSION >= 0x050000
         QMenu* stereotypes = new QMenu(i18n("Stereotypes"), this);
-#else
-        KMenu* stereotypes = new KMenu(i18n("Stereotypes"), this);
-#endif
         insert(mt_Show_Stereotypes_Selection, stereotypes, i18n("Show"));
         insert(mt_Hide_Stereotypes_Selection, stereotypes, i18n("Hide"));
         show->addMenu(stereotypes);
@@ -1308,11 +1236,7 @@ void ListPopupMenu::makeMultiClassifierShowPopup(WidgetBase::WidgetType type)
 void ListPopupMenu::makeClassifierPopup(ClassifierWidget *c)
 {
     WidgetBase::WidgetType type = c->baseType();
-#if QT_VERSION >= 0x050000
     QMenu* menu = new QMenu(i18nc("new classifier menu", "New"), this);
-#else
-    KMenu* menu = new KMenu(i18nc("new classifier menu", "New"), this);
-#endif
     menu->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_New));
     if (type == WidgetBase::wt_Class)
         insert(mt_Attribute, menu, Icon_Utils::SmallIcon(Icon_Utils::it_Public_Attribute), i18n("Attribute..."));
@@ -1365,11 +1289,7 @@ ListPopupMenu::MenuType ListPopupMenu::typeFromAction(QAction *action)
  */
 void ListPopupMenu::insertSubMenuAlign()
 {
-#if QT_VERSION >= 0x050000
     QMenu* alignment = new QMenu(i18nc("align menu", "Align"), this);
-#else
-    KMenu* alignment = new KMenu(i18nc("align menu", "Align"), this);
-#endif
     insert(mt_Align_Right, alignment, Icon_Utils::SmallIcon(Icon_Utils::it_Align_Right), i18n("Align Right"));
     insert(mt_Align_Left, alignment, Icon_Utils::SmallIcon(Icon_Utils::it_Align_Left), i18n("Align Left"));
     insert(mt_Align_Top, alignment, Icon_Utils::SmallIcon(Icon_Utils::it_Align_Top), i18n("Align Top"));
@@ -1390,11 +1310,7 @@ void ListPopupMenu::insertSubMenuAlign()
  */
 void ListPopupMenu::insertSubMenuColor(bool fc)
 {
-#if QT_VERSION >= 0x050000
     QMenu* color = new QMenu(i18nc("color menu", "Color"), this);
-#else
-    KMenu* color = new KMenu(i18nc("color menu", "Color"), this);
-#endif
     insert(mt_Line_Color, color, Icon_Utils::SmallIcon(Icon_Utils::it_Color_Line), i18n("Line Color..."));
     insert(mt_Fill_Color, color, Icon_Utils::SmallIcon(Icon_Utils::it_Color_Fill), i18n("Fill Color..."));
     insert(mt_Use_Fill_Color, color, i18n("Use Fill Color"), CHECKABLE);
@@ -1475,11 +1391,7 @@ ListPopupMenu* ListPopupMenu::menuFromAction(QAction *action)
  */
 void ListPopupMenu::insertSubMenuNew(MenuType type)
 {
-#if QT_VERSION >= 0x050000
     QMenu* menu = new QMenu(i18nc("new sub menu", "New"), this);
-#else
-    KMenu* menu = new KMenu(i18nc("new sub menu", "New"), this);
-#endif
     menu->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_New));
     switch (type) {
         case mt_Deployment_View:
@@ -1909,11 +1821,7 @@ void ListPopupMenu::setupMenu(MenuType type)
                 uError() << "Invalid Trigger Object Type Set for Use Case Diagram " << m_TriggerObjectType;
                 return;
             }
-#if QT_VERSION >= 0x050000
             QMenu* menu = makeCategoryTypeMenu(static_cast<UMLCategory*>(m_TriggerObject.m_Object));
-#else
-            KMenu* menu = makeCategoryTypeMenu(static_cast<UMLCategory*>(m_TriggerObject.m_Object));
-#endif
             menu->setTitle(i18n("Category Type"));
             addMenu(menu);
             insertStdItems(false);
@@ -2138,17 +2046,9 @@ void ListPopupMenu::setupDiagramMenu(UMLView* view)
  * Creates a popup menu for a single category Object
  * @param category The UMLCategory for which the category menu is created
  */
-#if QT_VERSION >= 0x050000
 QMenu* ListPopupMenu::makeCategoryTypeMenu(UMLCategory* category)
-#else
-KMenu* ListPopupMenu::makeCategoryTypeMenu(UMLCategory* category)
-#endif
 {
-#if QT_VERSION >= 0x050000
     QMenu* catTypeMenu = new QMenu(this);
-#else
-    KMenu* catTypeMenu = new KMenu(this);
-#endif
     insert(mt_DisjointSpecialisation, catTypeMenu, i18n("Disjoint(Specialisation)"), CHECKABLE);
     insert(mt_OverlappingSpecialisation, catTypeMenu, i18n("Overlapping(Specialisation)"), CHECKABLE);
     insert(mt_Union, catTypeMenu, i18n("Union"), CHECKABLE);
diff --git a/umbrello/listpopupmenu.h b/umbrello/listpopupmenu.h
index a73989da577ecd49a251cfddcb605d52917ba494..522560a6f5a76529002c056da606e77e08fdee26 100644
--- a/umbrello/listpopupmenu.h
+++ b/umbrello/listpopupmenu.h
@@ -15,14 +15,9 @@
 #include "umllistviewitem.h"
 #include "umlobject.h"
 #include "widgetbase.h"
-#if QT_VERSION < 0x050000
-#include <kmenu.h>
-#endif
 
 #include <QHash>
-#if QT_VERSION >= 0x050000
 #include <QMenu>
-#endif
 
 class AssociationLine;
 class ClassifierWidget;
@@ -41,11 +36,7 @@ class UMLView;
  * @author Paul Hensgen <phensgen@techie.com>
  * Bugs and comments to umbrello-devel@kde.org or http://bugs.kde.org
  */
-#if QT_VERSION >= 0x050000
 class ListPopupMenu : public QMenu
-#else
-class ListPopupMenu : public KMenu
-#endif
 {
     Q_OBJECT
     Q_ENUMS(MenuType)
@@ -316,15 +307,9 @@ private:
     void insertMultiSelectionMenu(WidgetBase::WidgetType uniqueType);
 
     void insert(MenuType m);
-#if QT_VERSION >= 0x050000
     void insert(const MenuType m, QMenu* menu);
     void insert(const MenuType m, QMenu* menu, const QIcon & icon, const QString & text);
     void insert(const MenuType m, QMenu* menu, const QString & text, const bool checkable = false);
-#else
-    void insert(const MenuType m, KMenu* menu);
-    void insert(const MenuType m, KMenu* menu, const QIcon & icon, const QString & text);
-    void insert(const MenuType m, KMenu* menu, const QString & text, const bool checkable = false);
-#endif
     void insert(const MenuType m, const QIcon & icon, const QString & text);
     void insert(const MenuType m, const QString & text, const bool checkable = false);
 
@@ -341,11 +326,7 @@ private:
     void makeClassifierPopup(ClassifierWidget *c);
     void makeMultiClassifierShowPopup(WidgetBase::WidgetType type);
     void makeClassifierShowPopup(ClassifierWidget *c);
-#if QT_VERSION >= 0x050000
     QMenu* makeCategoryTypeMenu(UMLCategory* category);
-#else
-    KMenu* makeCategoryTypeMenu(UMLCategory* category);
-#endif
 
     void insertSubMenuNew(MenuType type);
     void insertSubMenuAlign();
diff --git a/umbrello/main.cpp b/umbrello/main.cpp
index 12ebd65d3abe3170ef80d178b69d351462e4d748..6544b3aca8126b43c30ab15846b50eac6abc7171 100644
--- a/umbrello/main.cpp
+++ b/umbrello/main.cpp
@@ -19,28 +19,18 @@
 
 // kde includes
 #include <kaboutdata.h>
-#if QT_VERSION < 0x050000
-#include <kapplication.h>
-#include <kcmdlineargs.h>
-#endif
 #include <kconfig.h>
 #include <KLocalizedString>
 #include <ktip.h>
 
-#if QT_VERSION >= 0x050000
 #include <QApplication>
 #include <QCommandLineParser>
-#endif
 
 #include <stdio.h>
 
-#if QT_VERSION >= 0x050000
 #define StringLiteral(a) QStringLiteral(a)
 #define ki18n(a) i18n(a)
 #define KLocalizedString(a) QString(a)
-#else
-#define StringLiteral(a) QByteArray(a)
-#endif
 
 /**
  * Description for this application
@@ -55,11 +45,7 @@ static const char description[] =
  * @param args The command line arguments given.
  * @return True if the GUI should be shown, false otherwise.
  */
-#if QT_VERSION >= 0x050000
 bool showGUI(QCommandLineParser *parser);
-#else
-bool showGUI(KCmdLineArgs *args);
-#endif
 
 /**
  * Initializes the document used by the application.
@@ -69,11 +55,7 @@ bool showGUI(KCmdLineArgs *args);
  *
  * @param args The command line arguments given.
  */
-#if QT_VERSION >= 0x050000
 void initDocument(QCommandLineParser *parser);
-#else
-void initDocument(KCmdLineArgs *args);
-#endif
 
 /**
  * Export all the views in the document using the command line args set by the user.
@@ -82,13 +64,8 @@ void initDocument(KCmdLineArgs *args);
  * @param args The command line arguments given.
  * @param exportOpt A list containing all the "export" arguments given.
  */
-#if QT_VERSION >= 0x050000
 void exportAllViews(QCommandLineParser *parser, const QStringList &exportOpt);
-#else
-void exportAllViews(KCmdLineArgs *args, const QStringList &exportOpt);
-#endif
 
-#if QT_VERSION >= 0x050000
 static const QString URL            = QStringLiteral("url");
 static const QString EXPORT         = QStringLiteral("export");
 static const QString EXPORT_FORMATS = QStringLiteral("export-formats");
@@ -96,11 +73,11 @@ static const QString IMPORT_FILES   = QStringLiteral("import-files");
 static const QString USE_FOLDERS    = QStringLiteral("use-folders");
 static const QString DIRECTORY      = QStringLiteral("directory");
 static const QString LANGUAGES      = QStringLiteral("languages");
-#endif
+
 
 int main(int argc, char *argv[])
 {
-#if QT_VERSION >= 0x050000
+
     QApplication app(argc, argv);
 
     KLocalizedString::setApplicationDomain("umbrello");
@@ -115,12 +92,7 @@ int main(int argc, char *argv[])
                          i18n("Copyright © 2001 Paul Hensgen,\nCopyright © 2002-2016 Umbrello UML Modeller Authors"),
                          QString(),
                          QStringLiteral("http://umbrello.kde.org"));
-#else
-    KAboutData aboutData("umbrello", 0, ki18n("Umbrello UML Modeller"),
-                          umbrelloVersion(), ki18n(description), KAboutData::License_GPL,
-                          ki18n("(c) 2001 Paul Hensgen, (c) 2002-2016 Umbrello UML Modeller Authors"), KLocalizedString(),
-                          "http://umbrello.kde.org/");
-#endif
+
     aboutData.addAuthor(ki18n("Paul Hensgen"), ki18n("Author of initial version."), StringLiteral("phensgen@users.sourceforge.net"));
     aboutData.addAuthor(ki18n("Umbrello UML Modeller Authors"), KLocalizedString(), StringLiteral("umbrello-devel@kde.org"));
 
@@ -141,7 +113,6 @@ int main(int argc, char *argv[])
                         ki18n("A lot of work for C++ and Java code generation. Codeeditor."),
                         StringLiteral("thomas@mail630.gsfc.nasa.gov"));
 
-#if QT_VERSION >= 0x050000
     KAboutData::setApplicationData(aboutData);
     QCommandLineParser* args = new QCommandLineParser;
     args->addHelpOption();
@@ -163,40 +134,16 @@ int main(int argc, char *argv[])
     args->process(app);
 
     aboutData.processCommandLine(args);
-#else
-    KCmdLineArgs::init(argc, argv, &aboutData);
-    KCmdLineOptions options;
-    options.add("+[File]", ki18n("File to open"));
-    options.add("export <extension>", ki18n("export diagrams to extension and exit"));
-    options.add("export-formats", ki18n("list available export extensions"));
-    options.add("directory <url>", ki18n("the local directory to save the exported diagrams in"), I18N_NOOP("the directory of the file"));
-    options.add("import-files", ki18n("import files"));
-    options.add("languages", ki18n("list supported languages"));
-    options.add("use-folders", ki18n("keep the tree structure used to store the views in the document in the target directory"));
-    KCmdLineArgs::addCmdLineOptions(options); // Add our own options.
-    KApplication app;
-#endif
-    Q_INIT_RESOURCE(icons);
 
     QPointer<UMLApp> uml;
     if (app.isSessionRestored()) {
         kRestoreMainWindows< UMLApp >();
     } else {
-#if QT_VERSION >= 0x050000
         if (args->isSet(EXPORT_FORMATS)) {
-#else
-        KCmdLineArgs *args = KCmdLineArgs::parsedArgs();
-
-        if (args->isSet("export-formats")) {
-#endif
             foreach(const QString& type, UMLViewImageExporterModel::supportedImageTypes())
                 fprintf(stdout, "%s\n", qPrintable(type));
             return 0;
-#if QT_VERSION >= 0x050000
         } else if (args->isSet(LANGUAGES)) {
-#else
-        } else if (args->isSet("languages")) {
-#endif
             for(int i = Uml::ProgrammingLanguage::ActionScript; i < Uml::ProgrammingLanguage::Reserved; i++) {
                 Uml::ProgrammingLanguage::Enum pl = Uml::ProgrammingLanguage::fromInt(i);
                 fprintf(stdout, "%s\n", qPrintable(Uml::ProgrammingLanguage::toString(pl)));
@@ -210,8 +157,6 @@ int main(int argc, char *argv[])
         if (showGUI(args)) {
             uml->show();
         }
-
-#if QT_VERSION >= 0x050000
         if (args->isSet(IMPORT_FILES)) {
             QStringList importList = args->values(IMPORT_FILES);
             if (importList.size() > 0) {
@@ -219,25 +164,12 @@ int main(int argc, char *argv[])
                 uml->importFiles(&importList);
             }
         }
-#else
-        if (args->isSet("import-files") && args->count() > 0) {
-            QStringList importList;
-            for (int i = 0; i < args->count(); i++)
-                importList.append(args->url(i).toLocalFile());
-            uml->newDocument();
-            uml->importFiles(&importList);
-        }
-#endif
         else
             initDocument(args);
 
 
         // export option
-#if QT_VERSION >= 0x050000
         QStringList exportOpt = args->values(EXPORT);
-#else
-        QStringList exportOpt = args->getOptionList("export");
-#endif
         if (exportOpt.size() > 0) {
              exportAllViews(args, exportOpt);
         }
@@ -247,7 +179,6 @@ int main(int argc, char *argv[])
     return result;
 }
 
-#if QT_VERSION >= 0x050000
 bool showGUI(QCommandLineParser *parser)
 {
     if (parser->isSet(EXPORT) || parser->isSet(EXPORT_FORMATS)) {
@@ -296,52 +227,3 @@ void exportAllViews(QCommandLineParser *parser, const QStringList &exportOpt)
     // is sent and the app finishes without user interaction
     qApp->postEvent(UMLApp::app(), new CmdLineExportAllViewsEvent(extension, directory, useFolders));
 }
-#else
-bool showGUI(KCmdLineArgs *args)
-{
-    if (args->getOptionList("export").size() > 0 || args->isSet("export-formats")) {
-        return false;
-    }
-    return true;
-}
-
-void initDocument(KCmdLineArgs *args)
-{
-    if (args->count()) {
-        UMLApp::app()->openDocumentFile(args->url(0));
-    } else {
-        bool last = UmbrelloSettings::loadlast();
-        QString file = UmbrelloSettings::lastFile();
-        if(last && !file.isEmpty()) {
-            UMLApp::app()->openDocumentFile(KUrl(file));
-        } else {
-            UMLApp::app()->newDocument();
-        }
-    }
-}
-
-void exportAllViews(KCmdLineArgs *args, const QStringList &exportOpt)
-{
-    QString extension(exportOpt.last());
-    uDebug() << "extension: " << extension;
-
-    // export to the specified directory, or the directory where the file is saved
-    // if no directory was specified
-    KUrl directory;
-    QStringList directoryOpt = args->getOptionList("directory");
-    if (directoryOpt.size() > 0) {
-        directory = KCmdLineArgs::makeURL(directoryOpt.last().toLocal8Bit());
-    } else {
-        directory = KUrl(UMLApp::app()->document()->url().directory());
-    }
-
-    bool useFolders = args->isSet("use-folders");
-
-    uDebug() << "directory: " << directory.prettyUrl();
-
-    // the event is posted so when the Qt loop begins it's processed. UMLApp process this event executing
-    // the method it provides for exporting the views. Once all the views were exported, a quit event
-    // is sent and the app finishes without user interaction
-    kapp->postEvent(UMLApp::app(), new CmdLineExportAllViewsEvent(extension, directory, useFolders));
-}
-#endif
diff --git a/umbrello/object_factory.cpp b/umbrello/object_factory.cpp
index e7590e86bc30250ddcd1dafc153c86a68de571e9..75ab217c181ca8fbbcfe3257aef46ee90090a5b3 100644
--- a/umbrello/object_factory.cpp
+++ b/umbrello/object_factory.cpp
@@ -42,9 +42,6 @@
 #include "cmds.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
 
@@ -52,9 +49,7 @@
 
 // qt includes
 #include <QApplication>
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QRegExp>
 #include <QStringList>
 
@@ -240,14 +235,10 @@ UMLObject* createUMLObject(UMLObject::ObjectType type, const QString &n,
 
     bool ok = false;
     while (bValidNameEntered == false) {
-#if QT_VERSION >= 0x050000
         name = QInputDialog::getText(UMLApp::app(),
                                      i18nc("UMLObject name", "Name"), i18n("Enter name:"),
                                      QLineEdit::Normal,
                                      name, &ok);
-#else
-        name = KInputDialog::getText(i18nc("UMLObject name", "Name"), i18n("Enter name:"), name, &ok, (QWidget*)UMLApp::app());
-#endif
         if (!ok) {
             return 0;
         }
diff --git a/umbrello/optionstate.cpp b/umbrello/optionstate.cpp
index 627926beb1cc6b9c8ebc3bac15ee772cc6b4cb68..9db550fc448b4eefcd3efd46c1dee54521a5ae10 100644
--- a/umbrello/optionstate.cpp
+++ b/umbrello/optionstate.cpp
@@ -10,10 +10,6 @@
 
 #include "optionstate.h"
 
-#if QT_VERSION < 0x050000
-#include <kglobal.h>
-#endif
-
 namespace Settings {
 
     /**
diff --git a/umbrello/pics/CMakeLists.txt b/umbrello/pics/CMakeLists.txt
index 2417c8b89fe4216f11a666e6e186572a833d92f2..b85544fc177e09a4ed0a201b11a1455a09583fab 100644
--- a/umbrello/pics/CMakeLists.txt
+++ b/umbrello/pics/CMakeLists.txt
@@ -169,4 +169,3 @@ endif()
 if(BUILD_CURSOR_ICONS)
     generate_cursor_icons("${CURSOR_ICONS}" 32)
 endif()
-
diff --git a/umbrello/pics/global/CMakeLists.txt b/umbrello/pics/global/CMakeLists.txt
index c6fa41db58258a07ab7cd64b1215406cfd2080b8..b45d8ebea377c4d03284613ae2e30a9253c9402f 100644
--- a/umbrello/pics/global/CMakeLists.txt
+++ b/umbrello/pics/global/CMakeLists.txt
@@ -1,17 +1,13 @@
-if(NOT BUILD_KF5)
-    add_subdirectory(kde4)
-else()
-    ecm_install_icons(
-        ICONS 16-apps-umbrello.png
-              16-mimetypes-application-x-uml.png
-              22-apps-umbrello.png
-              32-apps-umbrello.png
-              32-mimetypes-application-x-uml.png
-              48-apps-umbrello.png
-              64-apps-umbrello.png
-              128-apps-umbrello.png
-              sc-apps-umbrello.svgz
-        THEME hicolor
-        DESTINATION ${ICON_INSTALL_DIR}
-    )
-endif()
+ecm_install_icons(
+    ICONS 16-apps-umbrello.png
+          16-mimetypes-application-x-uml.png
+          22-apps-umbrello.png
+          32-apps-umbrello.png
+          32-mimetypes-application-x-uml.png
+          48-apps-umbrello.png
+          64-apps-umbrello.png
+          128-apps-umbrello.png
+          sc-apps-umbrello.svgz
+    THEME hicolor
+    DESTINATION ${ICON_INSTALL_DIR}
+)
diff --git a/umbrello/refactoring/refactoringassistant.cpp b/umbrello/refactoring/refactoringassistant.cpp
index 9487e0308a953c72d0c192cd1f3e5e29ca1f1e38..b42ee46f33097453cdc59a7331cbac8f12a56479 100644
--- a/umbrello/refactoring/refactoringassistant.cpp
+++ b/umbrello/refactoring/refactoringassistant.cpp
@@ -325,11 +325,7 @@ void RefactoringAssistant::editProperties()
  */
 void RefactoringAssistant::editProperties(UMLObject *obj)
 {
-#if QT_VERSION >= 0x050000
     QDialog *dia(0);
-#else
-    KDialog *dia(0);
-#endif
     UMLObject::ObjectType t = obj->baseType();
     if (t == UMLObject::ot_Class || t == UMLObject::ot_Interface) {
         ClassPropertiesDialog *dialog = new ClassPropertiesDialog(this, obj, true);
diff --git a/umbrello/stereotypeswindow.cpp b/umbrello/stereotypeswindow.cpp
index f7e181c04e05b64caa765fad915d23c2cbb3293e..28450ba00f7f1c482099f7d3da8f1899422fb728 100644
--- a/umbrello/stereotypeswindow.cpp
+++ b/umbrello/stereotypeswindow.cpp
@@ -38,11 +38,7 @@ StereotypesWindow::StereotypesWindow(QWidget *parent)
     m_stereotypesTree->setSortingEnabled(true);
     m_stereotypesTree->verticalHeader()->setDefaultSectionSize(20);
     m_stereotypesTree->verticalHeader()->setVisible(false);
-#if QT_VERSION >= 0x050000
     m_stereotypesTree->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
-#else
-    m_stereotypesTree->horizontalHeader()->setResizeMode(QHeaderView::Stretch);
-#endif
     setWidget(m_stereotypesTree);
 
     connect(m_stereotypesTree, &QTableView::doubleClicked, this, &StereotypesWindow::slotStereotypesDoubleClicked);
diff --git a/umbrello/toolbarstateother.cpp b/umbrello/toolbarstateother.cpp
index 499c2356c7bf7255628cdbf1af1acc8a9f983b60..fd6c398ae798ea2668a60782f89a00d1269e5b55 100644
--- a/umbrello/toolbarstateother.cpp
+++ b/umbrello/toolbarstateother.cpp
@@ -35,9 +35,6 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 
 using namespace Uml;
 
diff --git a/umbrello/uml.cpp b/umbrello/uml.cpp
index 9dfaba2052992b255b95e2a85b0220116be68496..422bc836b76621d8f3e069f510bda258aac549f5 100644
--- a/umbrello/uml.cpp
+++ b/umbrello/uml.cpp
@@ -58,52 +58,27 @@
 #include "umlscene.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kaction.h>
-#endif
 #include <kactioncollection.h>
 #include <kstandardaction.h>
 #include <ktoggleaction.h>
 #include <krecentfilesaction.h>
 #include <kconfig.h>
 #include <kcursor.h>
-#if QT_VERSION < 0x050000
-#include <kdeprintdialog.h>
-#include <kfiledialog.h>
-#endif
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kmenubar.h>
-#endif
 #include <KMessageBox>
 #include <ktip.h>
-#if QT_VERSION < 0x050000
-#include <ktabwidget.h>
-#endif
 #include <kactionmenu.h>
-#if QT_VERSION < 0x050000
-#include <kmenu.h>
-#endif
 #include <kxmlguifactory.h>
-#if QT_VERSION < 0x050000
-#include <kstatusbar.h>
-#include <kundostack.h>
-#endif
 
 // qt includes
 #include <QApplication>
 #include <QClipboard>
 #include <QDesktopWidget>
 #include <QDockWidget>
-#if QT_VERSION >= 0x050000
 #include <QFileDialog>
-#endif
 #include <QKeyEvent>
 #include <QLabel>
 #include <QMenu>
-#if QT_VERSION < 0x050000
-#include <QMenuItem>
-#endif
 #include <QPointer>
 #include <QPrinter>
 #include <QPrintDialog>
@@ -112,16 +87,12 @@
 #include <QRegExp>
 #include <QScrollBar>
 #include <QSlider>
-#if QT_VERSION >= 0x050000
 #include <QStatusBar>
-#endif
 #include <QStackedWidget>
 #include <QTemporaryFile>
 #include <QTimer>
 #include <QToolButton>
-#if QT_VERSION >= 0x050000
 #include <QUndoStack>
-#endif
 #include <QUndoView>
 #include <QListWidget>
 
@@ -161,11 +132,7 @@ UMLApp::UMLApp(QWidget* parent)
     m_codegen(0),
     m_commoncodegenpolicy(new CodeGenerationPolicy()),
     m_policyext(0),
-#if QT_VERSION >= 0x050000
     m_config(KSharedConfig::openConfig()),
-#else
-    m_config(KGlobal::config()),
-#endif
     m_view(0),
     m_doc(new UMLDoc()),
     m_listView(0),
@@ -179,11 +146,7 @@ UMLApp::UMLApp(QWidget* parent)
     m_settingsDialog(0),
     m_imageExporterAll(new UMLViewImageExporterAll()),
     m_xhtmlGenerator(0),
-#if QT_VERSION >= 0x050000
     m_pUndoStack(new QUndoStack(this)),
-#else
-    m_pUndoStack(new KUndoStack(this)),
-#endif
     m_hasBegunMacro(false),
     m_printSettings(0),
     m_printer(new QPrinter())
@@ -279,11 +242,7 @@ void UMLApp::initActions()
 {
     QAction* fileNew = KStandardAction::openNew(this, SLOT(slotFileNew()), actionCollection());
     QAction* fileOpen = KStandardAction::open(this, SLOT(slotFileOpen()), actionCollection());
-#if QT_VERSION >= 0x050000
     fileOpenRecent = KStandardAction::openRecent(this, SLOT(slotFileOpenRecent(QUrl)), actionCollection());
-#else
-    fileOpenRecent = KStandardAction::openRecent(this, SLOT(slotFileOpenRecent(KUrl)), actionCollection());
-#endif
     QAction* fileSave = KStandardAction::save(this, SLOT(slotFileSave()), actionCollection());
     QAction* fileSaveAs = KStandardAction::saveAs(this, SLOT(slotFileSaveAs()), actionCollection());
     QAction* fileClose = KStandardAction::close(this, SLOT(slotFileClose()), actionCollection());
@@ -292,18 +251,14 @@ void UMLApp::initActions()
     KStandardAction::findNext(this, SLOT(slotFindNext()), actionCollection());
     KStandardAction::findPrev(this, SLOT(slotFindPrevious()), actionCollection());
     printPreview = KStandardAction::printPreview(this, SLOT(slotPrintPreview()), actionCollection());
-#if QT_VERSION >= 0x040600
     filePrint->setPriority(QAction::LowPriority);  // icon only
     printPreview->setPriority(QAction::LowPriority);  // icon only
-#endif
     QAction* fileQuit = KStandardAction::quit(this, SLOT(slotFileQuit()), actionCollection());
 
     editUndo = m_pUndoStack->createUndoAction(actionCollection());
     editRedo = m_pUndoStack->createRedoAction(actionCollection());
-#if QT_VERSION >= 0x040600
     editUndo->setPriority(QAction::LowPriority);   // icon only
     editRedo->setPriority(QAction::LowPriority);   // icon only
-#endif
 
     disconnect(m_pUndoStack, &QUndoStack::undoTextChanged, editUndo, 0);
     disconnect(m_pUndoStack, &QUndoStack::redoTextChanged, editRedo, 0);
@@ -592,22 +547,14 @@ void UMLApp::initActions()
 
     QString moveTabLeftString = i18n("&Move Tab Left");
     QString moveTabRightString = i18n("&Move Tab Right");
-#if QT_VERSION >= 0x050000
     QAction* moveTabLeft = actionCollection()->addAction(QLatin1String("move_tab_left"));
-#else
-    KAction* moveTabLeft = actionCollection()->addAction(QLatin1String("move_tab_left"));
-#endif
     moveTabLeft->setIcon(Icon_Utils::SmallIcon(QApplication::layoutDirection() ? Icon_Utils::it_Go_Next : Icon_Utils::it_Go_Previous));
     moveTabLeft->setText(QApplication::layoutDirection() ? moveTabRightString : moveTabLeftString);
     moveTabLeft->setShortcut(QApplication::layoutDirection() ?
                  QKeySequence(Qt::CTRL+Qt::SHIFT+Qt::Key_Right) : QKeySequence(Qt::CTRL+Qt::SHIFT+Qt::Key_Left));
     connect(moveTabLeft, &QAction::triggered, this, &UMLApp::slotMoveTabLeft);
 
-#if QT_VERSION >= 0x050000
     QAction* moveTabRight = actionCollection()->addAction(QLatin1String("move_tab_right"));
-#else
-    KAction* moveTabRight = actionCollection()->addAction(QLatin1String("move_tab_right"));
-#endif
     moveTabRight->setIcon(Icon_Utils::SmallIcon(QApplication::layoutDirection() ? Icon_Utils::it_Go_Previous : Icon_Utils::it_Go_Next));
     moveTabRight->setText(QApplication::layoutDirection() ? moveTabLeftString : moveTabRightString);
     moveTabRight->setShortcut(QApplication::layoutDirection() ?
@@ -616,21 +563,13 @@ void UMLApp::initActions()
 
     QString selectTabLeftString = i18n("Select Diagram on Left");
     QString selectTabRightString = i18n("Select Diagram on Right");
-#if QT_VERSION >= 0x050000
     QAction* changeTabLeft = actionCollection()->addAction(QLatin1String("previous_tab"));
-#else
-    KAction* changeTabLeft = actionCollection()->addAction(QLatin1String("previous_tab"));
-#endif
     changeTabLeft->setText(QApplication::layoutDirection() ? selectTabRightString : selectTabLeftString);
     changeTabLeft->setShortcut(QApplication::layoutDirection() ?
                    QKeySequence(Qt::SHIFT+Qt::Key_Right) : QKeySequence(Qt::SHIFT+Qt::Key_Left));
     connect(changeTabLeft, &QAction::triggered, this, &UMLApp::slotChangeTabLeft);
 
-#if QT_VERSION >= 0x050000
     QAction* changeTabRight = actionCollection()->addAction(QLatin1String("next_tab"));
-#else
-    KAction* changeTabRight = actionCollection()->addAction(QLatin1String("next_tab"));
-#endif
     changeTabRight->setText(QApplication::layoutDirection() ? selectTabLeftString : selectTabRightString);
     changeTabRight->setShortcut(QApplication::layoutDirection() ?
                     QKeySequence(Qt::SHIFT+Qt::Key_Left) : QKeySequence(Qt::SHIFT+Qt::Key_Right));
@@ -834,11 +773,7 @@ void UMLApp::initStatusBar()
     statusBar()->addPermanentWidget(defaultZoomWdg);
 
     m_pZoomOutPB = new QPushButton(this);
-#if QT_VERSION >= 0x050000
     m_pZoomOutPB->setIcon(QIcon(QLatin1String("zoom-out")));
-#else
-    m_pZoomOutPB->setIcon(KIcon(QLatin1String("zoom-out")));
-#endif
     m_pZoomOutPB->setFlat(true);
     m_pZoomOutPB->setMaximumSize(30, 30);
     statusBar()->addPermanentWidget(m_pZoomOutPB);
@@ -856,11 +791,7 @@ void UMLApp::initStatusBar()
     statusBar()->addPermanentWidget(m_pZoomSlider);
 
     m_pZoomInPB = new QPushButton(this);
-#if QT_VERSION >= 0x050000
     m_pZoomInPB->setIcon(QIcon(QLatin1String("zoom-in")));
-#else
-    m_pZoomInPB->setIcon(KIcon(QLatin1String("zoom-in")));
-#endif
     m_pZoomInPB->setFlat(true);
     m_pZoomInPB->setMaximumSize(30, 30);
     statusBar()->addPermanentWidget(m_pZoomInPB);
@@ -888,19 +819,11 @@ void UMLApp::initView()
     m_viewStack = new QStackedWidget(this);
 
     // Prepare Tabbed Diagram Representation
-#if QT_VERSION >= 0x050000
     m_tabWidget = new QTabWidget(this);
     m_tabWidget->setMovable(true);
     connect(m_tabWidget, &QTabWidget::tabCloseRequested, this, &UMLApp::slotCloseDiagram);
     connect(m_tabWidget, &QTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
     connect(m_tabWidget, &QTabWidget::customContextMenuRequested, this, &UMLApp::slotDiagramPopupMenu);
-#else
-    m_tabWidget = new KTabWidget(this);
-    m_tabWidget->setAutomaticResizeTabs(true);
-    connect(m_tabWidget, &KTabWidget::closeRequest, this, &UMLApp::slotCloseDiagram);
-    connect(m_tabWidget, &KTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
-    connect(m_tabWidget, &KTabWidget::contextMenu, m_doc, &UMLDoc::slotDiagramPopupMenu);
-#endif
     m_tabWidget->setTabsClosable(true);
 
     m_newSessionButton = new QToolButton(m_tabWidget);
@@ -997,11 +920,7 @@ void UMLApp::initView()
 /**
  * Opens a file specified by commandline option.
  */
-#if QT_VERSION >= 0x050000
 void UMLApp::openDocumentFile(const QUrl& url)
-#else
-void UMLApp::openDocumentFile(const KUrl& url)
-#endif
 {
     slotStatusMsg(i18n("Opening file..."));
 
@@ -1075,11 +994,7 @@ void UMLApp::saveOptions()
         UmbrelloSettings::setLastFile(QString());
     }
     else {
-#if QT_VERSION >= 0x050000
         UmbrelloSettings::setLastFile(m_doc->url().toDisplayString());
-#else
-        UmbrelloSettings::setLastFile(m_doc->url().prettyUrl());
-#endif
     }
 
     UmbrelloSettings::setImageMimeType(imageMimeType());
@@ -1160,11 +1075,7 @@ void UMLApp::saveOptions()
     UmbrelloSettings::setCreateArtifacts(optionState.codeImportState.createArtifacts);
     UmbrelloSettings::setResolveDependencies(optionState.codeImportState.resolveDependencies);
 
-#if QT_VERSION >= 0x050000
     UmbrelloSettings::self()->save();
-#else
-    UmbrelloSettings::self()->writeConfig();
-#endif
 }
 
 /**
@@ -1199,10 +1110,6 @@ void UMLApp::readOptions()
  */
 void UMLApp::saveProperties(KConfigGroup & cfg)
 {
-#if QT_VERSION < 0x050000
-    DEBUG(DBG_SRC) << "******************** UNUSED?";
-    Q_UNUSED(cfg);
-#else
     if (m_doc->url().fileName() == i18n("Untitled") || m_doc->isModified()) {
         QUrl url = m_doc->url();
         cfg.writePathEntry("filename", url.toString());
@@ -1216,7 +1123,6 @@ void UMLApp::saveProperties(KConfigGroup & cfg)
             m_doc->saveDocument(dest);
         }
     }
-#endif
 }
 
 /**
@@ -1228,10 +1134,6 @@ void UMLApp::saveProperties(KConfigGroup & cfg)
  */
 void UMLApp::readProperties(const KConfigGroup & cfg)     //:TODO: applyMainWindowSettings(const KConfigGroup& config, bool force = false)
 {
-#if QT_VERSION < 0x050000
-    DEBUG(DBG_SRC) << "******************** UNUSED?";
-    Q_UNUSED(cfg);
-#else
     QString filename = cfg.readPathEntry("filename", QString());
     QUrl url(filename);
     bool modified = cfg.readEntry("modified", false);
@@ -1256,7 +1158,6 @@ void UMLApp::readProperties(const KConfigGroup & cfg)     //:TODO: applyMainWind
             enablePrint(false);
         }
     }
-#endif
 }
 
 /**
@@ -1311,23 +1212,14 @@ void UMLApp::slotFileOpen()
         // here saving wasn't successful
     } 
     else {
-#if QT_VERSION >= 0x050000
         QUrl url = QFileDialog::getOpenFileUrl(this, i18n("Open File"), QUrl(),
-#else
-        KUrl url=KFileDialog::getOpenUrl(KUrl(),
-#endif
             i18n("*.xmi *.xmi.tgz *.xmi.tar.bz2 *.mdl *.zargo|All Supported Files (*.xmi, *.xmi.tgz, *.xmi.tar.bz2, *.mdl, *.zargo)\n"
                  "*.xmi|Uncompressed XMI Files (*.xmi)\n"
                  "*.xmi.tgz|Gzip Compressed XMI Files (*.xmi.tgz)\n"
                  "*.xmi.tar.bz2|Bzip2 Compressed XMI Files (*.xmi.tar.bz2)\n"
                  "*.mdl|Rose model files (*.mdl)\n"
                  "*.zargo|Compressed argo Files(*.zargo)\n"
-                 )
-#if QT_VERSION >= 0x050000
-            );
-#else
-            ,this, i18n("Open File"));
-#endif
+                 ));
         if (!url.isEmpty()) {
             m_listView->setSortingEnabled(false);
             if (m_doc->openDocument(url)) {
@@ -1346,20 +1238,11 @@ void UMLApp::slotFileOpen()
 /**
  * Opens a file from the recent files menu.
  */
-#if QT_VERSION >= 0x050000
 void UMLApp::slotFileOpenRecent(const QUrl &url)
-#else
-void UMLApp::slotFileOpenRecent(const KUrl &url)
-#endif
 {
     slotStatusMsg(i18n("Opening file..."));
     m_loading = true;
-
-#if QT_VERSION >= 0x050000
     QUrl oldUrl = m_doc->url();
-#else
-    KUrl oldUrl = m_doc->url();
-#endif
 
     if (!m_doc->saveModified()) {
         // here saving wasn't successful
@@ -1405,22 +1288,14 @@ bool UMLApp::slotFileSaveAs()
 {
     slotStatusMsg(i18n("Saving file with a new filename..."));
     bool cont = true;
-#if QT_VERSION >= 0x050000
     QUrl url;
-#else
-    KUrl url;
-#endif
     QString ext;
     while (cont) {
-#if QT_VERSION >= 0x050000
         url = QFileDialog::getSaveFileUrl(this, i18n("Save As"), QUrl(),
                                           i18n("*.xmi | XMI File (*.xmi);;"
                                                "*.xmi.tgz | Gzip Compressed XMI File (*.xmi.tgz);;"
                                                "*.xmi.tar.bz2 | Bzip2 Compressed XMI File (*.xmi.tar.bz2);;"
                                                "* | All Files (*)"));
-#else
-        url = KFileDialog::getSaveUrl(KUrl(), i18n("*.xmi|XMI File\n*.xmi.tgz|Gzip Compressed XMI File\n*.xmi.tar.bz2|Bzip2 Compressed XMI File\n*|All Files"), this, i18n("Save As"));
-#endif
         if (url.isEmpty()) {
             cont = false;
         }
@@ -1435,13 +1310,9 @@ bool UMLApp::slotFileSaveAs()
             //    ext = "xmi";
             //}
             if (url.isLocalFile()) {
-#if QT_VERSION >= 0x050000
                 QString file = url.toLocalFile();
-#else
-                QString file = url.toLocalFile(KUrl::RemoveTrailingSlash);
-#endif
                 if (QFile::exists(file)) {
-                    int want_save = KMessageBox::warningContinueCancel(this, i18n("The file %1 exists.\nDo you wish to overwrite it?", url.toLocalFile()), 
+                    int want_save = KMessageBox::warningContinueCancel(this, i18n("The file %1 exists.\nDo you wish to overwrite it?", url.toLocalFile()),
                                                                        i18n("Warning"), KGuiItem(i18n("Overwrite")));
                     if (want_save == KMessageBox::Continue) {
                         cont = false;
@@ -1523,7 +1394,6 @@ bool UMLApp::slotPrintSettings()
         delete m_printSettings;
     }
     m_printSettings = new DiagramPrintPage(0, m_doc);
-#if QT_VERSION >= 0x050000
     QDialog* dlg = new QDialog();
     QVBoxLayout *layout = new QVBoxLayout();
     layout->addWidget(m_printSettings);
@@ -1538,13 +1408,6 @@ bool UMLApp::slotPrintSettings()
     bool result = dlg->exec() == QDialog::Accepted;
     // keep settings
     layout->removeWidget(m_printSettings);
-#else
-    QPointer<KDialog> dlg = new KDialog();
-    dlg->setMainWidget(m_printSettings);
-    bool result = dlg->exec() == QDialog::Accepted;
-    // keep settings
-    dlg->setMainWidget(0);
-#endif
     m_printSettings->setParent(0);
 
     delete dlg;
@@ -1587,15 +1450,8 @@ void UMLApp::slotFilePrint()
 
     if (!slotPrintSettings())
         return;
-
-#if QT_VERSION >= 0x050000
     QPointer<QPrintDialog> printDialog = new QPrintDialog(m_printer, this);
     printDialog->setWindowTitle(i18n("Print %1", m_doc->url().toDisplayString()));
-#else
-    QPointer<QPrintDialog> printDialog =
-                  KdePrint::createPrintDialog(m_printer, QList<QWidget*>() << m_printSettings, this);
-    printDialog->setWindowTitle(i18n("Print %1", m_doc->url().prettyUrl()));
-#endif
     if (printDialog->exec()) {
         m_doc->print(m_printer, m_printSettings);
     }
@@ -1630,20 +1486,12 @@ void UMLApp::slotFileQuit()
  */
 void UMLApp::slotFileExportDocbook()
 {
-#if QT_VERSION > 0x050000
     QString path = QFileDialog::getExistingDirectory();
-#else
-    QString path = KFileDialog::getExistingDirectory();
-#endif
     if (path.isEmpty()) {
         return;
     }
     DocbookGenerator* docbookGenerator = new DocbookGenerator;
-#if QT_VERSION > 0x050000
     docbookGenerator->generateDocbookForProjectInto(QUrl::fromLocalFile(path));
-#else
-    docbookGenerator->generateDocbookForProjectInto(path);
-#endif
     connect(docbookGenerator, &DocbookGenerator::finished, docbookGenerator, &DocbookGenerator::deleteLater);
 }
 
@@ -1655,11 +1503,7 @@ void UMLApp::slotFileExportDocbook()
  */
 void UMLApp::slotFileExportXhtml()
 {
-#if QT_VERSION > 0x050000
     QString path = QFileDialog::getExistingDirectory();
-#else
-    QString path = KFileDialog::getExistingDirectory();
-#endif
     if (path.isEmpty()) {
         return;
     }
@@ -1667,11 +1511,7 @@ void UMLApp::slotFileExportXhtml()
     if (!m_xhtmlGenerator) {
         m_xhtmlGenerator = new XhtmlGenerator;
     }
-#if QT_VERSION > 0x050000
     m_xhtmlGenerator->generateXhtmlForProjectInto(QUrl::fromLocalFile(path));
-#else
-    m_xhtmlGenerator->generateXhtmlForProjectInto(path);
-#endif
     connect(m_xhtmlGenerator, &XhtmlGenerator::finished, this, &UMLApp::slotXhtmlDocGenerationFinished);
 }
 
@@ -2101,11 +1941,7 @@ void UMLApp::slotApplyPrefs()
                     UMLScene *scene = view->umlScene();
                     m_viewStack->removeWidget(view);
                     int tabIndex = m_tabWidget->addTab(view, scene->name());
-#if QT_VERSION >= 0x050000
                     m_tabWidget->setTabIcon(tabIndex, QIcon(Icon_Utils::iconSet(scene->type())));
-#else
-                    m_tabWidget->setTabIcon(tabIndex, KIcon(Icon_Utils::iconSet(scene->type())));
-#endif
                     m_tabWidget->setTabToolTip(tabIndex, scene->name());
                 }
                 m_layout->addWidget(m_tabWidget);
@@ -2258,11 +2094,7 @@ void UMLApp::readOptionState()
 {
     Settings::OptionState& optionState = Settings::optionState();
 
-#if QT_VERSION >= 0x050000
     UmbrelloSettings::self()->load();
-#else
-    UmbrelloSettings::self()->readConfig();
-#endif
     optionState.generalState.undo = UmbrelloSettings::undo();
     optionState.generalState.tabdiagrams = UmbrelloSettings::tabdiagrams();
 #ifdef ENABLE_NEW_CODE_GENERATORS
@@ -2621,7 +2453,6 @@ void UMLApp::setLang_xmlschema()
     setActiveLanguage(Uml::ProgrammingLanguage::XMLSchema);
 }
 
-#if QT_VERSION >= 0x050000
 /**
  * Called when right clicking on tab widget.
  * @param point  the point where the right mouse button was clicked
@@ -2634,7 +2465,6 @@ void UMLApp::slotDiagramPopupMenu(const QPoint& point)
     QPoint globalPoint = m_tabWidget->mapToGlobal(point);
     m_doc->slotDiagramPopupMenu(view, globalPoint);
 }
-#endif
 
 /**
  * Set the language for which code will be generated.
@@ -2856,14 +2686,8 @@ void UMLApp::importFiles(QStringList* fileList)
 void UMLApp::slotImportClass()
 {
     QStringList filters = Uml::ProgrammingLanguage::toExtensions(UMLApp::app()->activeLanguage());
-    QString f = filters.join(QLatin1String(" ")) + QLatin1String("|") +
-                             Uml::ProgrammingLanguage::toExtensionsDescription(UMLApp::app()->activeLanguage());
-
-#if QT_VERSION >= 0x050000
+    QString f = filters.join(QLatin1String(" ")) + QLatin1String("|") + Uml::ProgrammingLanguage::toExtensionsDescription(UMLApp::app()->activeLanguage());
     QStringList files = QFileDialog::getOpenFileNames(this, i18n("Select file(s) to import:"), QString(), f);
-#else
-    QStringList files = KFileDialog::getOpenFileNames(KUrl(), f, this, i18n("Select file(s) to import:"));
-#endif
     if (!files.isEmpty()) {
         importFiles(&files);
     }
@@ -2892,11 +2716,7 @@ void getFiles(QStringList& files, const QString& path, QStringList& filters)
 void UMLApp::slotImportProject()
 {
     QStringList listFile;
-#if QT_VERSION >= 0x050000
     QString dir = QFileDialog::getExistingDirectory(this, i18n("Select directory to import:"));
-#else
-    QString dir = KFileDialog::getExistingDirectory(KUrl(),this, i18n("Select directory to import:"));
-#endif
     if (!dir.isEmpty()) {
         QStringList filter = Uml::ProgrammingLanguage::toExtensions(UMLApp::app()->activeLanguage());
         getFiles(listFile, dir, filter);
@@ -3000,7 +2820,6 @@ void UMLApp::slotDeleteDiagram()
     m_doc->removeDiagram(currentView()->umlScene()->ID());
 }
 
-#if QT_VERSION >= 0x050000
 /**
  * Close the current diagram. Clicked on tab close button.
  * @param index   widget's index to close
@@ -3016,23 +2835,6 @@ void UMLApp::slotCloseDiagram(int index)
         view->umlScene()->setIsOpen(false);
     }
 }
-#else
-/**
- * Close the current diagram. Clicked on tab close button.
- * @param tab   Widget's tab to close
- */
-void UMLApp::slotCloseDiagram(QWidget* tab)
-{
-    if (tab) {
-        UMLView* view = (UMLView*)tab;
-        if (view != currentView()) {
-            setCurrentView(view);
-        }
-        m_tabWidget->removeTab(m_tabWidget->indexOf(view));
-        view->umlScene()->setIsOpen(false);
-    }
-}
-#endif
 
 /**
  * Return the default code generation language as configured by KConfig.
@@ -3242,26 +3044,14 @@ void UMLApp::setCurrentView(UMLView* view, bool updateTreeView)
         int tabIndex = m_tabWidget->indexOf(view);
         if ((tabIndex < 0) && (view->umlScene()->isOpen())) {
             tabIndex = m_tabWidget->addTab(view, view->umlScene()->name());
-#if QT_VERSION >= 0x050000
             m_tabWidget->setTabIcon(tabIndex, QIcon(Icon_Utils::iconSet(view->umlScene()->type())));
-#else
-            m_tabWidget->setTabIcon(tabIndex, KIcon(Icon_Utils::iconSet(view->umlScene()->type())));
-#endif
             m_tabWidget->setTabToolTip(tabIndex, view->umlScene()->name());
         }
         if (!updateTreeView)
-#if QT_VERSION >= 0x050000
             disconnect(m_tabWidget, &QTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
-#else
-            disconnect(m_tabWidget, &KTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
-#endif
         m_tabWidget->setCurrentIndex(tabIndex);
         if (!updateTreeView)
-#if QT_VERSION >= 0x050000
             connect(m_tabWidget, &QTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
-#else
-            connect(m_tabWidget, &KTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
-#endif
     }
     else {
         if (m_viewStack->indexOf(view) < 0) {
@@ -3312,7 +3102,6 @@ QString UMLApp::imageMimeType() const
     return m_imageMimeType;
 }
 
-#if QT_VERSION >= 0x050000
 /**
  * Called when the tab has changed.
  * @param index   the index of the changed tab widget
@@ -3324,19 +3113,6 @@ void UMLApp::slotTabChanged(int index)
         m_doc->changeCurrentView(view->umlScene()->ID());
     }
 }
-#else
-/**
- * Called when the tab has changed.
- * @param tab   The changed tab widget
- */
-void UMLApp::slotTabChanged(QWidget* tab)
-{
-    UMLView* view = (UMLView*)tab;
-    if (view) {
-        m_doc->changeCurrentView(view->umlScene()->ID());
-    }
-}
-#endif
 
 /**
  * Make the tab on the left of the current one the active one.
@@ -3420,11 +3196,7 @@ void UMLApp::slotMoveTabLeft()
     else {
         to = m_tabWidget->count() - 1;
     }
-#if QT_VERSION >= 0x050000
     m_tabWidget->tabBar()->moveTab(from, to);
-#else
-    m_tabWidget->moveTab(from, to);
-#endif
 }
 
 /**
@@ -3442,11 +3214,7 @@ void UMLApp::slotMoveTabRight()
     else {
         to = 0;
     }
-#if QT_VERSION >= 0x050000
     m_tabWidget->tabBar()->moveTab(from, to);
-#else
-    m_tabWidget->moveTab(from, to);
-#endif
 }
 
 /**
@@ -3467,11 +3235,7 @@ void UMLApp::slotXhtmlDocGenerationFinished(bool status)
 /**
  * Return the tab widget.
  */
-#if QT_VERSION >= 0x050000
 QTabWidget* UMLApp::tabWidget()
-#else
-KTabWidget* UMLApp::tabWidget()
-#endif
 {
     return m_tabWidget;
 }
diff --git a/umbrello/uml.h b/umbrello/uml.h
index 3e733fc202a98ce226f9fb53632ee5f51578ae66..52a071e2a68b8e2716694b872f3288d3d00e1db2 100644
--- a/umbrello/uml.h
+++ b/umbrello/uml.h
@@ -16,16 +16,11 @@
 
 // kde includes
 #include <kxmlguiwindow.h>
-#if QT_VERSION < 0x050000
-#include <kurl.h>
-#endif
 #include <ksharedconfig.h>
 
 // qt includes
 #include <QPointer>
-#if QT_VERSION >= 0x050000
 #include <QUrl>
-#endif
 
 // forward declaration of the UML classes
 class BirdView;
@@ -54,9 +49,6 @@ class KRecentFilesAction;
 class KToggleAction;
 class KTabWidget;
 class KMenu;
-#if QT_VERSION < 0x050000
-class KUndoStack;
-#endif
 class KAction;
 
 // Qt forward declarations
@@ -70,9 +62,7 @@ class QMimeData;
 class QPrinter;
 class QUndoCommand;
 class QUndoView;
-#if QT_VERSION >= 0x050000
 class QUndoStack;
-#endif
 class QPushButton;
 class QLabel;
 class QListWidget;
@@ -105,11 +95,7 @@ public:
 
     static UMLApp* app();
 
-#if QT_VERSION >= 0x050000
     void openDocumentFile(const QUrl& url=QUrl());
-#else
-    void openDocumentFile(const KUrl& url=KUrl());
-#endif
 
     void newDocument();
 
@@ -163,11 +149,7 @@ public:
 
     bool editCutCopy(bool bFromView);
 
-#if QT_VERSION >= 0x050000
     QTabWidget *tabWidget();
-#else
-    KTabWidget *tabWidget();
-#endif
 
     QString statusBarMsg();
 
@@ -226,11 +208,7 @@ public slots:
     void slotFileNew();
     void slotFileOpen();
 
-#if QT_VERSION >= 0x050000
     void slotFileOpenRecent(const QUrl& url);
-#else
-    void slotFileOpenRecent(const KUrl& url);
-#endif
     void slotFileSave();
     bool slotFileSaveAs();
     void slotFileClose();
@@ -292,11 +270,7 @@ public slots:
     void slotSelectAll();
     void slotDeleteSelected();
     void slotDeleteDiagram();
-#if QT_VERSION >= 0x050000
     void slotCloseDiagram(int index);
-#else
-    void slotCloseDiagram(QWidget* tab);
-#endif
     void slotGenerateAllCode();
 
     void slotSetZoom(QAction* action);
@@ -313,11 +287,7 @@ public slots:
     void slotEditUndo();
     void slotEditRedo();
 
-#if QT_VERSION >= 0x050000
     void slotTabChanged(int index);
-#else
-    void slotTabChanged(QWidget* tab);
-#endif
     void slotChangeTabLeft();
     void slotChangeTabRight();
     void slotMoveTabLeft();
@@ -346,9 +316,7 @@ private slots:
     void setLang_tcl();
     void setLang_vala();
     void setLang_xmlschema();
-#if QT_VERSION >= 0x050000
     void slotDiagramPopupMenu(const QPoint& point);
-#endif
 
 private:
     static UMLApp* s_instance;  ///< The last created instance of this class.
@@ -445,13 +413,8 @@ private:
     QAction* zoom100Action;
 
     QAction* m_langAct[Uml::ProgrammingLanguage::Reserved];
-#if QT_VERSION >= 0x050000
     QAction* deleteSelectedWidget;
     QAction* deleteDiagram;
-#else
-    KAction* deleteSelectedWidget;
-    KAction* deleteDiagram;
-#endif
     QToolButton* m_newSessionButton;
     KMenu* m_diagramMenu;
     WorkToolBar* m_toolsbar;
@@ -470,11 +433,7 @@ private:
      * Shows, and is parent of, all the UMLViews (diagrams)
      * if tabbed diagrams are enabled.
      */
-#if QT_VERSION >= 0x050000
     QTabWidget* m_tabWidget;
-#else
-    KTabWidget* m_tabWidget;
-#endif
 
     /**
      * Layout supports the dynamic management of the diagram representation (tabbed/stacked)
@@ -504,11 +463,7 @@ private:
      */
     XhtmlGenerator* m_xhtmlGenerator;
 
-#if QT_VERSION >= 0x050000
     QUndoStack* m_pUndoStack;  ///< UndoStack used to store actions, to provide Undo/Redo feature.
-#else
-    KUndoStack* m_pUndoStack;  ///< UndoStack used to store actions, to provide Undo/Redo feature.
-#endif
     bool m_undoEnabled; ///< Undo enabled flag
 
     bool m_hasBegunMacro;  ///< Macro creation flag.
diff --git a/umbrello/umlappprivate.h b/umbrello/umlappprivate.h
index 3043516dc4391eba0639d3df778fdea780fb7331..170662e0757e20518c4f8b00f7c56b67d86ea7c7 100644
--- a/umbrello/umlappprivate.h
+++ b/umbrello/umlappprivate.h
@@ -24,9 +24,6 @@
 #include <ktexteditor/configinterface.h>
 #include <ktexteditor/document.h>
 #include <ktexteditor/editor.h>
-#if QT_VERSION < 0x050000
-#include <ktexteditor/editorchooser.h>
-#endif
 #include <ktexteditor/view.h>
 
 // qt includes
@@ -70,11 +67,7 @@ public:
         view(0),
         document(0)
     {
-#if QT_VERSION >= 0x050000
         editor = KTextEditor::Editor::instance();
-#else
-        editor = KTextEditor::EditorChooser::editor();
-#endif
         logWindow = new QListWidget;
         connect(logWindow, &QListWidget::itemDoubleClicked, this, &UMLAppPrivate::slotLogWindowItemDoubleClicked);
     }
@@ -95,11 +88,7 @@ public slots:
 
         document = editor->createDocument(0);
         view = document->createView(parent);
-#if QT_VERSION >= 0x050000
         view->document()->openUrl(QUrl(columns[0]));
-#else
-        view->document()->openUrl(columns[0]);
-#endif
         view->document()->setReadWrite(false);
         view->setCursorPosition(KTextEditor::Cursor(columns[1].toInt()-1,columns[2].toInt()));
         KTextEditor::ConfigInterface *iface = qobject_cast<KTextEditor::ConfigInterface*>(view);
diff --git a/umbrello/umldoc.cpp b/umbrello/umldoc.cpp
index 5f79e6282241f71abf7f3592fb2615e58a690318..38331254dc09e6a143920c2795af3ec5b6df6d78 100644
--- a/umbrello/umldoc.cpp
+++ b/umbrello/umldoc.cpp
@@ -49,24 +49,10 @@
 
 // kde includes
 #include <kio/job.h>
-#if QT_VERSION < 0x050000
-#include <kio/netaccess.h>
-#include <kinputdialog.h>
-#endif
-#if QT_VERSION >= 0x050000
 #include <KJobWidgets>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
-#if QT_VERSION < 0x050000
-#include <kmimetype.h>
-#endif
 #include <ktar.h>
-#if QT_VERSION < 0x050000
-#include <ktempdir.h>
-#include <ktabwidget.h>
-#include <ktemporaryfile.h>
-#endif
 
 // qt includes
 #include <QApplication>
@@ -75,19 +61,13 @@
 #include <QDir>
 #include <QDomDocument>
 #include <QDomElement>
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
-#if QT_VERSION >= 0x050000
 #include <QMimeDatabase>
-#endif
 #include <QPainter>
 #include <QPrinter>
 #include <QRegExp>
-#if QT_VERSION >= 0x050000
 #include <QTemporaryDir>
 #include <QTemporaryFile>
-#endif
 #include <QTextStream>
 #include <QTimer>
 
@@ -103,11 +83,7 @@ UMLDoc::UMLDoc()
     m_modelID("m1"),
     m_count(0),
     m_modified(false),
-#if QT_VERSION >= 0x050000
     m_doc_url(QUrl()),
-#else
-    m_doc_url(KUrl()),
-#endif
     m_pChangeLog(0),
     m_bLoading(false),
     m_Doc(QString()),
@@ -291,11 +267,7 @@ void UMLDoc::removeView(UMLView *view, bool enforceCurrentView)
  *
  * @param url   The KUrl to set.
  */
-#if QT_VERSION >= 0x050000
 void UMLDoc::setUrl(const QUrl &url)
-#else
-void UMLDoc::setUrl(const KUrl &url)
-#endif
 {
     m_doc_url = url;
 }
@@ -305,11 +277,7 @@ void UMLDoc::setUrl(const KUrl &url)
  *
  * @return  The KUrl of this UMLDoc.
  */
-#if QT_VERSION >= 0x050000
 const QUrl& UMLDoc::url() const
-#else
-const KUrl& UMLDoc::url() const
-#endif
 {
     return m_doc_url;
 }
@@ -319,11 +287,7 @@ const KUrl& UMLDoc::url() const
  */
 void UMLDoc::setUrlUntitled()
 {
-#if QT_VERSION >= 0x050000
     m_doc_url.setUrl(m_doc_url.toString(QUrl::RemoveFilename) + i18n("Untitled"));
-#else
-    m_doc_url.setFileName(i18n("Untitled"));
-#endif
 }
 
 /**
@@ -467,11 +431,7 @@ bool UMLDoc::newDocument()
  * @param format   The format (optional.)
  * @return  True if operation successful.
  */
-#if QT_VERSION >= 0x050000
 bool UMLDoc::openDocument(const QUrl& url, const char* format /* =0 */)
-#else
-bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
-#endif
 {
     Q_UNUSED(format);
     if (url.fileName().length() == 0) {
@@ -486,7 +446,6 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
     // as it sets m_bLoading to false after it was temporarily
     // changed to true to block recording of changes in redo-buffer
     m_bLoading = true;
-#if QT_VERSION >= 0x050000
     QTemporaryFile tmpfile;
     tmpfile.open();
     QUrl dest(QUrl::fromLocalFile(tmpfile.fileName()));
@@ -506,19 +465,6 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
         newDocument();
         return false;
     }
-#else
-    QString tmpfile;
-    KIO::NetAccess::download(url, tmpfile, UMLApp::app());
-
-    QFile file(tmpfile);
-    if (!file.exists()) {
-        KMessageBox::error(0, i18n("The file %1 does not exist.", url.pathOrUrl()), i18n("Load Error"));
-        setUrlUntitled();
-        m_bLoading = false;
-        newDocument();
-        return false;
-    }
-#endif
     // status of XMI loading
     bool status = false;
 
@@ -532,18 +478,9 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
     }
 
     if (mimetype.isEmpty() == false) {
-#if QT_VERSION >= 0x050000
         KTar archive(tmpfile.fileName(), mimetype);
-#else
-        KTar archive(tmpfile, mimetype);
-#endif
         if (archive.open(QIODevice::ReadOnly) == false) {
-#if QT_VERSION >= 0x050000
             KMessageBox::error(0, i18n("The file %1 seems to be corrupted.", url.toString()), i18n("Load Error"));
-#else
-            KMessageBox::error(0, i18n("The file %1 seems to be corrupted.", url.pathOrUrl()), i18n("Load Error"));
-            KIO::NetAccess::removeTempFile(tmpfile);
-#endif
             setUrlUntitled();
             m_bLoading = false;
             newDocument();
@@ -563,12 +500,8 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
             // only check files, we do not go in subdirectories
             if (rootDir->entry(*it)->isFile() == true) {
                 // we found a file, check the mimetype
-#if QT_VERSION >= 0x050000
                 QMimeDatabase db;
                 entryMimeType = db.mimeTypeForFile(*it, QMimeDatabase::MatchExtension).name();
-#else
-                entryMimeType = KMimeType::findByPath(*it, 0, true)->name();
-#endif
                 if (entryMimeType == QLatin1String("application/x-uml")) {
                     foundXMI = true;
                     break;
@@ -578,25 +511,15 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
 
         // if we found an XMI file, we have to extract it to a temporary file
         if (foundXMI == true) {
-#if QT_VERSION >= 0x050000
             QTemporaryDir tmp_dir;
-#else
-            KTempDir tmp_dir;
-#endif
             KArchiveEntry * entry;
             KArchiveFile * fileEntry;
 
             // try to cast the file entry in the archive to an archive entry
             entry = const_cast<KArchiveEntry*>(rootDir->entry(*it));
             if (entry == 0) {
-#if QT_VERSION >= 0x050000
                 KMessageBox::error(0, i18n("There was no XMI file found in the compressed file %1.", url.toString()),
                                    i18n("Load Error"));
-#else
-                KMessageBox::error(0, i18n("There was no XMI file found in the compressed file %1.", url.pathOrUrl()),
-                                   i18n("Load Error"));
-                KIO::NetAccess::removeTempFile(tmpfile);
-#endif
                 setUrlUntitled();
                 m_bLoading = false;
                 newDocument();
@@ -607,14 +530,8 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
             // extract the file
             fileEntry = dynamic_cast<KArchiveFile*>(entry);
             if (fileEntry == 0) {
-#if QT_VERSION >= 0x050000
                 KMessageBox::error(0, i18n("There was no XMI file found in the compressed file %1.", url.toString()),
                                    i18n("Load Error"));
-#else
-                KMessageBox::error(0, i18n("There was no XMI file found in the compressed file %1.", url.pathOrUrl()),
-                                   i18n("Load Error"));
-                KIO::NetAccess::removeTempFile(tmpfile);
-#endif
                 setUrlUntitled();
                 m_bLoading = false;
                 newDocument();
@@ -622,26 +539,13 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
             }
 
             // now we can extract the file to the temporary directory
-#if QT_VERSION >= 0x050000
             fileEntry->copyTo(tmp_dir.path() + QLatin1Char('/'));
 
             // now open the extracted file for reading
             QFile xmi_file(tmp_dir.path() + QLatin1Char('/') + *it);
-#else
-            fileEntry->copyTo(tmp_dir.name());
-
-            // now open the extracted file for reading
-            QFile xmi_file(tmp_dir.name() + *it);
-#endif
             if(!xmi_file.open(QIODevice::ReadOnly)) {
-#if QT_VERSION >= 0x050000
                 KMessageBox::error(0, i18n("There was a problem loading the extracted file: %1", url.toString()),
                                    i18n("Load Error"));
-#else
-                KMessageBox::error(0, i18n("There was a problem loading the extracted file: %1", url.pathOrUrl()),
-                                   i18n("Load Error"));
-                KIO::NetAccess::removeTempFile(tmpfile);
-#endif
                 setUrlUntitled();
                 m_bLoading = false;
                 newDocument();
@@ -653,14 +557,8 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
             // close the extracted file and the temporary directory
             xmi_file.close();
         } else {
-#if QT_VERSION >= 0x050000
                 KMessageBox::error(0, i18n("There was no XMI file found in the compressed file %1.", url.toString()),
                                    i18n("Load Error"));
-#else
-            KMessageBox::error(0, i18n("There was no XMI file found in the compressed file %1.", url.pathOrUrl()),
-                               i18n("Load Error"));
-            KIO::NetAccess::removeTempFile(tmpfile);
-#endif
             setUrlUntitled();
             m_bLoading = false;
             newDocument();
@@ -671,14 +569,8 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
     } else {
         // no, it seems to be an ordinary file
         if (!file.open(QIODevice::ReadOnly)) {
-#if QT_VERSION >= 0x050000
             KMessageBox::error(0, i18n("There was a problem loading file: %1", url.toString()),
                                i18n("Load Error"));
-#else
-            KMessageBox::error(0, i18n("There was a problem loading file: %1", url.pathOrUrl()),
-                               i18n("Load Error"));
-            KIO::NetAccess::removeTempFile(tmpfile);
-#endif
             setUrlUntitled();
             m_bLoading = false;
             newDocument();
@@ -708,19 +600,11 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
 
     if (file.isOpen())
         file.close();
-#if QT_VERSION < 0x050000
-    KIO::NetAccess::removeTempFile(tmpfile);
-#endif
     m_bLoading = false;
     m_bTypesAreResolved = true;
     if (!status) {
-#if QT_VERSION >= 0x050000
         KMessageBox::error(0, i18n("There was a problem loading file: %1", url.toString()),
                            i18n("Load Error"));
-#else
-        KMessageBox::error(0, i18n("There was a problem loading file: %1", url.pathOrUrl()),
-                           i18n("Load Error"));
-#endif
         newDocument();
         return false;
     }
@@ -742,22 +626,14 @@ bool UMLDoc::openDocument(const KUrl& url, const char* format /* =0 */)
  * @param format   The format (optional.)
  * @return  True if operation successful.
  */
-#if QT_VERSION >= 0x050000
 bool UMLDoc::saveDocument(const QUrl& url, const char * format)
-#else
-bool UMLDoc::saveDocument(const KUrl& url, const char * format)
-#endif
 {
     Q_UNUSED(format);
     m_doc_url = url;
     bool uploaded = true;
 
     // first, we have to find out which format to use
-#if QT_VERSION >= 0x050000
     QString strFileName = url.path();
-#else
-    QString strFileName = url.path(KUrl::RemoveTrailingSlash);
-#endif
     QFileInfo fileInfo(strFileName);
     QString fileExt = fileInfo.completeSuffix();
     QString fileFormat = QLatin1String("xmi");
@@ -775,11 +651,7 @@ bool UMLDoc::saveDocument(const KUrl& url, const char * format)
 
     if (fileFormat == QLatin1String("tgz") || fileFormat == QLatin1String("bz2")) {
         KTar * archive;
-#if QT_VERSION >= 0x050000
         QTemporaryFile tmp_tgz_file;
-#else
-        KTemporaryFile tmp_tgz_file;
-#endif
         tmp_tgz_file.setAutoRemove(false);
         tmp_tgz_file.open();
 
@@ -800,29 +672,17 @@ bool UMLDoc::saveDocument(const KUrl& url, const char * format)
 
         // now check if we can write to the file
         if (archive->open(QIODevice::WriteOnly) == false) {
-#if QT_VERSION >= 0x050000
             KMessageBox::error(0, i18n("There was a problem saving: %1", url.url(QUrl::PreferLocalFile)), i18n("Save Error"));
-#else
-            KMessageBox::error(0, i18n("There was a problem saving file: %1", url.pathOrUrl()), i18n("Save Error"));
-#endif
             delete archive;
             return false;
         }
 
         // we have to create a temporary xmi file
         // we will add this file later to the archive
-#if QT_VERSION >= 0x050000
         QTemporaryFile tmp_xmi_file;
-#else
-        KTemporaryFile tmp_xmi_file;
-#endif
         tmp_xmi_file.setAutoRemove(false);
         if (!tmp_xmi_file.open()) {
-#if QT_VERSION >= 0x050000
             KMessageBox::error(0, i18n("There was a problem saving: %1", url.url(QUrl::PreferLocalFile)), i18n("Save Error"));
-#else
-            KMessageBox::error(0, i18n("There was a problem saving file: %1", url.pathOrUrl()), i18n("Save Error"));
-#endif
             delete archive;
             return false;
         }
@@ -839,11 +699,7 @@ bool UMLDoc::saveDocument(const KUrl& url, const char * format)
         archive->addLocalFile(tmp_xmi_file.fileName(), tmpQString);
 
         if (!archive->close()) {
-#if QT_VERSION >= 0x050000
             KMessageBox::error(0, i18n("There was a problem saving: %1", url.url(QUrl::PreferLocalFile)), i18n("Save Error"));
-#else
-            KMessageBox::error(0, i18n("There was a problem saving file: %1", url.pathOrUrl()), i18n("Save Error"));
-#endif
             delete archive;
             return false;
         }
@@ -852,14 +708,10 @@ bool UMLDoc::saveDocument(const KUrl& url, const char * format)
 
         // now we have to check, if we have to upload the file
         if (!url.isLocalFile()) {
-#if QT_VERSION >= 0x050000
             KIO::FileCopyJob *job = KIO::file_copy(QUrl::fromLocalFile(tmp_tgz_file.fileName()), m_doc_url);
             KJobWidgets::setWindow(job, UMLApp::app());
             job->exec();
             uploaded = !job->error();
-#else
-            uploaded = KIO::NetAccess::upload(tmp_tgz_file.fileName(), m_doc_url, UMLApp::app());
-#endif
         }
 
         // now the archive was written to disk (or remote) so we can delete the
@@ -871,11 +723,7 @@ bool UMLDoc::saveDocument(const KUrl& url, const char * format)
     else {
         // save as normal uncompressed XMI
 
-#if QT_VERSION >= 0x050000
         QTemporaryFile tmpfile; // we need this tmp file if we are writing to a remote file
-#else
-        KTemporaryFile tmpfile; // we need this tmp file if we are writing to a remote file
-#endif
         tmpfile.setAutoRemove(false);
 
         // save in _any_ case to a temp file
@@ -887,63 +735,38 @@ bool UMLDoc::saveDocument(const KUrl& url, const char * format)
 
         // lets open the file for writing
         if (!tmpfile.open()) {
-#if QT_VERSION >= 0x050000
             KMessageBox::error(0, i18n("There was a problem saving: %1", url.url(QUrl::PreferLocalFile)), i18n("Save Error"));
-#else
-            KMessageBox::error(0, i18n("There was a problem saving file: %1", url.pathOrUrl()), i18n("Save Error"));
-#endif
             return false;
         }
         saveToXMI(tmpfile); // save the xmi stuff to it
 
         // if it is a remote file, we have to upload the tmp file
         if (!url.isLocalFile()) {
-#if QT_VERSION >= 0x050000
             KIO::FileCopyJob *job = KIO::file_copy(QUrl::fromLocalFile(tmpfile.fileName()), m_doc_url);
             KJobWidgets::setWindow(job, UMLApp::app());
             job->exec();
             uploaded = !job->error();
-#else
-            uploaded = KIO::NetAccess::upload(tmpfile.fileName(), m_doc_url, UMLApp::app());
-#endif
         }
         else {
             // now remove the original file
 #ifdef Q_OS_WIN
             tmpfile.setAutoRemove(true);
-#if QT_VERSION >= 0x050000
             KIO::FileCopyJob* fcj = KIO::file_copy(QUrl::fromLocalFile(tmpfile.fileName()), url, -1, KIO::Overwrite);
 #else
-            KIO::FileCopyJob* fcj = KIO::file_copy(tmpfile.fileName(), url, -1, KIO::Overwrite);
-#endif
-#else
-#if QT_VERSION >= 0x050000
             KIO::FileCopyJob* fcj = KIO::file_move(QUrl::fromLocalFile(tmpfile.fileName()), url, -1, KIO::Overwrite);
-#else
-            KIO::FileCopyJob* fcj = KIO::file_move(tmpfile.fileName(), url, -1, KIO::Overwrite);
-#endif
 #endif
-#if QT_VERSION >= 0x050000
             KJobWidgets::setWindow(fcj, (QWidget*)UMLApp::app());
             fcj->exec();
             if (fcj->error()) {
                 DEBUG(DBG_SRC) << "UMLDoc::saveDocument moving with error = " << tmpfile.fileName() << " to " << url;
                 KMessageBox::error(0, i18n("There was a problem saving: %1", url.url(QUrl::PreferLocalFile)), i18n("Save Error"));
-#else
-            if (KIO::NetAccess::synchronousRun(fcj, (QWidget*)UMLApp::app()) == false) {
-                KMessageBox::error(0, i18n("There was a problem saving file: %1", url.pathOrUrl()), i18n("Save Error"));
-#endif
                 setUrlUntitled();
                 return false;
             }
         }
     }
     if (!uploaded) {
-#if QT_VERSION >= 0x050000
         KMessageBox::error(0, i18n("There was a problem uploading: %1", url.url(QUrl::PreferLocalFile)), i18n("Save Error"));
-#else
-        KMessageBox::error(0, i18n("There was a problem uploading file: %1", url.pathOrUrl()), i18n("Save Error"));
-#endif
         setUrlUntitled();
     }
     setModified(false);
@@ -1527,15 +1350,10 @@ QString UMLDoc::createDiagramName(Uml::DiagramType::Enum type, bool askForName /
 
     while (true) {
         if (askForName)  {
-#if QT_VERSION >= 0x050000
             name = QInputDialog::getText(UMLApp::app(),
                                          i18nc("diagram name", "Name"), i18n("Enter name:"),
                                          QLineEdit::Normal,
                                          defaultName, &ok);
-#else
-            name = KInputDialog::getText(i18nc("diagram name", "Name"), i18n("Enter name:"),
-                                         defaultName, &ok, (QWidget*)UMLApp::app());
-#endif
         }
         if (!ok)  {
             break;
@@ -1606,14 +1424,10 @@ void UMLDoc::renameDiagram(Uml::ID::Type id)
 
     QString oldName= view->umlScene()->name();
     while (true) {
-#if QT_VERSION >= 0x050000
         QString name = QInputDialog::getText(UMLApp::app(),
                                              i18nc("renaming diagram", "Name"), i18n("Enter name:"),
                                              QLineEdit::Normal,
                                              oldName, &ok);
-#else
-        QString name = KInputDialog::getText(i18nc("renaming diagram", "Name"), i18n("Enter name:"), oldName, &ok, (QWidget*)UMLApp::app());
-#endif
         if (!ok) {
             break;
         }
@@ -1643,14 +1457,10 @@ void UMLDoc::renameUMLObject(UMLObject *o)
     bool ok = false;
     QString oldName= o->name();
     while (true) {
-#if QT_VERSION >= 0x050000
         QString name = QInputDialog::getText(UMLApp::app(),
                                              i18nc("renaming uml object", "Name"), i18n("Enter name:"),
                                              QLineEdit::Normal,
                                              oldName, &ok);
-#else
-        QString name = KInputDialog::getText(i18nc("renaming uml object", "Name"), i18n("Enter name:"), oldName, &ok, (QWidget*)UMLApp::app());
-#endif
         if (!ok)  {
             break;
         }
@@ -1684,14 +1494,10 @@ void UMLDoc::renameChildUMLObject(UMLObject *o)
 
     QString oldName= o->name();
     while (true) {
-#if QT_VERSION >= 0x050000
         QString name = QInputDialog::getText(UMLApp::app(),
                                              i18nc("renaming child uml object", "Name"), i18n("Enter name:"),
                                              QLineEdit::Normal,
                                              oldName, &ok);
-#else
-        QString name = KInputDialog::getText(i18nc("renaming child uml object", "Name"), i18n("Enter name:"), oldName, &ok, (QWidget*)UMLApp::app());
-#endif
         if (!ok) {
             break;
         }
@@ -3211,15 +3017,9 @@ void UMLDoc::slotAutoSave()
     if (!m_modified) {
         return;
     }
-#if QT_VERSION >= 0x050000
     QUrl tempUrl = m_doc_url;
-#else
-    KUrl tempUrl = m_doc_url;
-#endif
     if (tempUrl.fileName() == i18n("Untitled")) {
-#if QT_VERSION >= 0x050000
         tempUrl.setScheme(QLatin1String("file"));
-#endif
         tempUrl.setPath(QDir::homePath() + i18n("/autosave%1", QLatin1String(".xmi")));
         saveDocument(tempUrl);
         setUrlUntitled();
@@ -3227,21 +3027,13 @@ void UMLDoc::slotAutoSave()
         UMLApp::app()->setModified(m_modified);
     } else {
         // 2004-05-17 Achim Spangler
-#if QT_VERSION >= 0x050000
         QUrl orgDocUrl = m_doc_url;
-#else
-        KUrl orgDocUrl = m_doc_url;
-#endif
         QString orgFileName = m_doc_url.fileName();
         // don't overwrite manually saved file with autosave content
         QString fileName = tempUrl.fileName();
         Settings::OptionState optionState = Settings::optionState();
         fileName.replace(QLatin1String(".xmi"), optionState.generalState.autosavesuffix);
-#if QT_VERSION >= 0x050000
         tempUrl.setUrl(tempUrl.toString(QUrl::RemoveFilename) + fileName);
-#else
-        tempUrl.setFileName(fileName);
-#endif
         // End Achim Spangler
 
         saveDocument(tempUrl);
diff --git a/umbrello/umldoc.h b/umbrello/umldoc.h
index bda9d97fb2c4dbf71ee9174b866d5b13c9af0780..d7beabb5cbc1359eb5b74c9c248c7541c36d40bb 100644
--- a/umbrello/umldoc.h
+++ b/umbrello/umldoc.h
@@ -24,15 +24,8 @@
 #include "umlstereotypelist.h"
 #include "umlpackagelist.h"
 
-// kde includes
-#if QT_VERSION < 0x050000
-#include <kurl.h>
-#endif
-
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QUrl>
-#endif
 
 // system includes
 #include <typeinfo>
@@ -94,17 +87,10 @@ public:
 
     bool newDocument();
     void closeDocument();
-#if QT_VERSION >= 0x050000
     bool openDocument(const QUrl& url, const char *format = 0);
     bool saveDocument(const QUrl& url, const char *format = 0);
     const QUrl& url() const;
     void setUrl(const QUrl& url);
-#else
-    bool openDocument(const KUrl& url, const char *format = 0);
-    bool saveDocument(const KUrl& url, const char *format = 0);
-    const KUrl& url() const;
-    void setUrl(const KUrl& url);
-#endif
     void setUrlUntitled();
 
     void setupSignals();
@@ -266,11 +252,7 @@ private:
     Uml::ID::Type m_modelID; ///< xmi.id of this model in the <UML:Model>
     int m_count;   ///< auxiliary counter for the progress bar
     bool m_modified;
-#if QT_VERSION >= 0x050000
     QUrl m_doc_url;
-#else
-    KUrl m_doc_url;
-#endif
     /**
      * Contains all the UMLObject id changes of paste session.
      */
diff --git a/umbrello/umllistview.cpp b/umbrello/umllistview.cpp
index cd244041a4bee24fdc3c1720db1bf2d2181a3164..02ec800feb31a127099bc8ccb37502518148c50c 100644
--- a/umbrello/umllistview.cpp
+++ b/umbrello/umllistview.cpp
@@ -60,28 +60,17 @@
 #include "object_factory.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kfiledialog.h>
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
-#if QT_VERSION < 0x050000
-#include <ktabwidget.h>
-#endif
 
 // qt includes
 #include <QApplication>
 #include <QDrag>
 #include <QDropEvent>
 #include <QEvent>
-#if QT_VERSION >= 0x050000
 #include <QFileDialog>
-#endif
 #include <QFocusEvent>
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QKeyEvent>
 #include <QMouseEvent>
 #include <QPointer>
@@ -491,40 +480,21 @@ void UMLListView::slotMenuSelection(QAction* action, const QPoint &position)
                 return;
             }
             // configure & show the file dialog
-#if QT_VERSION >= 0x050000
             const QString rootDir(m_doc->url().adjusted(QUrl::RemoveFilename).path());
             QPointer<QFileDialog> fileDialog = new QFileDialog(this, i18n("Externalize Folder"), rootDir, QLatin1String("*.xml"));
-#else
-            const QString rootDir(m_doc->url().directory());
-            QPointer<KFileDialog> fileDialog = new KFileDialog(rootDir, QLatin1String("*.xml"), this);
-            fileDialog->setCaption(i18n("Externalize Folder"));
-            fileDialog->setOperationMode(KFileDialog::Other);
-#endif
             // set a sensible default filename
             QString defaultFilename = current->text(0).toLower();
             defaultFilename.replace(QRegExp(QLatin1String("\\W+")), QLatin1String("_"));
             defaultFilename.append(QLatin1String(".xml"));  // default extension
-#if QT_VERSION >= 0x050000
             fileDialog->selectFile(defaultFilename);
             QList<QUrl> selURL;
             if (fileDialog->exec() == QDialog::Accepted) {
                 selURL = fileDialog->selectedUrls();
             }
-#else
-            fileDialog->setSelection(defaultFilename);
-            KUrl selURL;
-            if (fileDialog->exec() == QDialog::Accepted) {
-                selURL = fileDialog->selectedUrl();
-            }
-#endif
             delete fileDialog;
             if (selURL.isEmpty())
                 return;
-#if QT_VERSION >= 0x050000
             QString path = selURL[0].toLocalFile();
-#else
-            QString path = selURL.toLocalFile();
-#endif
             QString fileName = path;
             if (fileName.startsWith(rootDir)) {
                 fileName.remove(rootDir);
@@ -581,17 +551,11 @@ void UMLListView::slotMenuSelection(QAction* action, const QPoint &position)
     case ListPopupMenu::mt_Model:
         {
             bool ok = false;
-#if QT_VERSION >= 0x050000
             QString name = QInputDialog::getText(UMLApp::app(),
                                                  i18n("Enter Model Name"),
                                                  i18n("Enter the new name of the model:"),
                                                  QLineEdit::Normal,
                                                  m_doc->name(), &ok);
-#else
-            QString name = KInputDialog::getText(i18n("Enter Model Name"),
-                                                 i18n("Enter the new name of the model:"),
-                                                 m_doc->name(), &ok, UMLApp::app());
-#endif
             if (ok) {
                 setTitle(0, name);
                 m_doc->setName(name);
diff --git a/umbrello/umlmodel/enumliteral.cpp b/umbrello/umlmodel/enumliteral.cpp
index b2966f7d9f6ff8adcadb4cfba4af4ccd258d8942..d0334f014c8a67e52538f3385885d57cea33e4a8 100644
--- a/umbrello/umlmodel/enumliteral.cpp
+++ b/umbrello/umlmodel/enumliteral.cpp
@@ -12,15 +12,10 @@
 #include "umlenumliteraldialog.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 
 /**
  * Sets up an enum literal.
diff --git a/umbrello/umlmodel/folder.cpp b/umbrello/umlmodel/folder.cpp
index 3da66cd9de1ad0abfe5f855e09627e4a7b786da6..92b79daffd65445bda2c69fbc42015c240e01e93 100644
--- a/umbrello/umlmodel/folder.cpp
+++ b/umbrello/umlmodel/folder.cpp
@@ -329,11 +329,7 @@ void UMLFolder::saveToXMI(QDomDocument& qDoc, QDomElement& qElement)
     // See if we can create the external file.
     // If not then internalize the folder.
     UMLDoc *umldoc = UMLApp::app()->document();
-#if QT_VERSION >= 0x050000
     QString fileName = umldoc->url().adjusted(QUrl::RemoveFilename).path() + m_folderFile;
-#else
-    QString fileName = umldoc->url().directory() + QLatin1Char('/') + m_folderFile;
-#endif
     QFile file(fileName);
     if (!file.open(QIODevice::WriteOnly)) {
         uError() << m_folderFile << QLatin1String(": ")
@@ -489,11 +485,7 @@ bool UMLFolder::load(QDomElement& element)
                     if (!loadDiagramsFromXMI(diagramNode))
                         totalSuccess = false;
                 } else if (xtag == QLatin1String("external_file")) {
-#if QT_VERSION >= 0x050000
                     const QString rootDir(umldoc->url().adjusted(QUrl::RemoveFilename).path());
-#else
-                    const QString rootDir(umldoc->url().directory());
-#endif
                     QString fileName = el.attribute(QLatin1String("name"));
                     const QString path(rootDir + QLatin1Char('/') + fileName);
                     if (loadFolderFile(path))
diff --git a/umbrello/umlmodel/package.cpp b/umbrello/umlmodel/package.cpp
index 42577ac6f2e623e1dea73cd4335f5c7c7a1c95db..371f51eeb12ca1a414f59f867c32220dc4f3afbe 100644
--- a/umbrello/umlmodel/package.cpp
+++ b/umbrello/umlmodel/package.cpp
@@ -23,16 +23,11 @@
 #include "model_utils.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 
 using namespace Uml;
 
diff --git a/umbrello/umlmodel/stereotype.cpp b/umbrello/umlmodel/stereotype.cpp
index 3f5dd6870cae7f75c035e74fd18880e3bd319ae7..dcbeae462fd4f7f2386d62ddc779887f4c933b0b 100644
--- a/umbrello/umlmodel/stereotype.cpp
+++ b/umbrello/umlmodel/stereotype.cpp
@@ -17,15 +17,10 @@
 #include "uml.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 
 /**
  * Sets up a stereotype.
@@ -115,14 +110,10 @@ void UMLStereotype::saveToXMI(QDomDocument& qDoc, QDomElement& qElement)
 bool UMLStereotype::showPropertiesDialog(QWidget* parent)
 {
     bool ok;
-#if QT_VERSION >= 0x050000
     QString stereoTypeName = QInputDialog::getText(parent,
                                                    i18n("Stereotype"), i18n("Enter name:"),
                                                    QLineEdit::Normal,
                                                    name(), &ok);
-#else
-    QString stereoTypeName = KInputDialog::getText(i18n("Stereotype"), i18n("Enter name:"), name(), &ok, parent);
-#endif
     if (ok) {
         setName(stereoTypeName);
     }
diff --git a/umbrello/umlscene.cpp b/umbrello/umlscene.cpp
index fe4118d1586f2274c4ac5f322efec63ef78664f2..a775d39f09926489c819cc97944f1596a59c90ca 100644
--- a/umbrello/umlscene.cpp
+++ b/umbrello/umlscene.cpp
@@ -73,11 +73,6 @@
 #include "widgetlist_utils.h"
 
 //kde include files
-#if QT_VERSION < 0x050000
-#include <kfiledialog.h>
-#include <kinputdialog.h>
-#include <kio/netaccess.h>
-#endif
 #include <KMessageBox>
 #include <kcursor.h>
 #include <KLocalizedString>
@@ -90,9 +85,7 @@
 #include <QString>
 #include <QStringList>
 
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 
 // system includes
 #include <cmath>  // for ceil
@@ -2991,18 +2984,12 @@ void UMLScene::slotMenuSelection(QAction* action)
     case ListPopupMenu::mt_State:
         {
             bool ok = false;
-#if QT_VERSION >= 0x050000
             QString name = QInputDialog::getText(UMLApp::app(),
                                                  i18n("Enter State Name"),
                                                  i18n("Enter the name of the new state:"),
                                                  QLineEdit::Normal,
                                                  i18n("new state"),
                                                  &ok);
-#else
-            QString name = KInputDialog::getText(i18n("Enter State Name"),
-                                                 i18n("Enter the name of the new state:"),
-                                                 i18n("new state"), &ok, UMLApp::app());
-#endif
             if (ok) {
                 StateWidget* state = new StateWidget(this);
                 state->setName(name);
@@ -3035,18 +3022,12 @@ void UMLScene::slotMenuSelection(QAction* action)
     case ListPopupMenu::mt_Activity:
         {
             bool ok = false;
-#if QT_VERSION >= 0x050000
             QString name = QInputDialog::getText(UMLApp::app(),
                                                  i18n("Enter Activity Name"),
                                                  i18n("Enter the name of the new activity:"),
                                                  QLineEdit::Normal,
                                                  i18n("new activity"),
                                                  &ok);
-#else
-            QString name = KInputDialog::getText(i18n("Enter Activity Name"),
-                                                 i18n("Enter the name of the new activity:"),
-                                                 i18n("new activity"), &ok, UMLApp::app());
-#endif
             if (ok) {
                 ActivityWidget* activity = new ActivityWidget(this, ActivityWidget::Normal);
                 activity->setName(name);
@@ -3082,18 +3063,12 @@ void UMLScene::slotMenuSelection(QAction* action)
     case ListPopupMenu::mt_Rename:
         {
             bool ok = false;
-#if QT_VERSION >= 0x050000
             QString newName = QInputDialog::getText(UMLApp::app(),
                                                     i18n("Enter Diagram Name"),
                                                     i18n("Enter the new name of the diagram:"),
                                                     QLineEdit::Normal,
                                                     name(),
                                                     &ok);
-#else
-            QString newName = KInputDialog::getText(i18n("Enter Diagram Name"),
-                                                    i18n("Enter the new name of the diagram:"),
-                                                    name(), &ok, UMLApp::app());
-#endif
             if (ok) {
                 setName(newName);
                 m_doc->signalDiagramRenamed(activeView());
diff --git a/umbrello/umlviewimageexporter.cpp b/umbrello/umlviewimageexporter.cpp
index 3d3135bd0ff570eb5db87c61923996c31cbeda42..7bd0bf0b45929f55a7bbae0b20a7917ce6ba2c50 100644
--- a/umbrello/umlviewimageexporter.cpp
+++ b/umbrello/umlviewimageexporter.cpp
@@ -21,21 +21,13 @@
 #include "umlscene.h"
 
 //kde include files
-#if QT_VERSION >= 0x050000
 #include <KIO/Job>
 #include <KJobWidgets>
-#else
-#include <kfiledialog.h>
-#include <kurl.h>
-#include <kio/netaccess.h>
-#endif
 #include <KLocalizedString>
 #include <KMessageBox>
 
 // Qt include files
-#if QT_VERSION >= 0x050000
 #include <QFileDialog>
-#endif
 #include <QPointer>
 #include <QString>
 #include <QStringList>
@@ -112,22 +104,14 @@ bool UMLViewImageExporter::prepareExport()
         }
 
         // check if the file exists
-#if QT_VERSION >= 0x050000
         KIO::StatJob *job = KIO::stat(m_imageURL, KIO::StatJob::SourceSide, 0);
         KJobWidgets::setWindow(job, UMLApp::app());
         job->exec();
         bool result = !job->error();
-#else
-        bool result = KIO::NetAccess::exists(m_imageURL, KIO::NetAccess::SourceSide, UMLApp::app());
-#endif
         if (result) {
-            int wantSave = KMessageBox::warningContinueCancel(0,
-#if QT_VERSION >= 0x050000
-                                i18n("The selected file %1 exists.\nDo you want to overwrite it?", m_imageURL.url(QUrl::PreferLocalFile)),
-#else
-                                i18n("The selected file %1 exists.\nDo you want to overwrite it?", m_imageURL.pathOrUrl()),
-#endif
-                                i18n("File Already Exists"), KGuiItem(i18n("&Overwrite")));
+            int wantSave = KMessageBox::warningContinueCancel(0, i18n("The selected file %1 exists.\nDo you want to overwrite it?",
+                                                                      m_imageURL.url(QUrl::PreferLocalFile)),
+                                                                      i18n("File Already Exists"), KGuiItem(i18n("&Overwrite")));
             if (wantSave == KMessageBox::Continue) {
                 exportPrepared = true;
             }
@@ -151,11 +135,7 @@ bool UMLViewImageExporter::getParametersFromUser()
     bool success = true;
 
     // configure & show the file dialog
-#if QT_VERSION >= 0x050000
     QUrl url;
-#else
-    KUrl url;
-#endif
     QPointer<UMLFileDialog> dialog = new UMLFileDialog(url, QString(), UMLApp::app());
     prepareFileDialog(dialog);
     dialog->exec();
@@ -168,12 +148,8 @@ bool UMLViewImageExporter::getParametersFromUser()
 
         // update image url and mime type
         m_imageURL = dialog->selectedUrl();
-#if QT_VERSION >= 0x050000
         QFileInfo f(m_imageURL.toLocalFile());
         m_imageMimeType = UMLViewImageExporterModel::imageTypeToMimeType(f.suffix());
-#else
-        m_imageMimeType = dialog->currentMimeFilter();
-#endif
         UMLApp::app()->setImageMimeType(m_imageMimeType);
         DEBUG(DBG_IE) << "image mime type=" << m_imageMimeType << " / URL=" << m_imageURL;
     }
@@ -197,29 +173,15 @@ void UMLViewImageExporter::prepareFileDialog(UMLFileDialog *fileDialog)
         mimeTypes.removeOne(QLatin1String("image/x-dot"));
 
     fileDialog->setCaption(i18n("Save As"));
-#if QT_VERSION >= 0x050000
     fileDialog->setAcceptMode(QFileDialog::AcceptSave);
     fileDialog->setMimeTypeFilters(mimeTypes);
-#else
-    fileDialog->setOperationMode(KFileDialog::Saving);
-    fileDialog->setMimeFilter(mimeTypes, m_imageMimeType);
-#endif
-
     // set a sensible default filename
     if (m_imageURL.isEmpty()) {
-#if QT_VERSION >= 0x050000
         QUrl docURL = UMLApp::app()->document()->url();
         docURL.setUrl(docURL.toString(QUrl::RemoveFilename)
                       + m_scene->name() + QLatin1Char('.')
                       + UMLViewImageExporterModel::mimeTypeToImageType(m_imageMimeType));
         fileDialog->selectUrl(docURL);
-#else
-        KUrl docURL = UMLApp::app()->document()->url();
-        KUrl directory = docURL;
-        directory.setPath(docURL.directory());
-
-        fileDialog->setUrl(directory);
-#endif
         fileDialog->setSelection(m_scene->name() + QLatin1Char('.') + UMLViewImageExporterModel::mimeTypeToImageType(m_imageMimeType));
     } else {
         fileDialog->setUrl(m_imageURL);
diff --git a/umbrello/umlviewimageexporter.h b/umbrello/umlviewimageexporter.h
index 2dbfdeb2a07a2e411da61ebab1d3cf537f3d8231..962175926b923f2dedd4e461f1542d3a07f99015 100644
--- a/umbrello/umlviewimageexporter.h
+++ b/umbrello/umlviewimageexporter.h
@@ -13,14 +13,8 @@
 
 #include "umlviewimageexportermodel.h"
 
-#if QT_VERSION < 0x050000
-#include <kurl.h>
-#endif
-
 #include <QString>
-#if QT_VERSION >= 0x050000
 #include <QUrl>
-#endif
 
 class UMLScene;
 class UMLFileDialog;
@@ -38,21 +32,13 @@ public:
     virtual ~UMLViewImageExporter();
 
     void exportView();
-#if QT_VERSION >= 0x050000
     QUrl    getImageURL() const { return m_imageURL; }
-#else
-    KUrl    getImageURL() const { return m_imageURL; }
-#endif
     QString getImageMimeType() const { return m_imageMimeType; }
 
 private:
 
     UMLScene* m_scene;          ///< The scene to export.
-#if QT_VERSION >= 0x050000
     QUrl      m_imageURL;       ///< The URL used to save the image.
-#else
-    KUrl      m_imageURL;       ///< The URL used to save the image.
-#endif
     QString   m_imageMimeType;  ///< The mime type used to save the image.
 
     bool getParametersFromUser();
diff --git a/umbrello/umlviewimageexporterall.cpp b/umbrello/umlviewimageexporterall.cpp
index bb0bb1c8561ae11a499e539a536d87509622b5f9..5ebe1e28873c4acdb5b12585a0f1022dae7bccab 100644
--- a/umbrello/umlviewimageexporterall.cpp
+++ b/umbrello/umlviewimageexporterall.cpp
@@ -21,19 +21,13 @@
 // kde include files
 #include <KComboBox>
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kfilefiltercombo.h>
-#include <kurl.h>
-#endif
 #include <kurlrequester.h>
 #include <KMessageBox>
 
 // Qt include files 
 #include <QString>
 #include <QStringList>
-#if QT_VERSION >= 0x050000
 #include <QUrl>
-#endif
 
 /**
  * Constructor for UMLViewImageExporterAll
@@ -92,13 +86,9 @@ void UMLViewImageExporterAll::exportViews(const UMLViewList &views)
     // default url can't be set when creating the action because the
     // document wasn't loaded
     if (m_dialog->m_kURL->url().isEmpty()) {
-#if QT_VERSION >= 0x050000
         QUrl directory(umlDoc->url());
         directory.adjusted(QUrl::RemoveFilename);
         m_dialog->m_kURL->setUrl(directory);
-#else
-        m_dialog->m_kURL->setUrl(umlDoc->url().directory());
-#endif
     }
 
     if (m_dialog->exec() == QDialog::Rejected) {
@@ -110,13 +100,8 @@ void UMLViewImageExporterAll::exportViews(const UMLViewList &views)
     // export all views
     umlDoc->writeToStatusBar(i18n("Exporting all views..."));
     QStringList errors = UMLViewImageExporterModel(resolution).exportViews(views,
-#if QT_VERSION >= 0x050000
                                 UMLViewImageExporterModel::mimeTypeToImageType(m_dialog->m_imageType->currentType()),
                                 QUrl(m_dialog->m_kURL->url()),
-#else
-                                UMLViewImageExporterModel::mimeTypeToImageType(m_dialog->m_imageType->currentType()),
-                                KUrl(m_dialog->m_kURL->url()),
-#endif
                                 m_dialog->m_useFolders->isChecked());
     if (!errors.empty()) {
         KMessageBox::errorList(app, i18n("Some errors happened when exporting the images:"), errors);
diff --git a/umbrello/umlviewimageexportermodel.cpp b/umbrello/umlviewimageexportermodel.cpp
index e07157f1f11e2161719281a4cca103e371c19048..ac411d4efb500baf834e520cb1dc12fb1437f398 100644
--- a/umbrello/umlviewimageexportermodel.cpp
+++ b/umbrello/umlviewimageexportermodel.cpp
@@ -21,16 +21,9 @@
 #include "umlview.h"
 
 // kde include files
-#if QT_VERSION >= 0x050000
 #include <KIO/Job>
 #include <KJobWidgets>
 #include <KIO/MkdirJob>
-#else
-#include <kio/netaccess.h>
-#endif
-#if QT_VERSION < 0x050000
-#include <ktemporaryfile.h>
-#endif
 #include <KLocalizedString>
 
 // include files for Qt
@@ -45,9 +38,7 @@
 #include <QRect>
 #include <QRegExp>
 #include <QSvgGenerator>
-#if QT_VERSION >= 0x050000
 #include <QTemporaryFile>
-#endif
 
 // system includes
 #include <cmath>
@@ -217,13 +208,8 @@ QStringList UMLViewImageExporterModel::exportViews(const UMLViewList &views, con
     QStringList errors;
 
     foreach (UMLView *view, views) {
-#if QT_VERSION >= 0x050000
         QUrl url = QUrl::fromLocalFile(directory.path() + QLatin1Char('/') +
                  getDiagramFileName(view->umlScene(), imageType, useFolders));
-#else
-        KUrl url = directory;
-        url.addPath(getDiagramFileName(view->umlScene(), imageType, useFolders));
-#endif
 
         QString returnString = exportView(view->umlScene(), imageType, url);
         if (!returnString.isNull()) {
@@ -250,11 +236,7 @@ QStringList UMLViewImageExporterModel::exportViews(const UMLViewList &views, con
  * @return  The error message if some problem occurred when exporting, or
  *          QString() if all went fine.
  */
-#if QT_VERSION >= 0x050000
 QString UMLViewImageExporterModel::exportView(UMLScene* scene, const QString &imageType, const QUrl &url) const
-#else
-QString UMLViewImageExporterModel::exportView(UMLScene* scene, const QString &imageType, const KUrl &url) const
-#endif
 {
     if (!scene) {
         return i18n("Empty scene");
@@ -262,22 +244,14 @@ QString UMLViewImageExporterModel::exportView(UMLScene* scene, const QString &im
 
     // create the needed directories
     if (!prepareDirectory(url)) {
-#if QT_VERSION >= 0x050000
         return i18n("Cannot create directory: %1", url.path());
-#else
-        return i18n("Cannot create directory: %1", url.directory());
-#endif
     }
 
     // The fileName will be used when exporting the image. If the url isn't local,
     // the fileName is the name of a temporal local file to export the image to, and then
     // upload it to its destiny
     QString fileName;
-#if QT_VERSION >= 0x050000
     QTemporaryFile tmpFile;
-#else
-    KTemporaryFile tmpFile;
-#endif
     if (url.isLocalFile()) {
         fileName = url.toLocalFile();
     } else {
@@ -297,14 +271,10 @@ QString UMLViewImageExporterModel::exportView(UMLScene* scene, const QString &im
 
     // if the file wasn't local, upload the temp file to the target
     if (!url.isLocalFile()) {
-#if QT_VERSION >= 0x050000
         KIO::FileCopyJob *job = KIO::file_copy(QUrl::fromLocalFile(tmpFile.fileName()), url);
         KJobWidgets::setWindow(job, UMLApp::app());
         job->exec();
         if (job->error()) {
-#else
-        if (!KIO::NetAccess::upload(tmpFile.fileName(), url, UMLApp::app())) {
-#endif
             return i18n("There was a problem saving file: %1", url.path());
         }
     }
@@ -344,14 +314,9 @@ QString UMLViewImageExporterModel::getDiagramFileName(UMLScene* scene, const QSt
  * @return True if the operation was successful,
  *         false if the directory didn't exist and couldn't be created.
  */
-#if QT_VERSION >= 0x050000
 bool UMLViewImageExporterModel::prepareDirectory(const QUrl &url) const
-#else
-bool UMLViewImageExporterModel::prepareDirectory(const KUrl &url) const
-#endif
 {
-    // the KUrl is copied to get protocol, user and so on and then the path is cleaned
-#if QT_VERSION >= 0x050000
+    // the QUrl is copied to get protocol, user and so on and then the path is cleaned
     QUrl directory = url;
     directory.setPath(QString());
 
@@ -370,24 +335,6 @@ bool UMLViewImageExporterModel::prepareDirectory(const KUrl &url) const
             }
         }
     }
-#else
-    KUrl directory = url;
-    directory.setPath(QString());
-
-    // creates the directory and any needed parent directories
-    QStringList dirs = url.directory().split(QDir::separator(), QString::SkipEmptyParts);
-    for (QStringList::ConstIterator it = dirs.constBegin() ; it != dirs.constEnd(); ++it) {
-        directory.addPath(*it);
-
-        if (!KIO::NetAccess::exists(directory, KIO::NetAccess::SourceSide, UMLApp::app())) {
-
-            if (!KIO::NetAccess::mkdir(directory, UMLApp::app())) {
-                return false;
-            }
-        }
-    }
-#endif
-
     return true;
 }
 
@@ -475,11 +422,7 @@ bool UMLViewImageExporterModel::exportViewToEps(UMLScene* scene, const QString &
 
     QPrinter printer(QPrinter::ScreenResolution);
     printer.setOutputFileName(fileName);
-#if QT_VERSION >= 0x050000
     printer.setOutputFormat(QPrinter::PdfFormat);
-#else
-    printer.setOutputFormat(QPrinter::PostScriptFormat);
-#endif
     printer.setColorMode(QPrinter::Color);
     printer.setPaperSize(paperSize, QPrinter::Millimeter);
     printer.setPageMargins(paperSize.width() * border, paperSize.height() * border, 0, 0, QPrinter::Millimeter);
diff --git a/umbrello/umlviewimageexportermodel.h b/umbrello/umlviewimageexportermodel.h
index c4ff441c9908dbf085292232371d1216d64324a4..608f23fade321cccf35be1a2276975a14fe68c4a 100644
--- a/umbrello/umlviewimageexportermodel.h
+++ b/umbrello/umlviewimageexportermodel.h
@@ -42,22 +42,14 @@ public:
 
     explicit UMLViewImageExporterModel(float resolution = 0.0);
     virtual ~UMLViewImageExporterModel();
-#if QT_VERSION >= 0x050000
     QString exportView(UMLScene* scene, const QString &imageType, const QUrl &url) const;
-#else
-    QString exportView(UMLScene* scene, const QString &imageType, const KUrl &url) const;
-#endif
 
     QStringList exportViews(const UMLViewList &views, const QString &imageType, const QUrl &directory, bool useFolders) const;
 private:
 
     QString getDiagramFileName(UMLScene* scene, const QString &imageType, bool useFolders = false) const;
 
-#if QT_VERSION >= 0x050000
     bool prepareDirectory(const QUrl &url) const;
-#else
-    bool prepareDirectory(const KUrl &url) const;
-#endif
 
     bool exportViewTo(UMLScene* scene, const QString &imageType, const QString &fileName) const;
     bool exportViewToDot(UMLScene* scene, const QString &fileName) const;
diff --git a/umbrello/umlwidgets/activitywidget.cpp b/umbrello/umlwidgets/activitywidget.cpp
index be59be8ce1ceabf996ebb93e94e41d714762dfb2..4162f3eb2acc0b1f7d36ebbcdffedbf48b3ea065 100644
--- a/umbrello/umlwidgets/activitywidget.cpp
+++ b/umbrello/umlwidgets/activitywidget.cpp
@@ -23,14 +23,9 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QPointer>
 /**
  * Creates a Activity widget.
@@ -374,17 +369,11 @@ void ActivityWidget::slotMenuSelection(QAction* action)
         {
             bool ok = false;
             QString n = name();
-#if QT_VERSION >= 0x050000
             n = QInputDialog::getText(Q_NULLPTR,
                                       i18n("Enter Activity Name"),
                                       i18n("Enter the name of the new activity:"),
                                       QLineEdit::Normal,
                                       n, &ok);
-#else
-            n = KInputDialog::getText(i18n("Enter Activity Name"),
-                                      i18n("Enter the name of the new activity:"),
-                                      n, &ok);
-#endif
             if (ok && !n.isEmpty()) {
                 setName(n);
             }
diff --git a/umbrello/umlwidgets/associationwidget.cpp b/umbrello/umlwidgets/associationwidget.cpp
index 0c35d393299d47b9fb8753a3e9ac88b7f19a24d4..2f6acc17ffaffe1014ddc42eb273835d88c3cc45 100644
--- a/umbrello/umlwidgets/associationwidget.cpp
+++ b/umbrello/umlwidgets/associationwidget.cpp
@@ -36,19 +36,12 @@
 #include "widget_utils.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kcolordialog.h>
-#include <kfontdialog.h>
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QColorDialog>
 #include <QFontDialog>
 #include <QInputDialog>
-#endif
 #include <QPainterPath>
 #include <QPointer>
 #include <QRegExpValidator>
@@ -3045,17 +3038,11 @@ void AssociationWidget::slotMenuSelection(QAction* action)
             oldText = m_role[r].multiplicityWidget->text();
         else
             oldText = QString();
-#if QT_VERSION >= 0x050000
         newText = QInputDialog::getText(m_scene->activeView(),
                                         i18n("Multiplicity"),
                                         i18n("Enter multiplicity:"),
                                         QLineEdit::Normal,
                                         oldText, NULL);
-#else
-        newText = KInputDialog::getText(i18n("Multiplicity"),
-                                        i18n("Enter multiplicity:"),
-                                        oldText, NULL, m_scene->activeView(), &v);
-#endif
         if (newText != oldText) {
             if (FloatingTextWidget::isTextValid(newText)) {
                 setMultiplicity(newText, r);
@@ -3071,17 +3058,11 @@ void AssociationWidget::slotMenuSelection(QAction* action)
             oldText = m_nameWidget->text();
         else
             oldText = QString();
-#if QT_VERSION >= 0x050000
         newText = QInputDialog::getText(m_scene->activeView(),
                                         i18n("Association Name"),
                                         i18n("Enter association name:"),
                                         QLineEdit::Normal,
                                         oldText, NULL);
-#else
-        newText = KInputDialog::getText(i18n("Association Name"),
-                                        i18n("Enter association name:"),
-                                        oldText, NULL, m_scene->activeView(), &v);
-#endif
         if (newText != oldText) {
             if (FloatingTextWidget::isTextValid(newText)) {
                 setName(newText);
@@ -3099,17 +3080,11 @@ void AssociationWidget::slotMenuSelection(QAction* action)
             oldText = m_role[r].roleWidget->text();
         else
             oldText = QString();
-#if QT_VERSION >= 0x050000
         newText = QInputDialog::getText(m_scene->activeView(),
                                         i18n("Role Name"),
                                         i18n("Enter role name:"),
                                         QLineEdit::Normal,
                                         oldText, NULL);
-#else
-        newText = KInputDialog::getText(i18n("Role Name"),
-                                        i18n("Enter role name:"),
-                                        oldText, NULL, m_scene->activeView(), &v);
-#endif
         if (newText != oldText) {
             if (FloatingTextWidget::isTextValid(newText)) {
                 setRoleName(newText, r);
@@ -3122,27 +3097,17 @@ void AssociationWidget::slotMenuSelection(QAction* action)
 
     case ListPopupMenu::mt_Change_Font:
         {
-#if QT_VERSION >= 0x050000
             bool ok = false;
             QFont fnt = QFontDialog::getFont(&ok, font(), m_scene->activeView());
             if (ok)
-#else
-            QFont fnt = font();
-            if (KFontDialog::getFont(fnt, KFontChooser::NoDisplayFlags, m_scene->activeView()))
-#endif
                 lwSetFont(fnt);
         }
         break;
 
     case ListPopupMenu::mt_Line_Color:
         {
-#if QT_VERSION >= 0x050000
             QColor newColor = QColorDialog::getColor(lineColor());
             if (newColor != lineColor()) {
-#else
-            QColor newColor;
-            if (KColorDialog::getColor(newColor)) {
-#endif
                 m_scene->selectionSetLineColor(newColor);
                 umlDoc()->setModified(true);
             }
diff --git a/umbrello/umlwidgets/combinedfragmentwidget.cpp b/umbrello/umlwidgets/combinedfragmentwidget.cpp
index 424bc8cc2eb3c0cf0a5d7ae00b848d8c35db20ce..06fedefd8543184b4ed0528e48cb9a4dc74e2841 100644
--- a/umbrello/umlwidgets/combinedfragmentwidget.cpp
+++ b/umbrello/umlwidgets/combinedfragmentwidget.cpp
@@ -22,14 +22,9 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QPainter>
 #include <QString>
 
@@ -294,7 +289,6 @@ void CombinedFragmentWidget::askNameForWidgetType(UMLWidget* &targetWidget, cons
                              << QLatin1String("Assertion")
                              << QLatin1String("Alternative")
                              << QLatin1String("Parallel") ;
-#if QT_VERSION >= 0x050000
     QPointer<QInputDialog> inputDlg = new QInputDialog();
     inputDlg->setComboBoxItems(list);
     inputDlg->setOptions(QInputDialog::UseListViewForComboBoxItems);
@@ -304,10 +298,6 @@ void CombinedFragmentWidget::askNameForWidgetType(UMLWidget* &targetWidget, cons
     QStringList result;
     result.append(inputDlg->textValue());
     delete inputDlg;
-#else
-    const QStringList select = list;
-    QStringList result = KInputDialog::getItemList (dialogTitle, dialogPrompt, list, select, false, &pressedOK, UMLApp::app());
-#endif
     if (pressedOK) {
         QString type = result.join(QString());
         dynamic_cast<CombinedFragmentWidget*>(targetWidget)->setCombinedFragmentType(type);
@@ -435,7 +425,6 @@ void CombinedFragmentWidget::slotMenuSelection(QAction* action)
             bool ok = false;
             QString name = m_Text;
 
-#if QT_VERSION >= 0x050000
             if (m_CombinedFragment == Alt) {
                 name = QInputDialog::getText(Q_NULLPTR,
                                              i18n("Enter first alternative"), i18n("Enter first alternative :"),
@@ -454,17 +443,6 @@ void CombinedFragmentWidget::slotMenuSelection(QAction* action)
                                          QLineEdit::Normal,
                                          m_Text, &ok);
             }
-#else
-            if (m_CombinedFragment == Alt) {
-                name = KInputDialog::getText(i18n("Enter first alternative"), i18n("Enter first alternative :"), m_Text, &ok);
-            }
-            else if (m_CombinedFragment == Ref) {
-            name = KInputDialog::getText(i18n("Enter referenced diagram name"), i18n("Enter referenced diagram name :"), m_Text, &ok);
-            }
-            else if (m_CombinedFragment == Loop) {
-            name = KInputDialog::getText(i18n("Enter the guard of the loop"), i18n("Enter the guard of the loop:"), m_Text, &ok);
-            }
-#endif
             if (ok && name.length() > 0)
                 m_Text = name;
         }
diff --git a/umbrello/umlwidgets/floatingdashlinewidget.cpp b/umbrello/umlwidgets/floatingdashlinewidget.cpp
index 85072e24f156bcc523efd44fba8dcc00c8b9b738..318489495cd9151695605d3c4160e09f3acaf064 100644
--- a/umbrello/umlwidgets/floatingdashlinewidget.cpp
+++ b/umbrello/umlwidgets/floatingdashlinewidget.cpp
@@ -12,9 +12,6 @@
 #include "combinedfragmentwidget.h"
 
 //kde includes
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 
 //app includes
@@ -24,9 +21,7 @@
 #include "listpopupmenu.h"
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QPainter>
 
 DEBUG_REGISTER_DISABLED(FloatingDashLineWidget)
@@ -109,14 +104,10 @@ void FloatingDashLineWidget::slotMenuSelection(QAction* action)
         {
             bool ok = false;
             QString name = m_Text;
-#if QT_VERSION >= 0x050000
             name = QInputDialog::getText(Q_NULLPTR,
                                          i18n("Enter alternative Name"), i18n("Enter the alternative:"),
                                          QLineEdit::Normal,
                                          m_Text, &ok);
-#else
-            name = KInputDialog::getText(i18n("Enter alternative Name"), i18n("Enter the alternative:"), m_Text, &ok);
-#endif
             if (ok && name.length() > 0)
                 m_Text = name;
         }
diff --git a/umbrello/umlwidgets/floatingtextwidget.cpp b/umbrello/umlwidgets/floatingtextwidget.cpp
index e71cd6310bc53a7b5e2eb022974a6ab7e0329be5..4c012ba78a6811b58cf7cfe2adb52c6ef32c7490 100644
--- a/umbrello/umlwidgets/floatingtextwidget.cpp
+++ b/umbrello/umlwidgets/floatingtextwidget.cpp
@@ -31,17 +31,11 @@
 #include "umlview.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kfontdialog.h>
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QFontDialog>
 #include <QInputDialog>
-#endif
 #include <QPointer>
 #include <QRegExp>
 #include <QPainter>
@@ -208,14 +202,10 @@ void FloatingTextWidget::setTextcmd(const QString &t)
 void FloatingTextWidget::showChangeTextDialog()
 {
     bool ok = false;
-#if QT_VERSION >= 0x050000
     QString newText = QInputDialog::getText(m_scene->activeView(),
                                             i18n("Change Text"), i18n("Enter new text:"),
                                             QLineEdit::Normal,
                                             text(), &ok);
-#else
-    QString newText = KInputDialog::getText(i18n("Change Text"), i18n("Enter new text:"), text(), &ok, m_scene->activeView());
-#endif
     if (ok && newText != text() && isTextValid(newText)) {
         setText(newText);
         setVisible(!text().isEmpty());
@@ -418,14 +408,10 @@ void FloatingTextWidget::handleRename()
         t = i18n("ERROR");
     }
     bool ok = false;
-#if QT_VERSION >= 0x050000
     QString newText = QInputDialog::getText(m_scene->activeView(),
                                             i18n("Rename"), t,
                                             QLineEdit::Normal,
                                             text(), &ok);
-#else
-    QString newText = KInputDialog::getText(i18n("Rename"), t, text(), &ok, m_scene->activeView(), &v);
-#endif
     if (!ok || newText == text()) {
         return;
     }
@@ -776,17 +762,11 @@ void FloatingTextWidget::slotMenuSelection(QAction* action)
             UMLClassifier* c = m_linkWidget->operationOwner();
             if (c == 0) {
                 bool ok = false;
-#if QT_VERSION >= 0x050000
                 QString opText = QInputDialog::getText(m_scene->activeView(),
                                                        i18nc("operation name", "Name"),
                                                        i18n("Enter operation name:"),
                                                        QLineEdit::Normal,
                                                        text(), &ok);
-#else
-                QString opText = KInputDialog::getText(i18nc("operation name", "Name"),
-                                                       i18n("Enter operation name:"),
-                                                       text(), &ok, m_scene->activeView());
-#endif
                 if (ok)
                     m_linkWidget->setCustomOpText(opText);
                 return;
@@ -809,14 +789,9 @@ void FloatingTextWidget::slotMenuSelection(QAction* action)
 
     case ListPopupMenu::mt_Change_Font:
         {
-#if QT_VERSION >= 0x050000
             bool ok = false;
             QFont fnt = QFontDialog::getFont(&ok, font(), m_scene->activeView());
             if (ok) {
-#else
-            QFont fnt = font();
-            if(KFontDialog::getFont(fnt, KFontChooser::NoDisplayFlags, m_scene->activeView())) {
-#endif
                 if(m_textRole == Uml::TextRole::Floating || m_textRole == Uml::TextRole::Seq_Message) {
                     setFont(fnt);
                 } else if (m_linkWidget) {
diff --git a/umbrello/umlwidgets/notewidget.cpp b/umbrello/umlwidgets/notewidget.cpp
index 2c2b1a2926304b410664c8712d7e2f538c3bbbad..97be8c62e290c86e8229b34095078577c8a00b32 100644
--- a/umbrello/umlwidgets/notewidget.cpp
+++ b/umbrello/umlwidgets/notewidget.cpp
@@ -23,17 +23,11 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kcolordialog.h>
-#include <kinputdialog.h>
-#endif
 
 // qt includes
 #include <QPainter>
-#if QT_VERSION >= 0x050000
 #include <QColorDialog>
 #include <QInputDialog>
-#endif
 
 NoteWidget * NoteWidget::s_pCurrentNote;
 
@@ -191,15 +185,9 @@ void NoteWidget::askForNoteType(UMLWidget* &targetWidget)
                                                   << i18n("Postcondition")
                                                   << i18n("Transformation");
     bool pressedOK = false;
-
-#if QT_VERSION >= 0x050000
     QString type = QInputDialog::getItem (UMLApp::app(),
                                           i18n("Note Type"), i18n("Select the Note Type"), list,
                                           0, false, &pressedOK);
-#else
-    QString type = KInputDialog::getItem (i18n("Note Type"), i18n("Select the Note Type"), list,
-                                          0, false, &pressedOK, UMLApp::app());
-#endif
 
     if (pressedOK) {
         dynamic_cast<NoteWidget*>(targetWidget)->setNoteType(type);
diff --git a/umbrello/umlwidgets/objectnodewidget.cpp b/umbrello/umlwidgets/objectnodewidget.cpp
index 167a42a88c693fe5749706d1a5255d1c059eed94..29f426ef5b71fd78470980d7770e4d155bfee69a 100644
--- a/umbrello/umlwidgets/objectnodewidget.cpp
+++ b/umbrello/umlwidgets/objectnodewidget.cpp
@@ -24,14 +24,9 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QPainter>
 #include <QPointer>
 
@@ -238,17 +233,11 @@ void ObjectNodeWidget::slotMenuSelection(QAction* action)
         {
             bool ok = false;
             QString text = name();
-#if QT_VERSION >= 0x050000
             text = QInputDialog::getText(Q_NULLPTR,
                                          i18n("Enter Object Node Name"),
                                          i18n("Enter the name of the object node :"),
                                          QLineEdit::Normal,
                                          name(), &ok);
-#else
-            text = KInputDialog::getText(i18n("Enter Object Node Name"),
-                                          i18n("Enter the name of the object node :"),
-                                          name(), &ok);
-#endif
             if (ok && !text.isEmpty()) {
                 setName(text);
             }
@@ -320,15 +309,9 @@ void ObjectNodeWidget::askForObjectNodeType(UMLWidget* &targetWidget)
                              << QLatin1String("Data store")
                              << QLatin1String("Object Flow");
 
-#if QT_VERSION >= 0x050000
     QString type = QInputDialog::getItem (UMLApp::app(),
                                           i18n("Select Object node type"),  i18n("Select the object node type"),
                                           list, current, false, &pressedOK);
-
-#else
-    QString type = KInputDialog::getItem (i18n("Select Object node type"),  i18n("Select the object node type"), list, current, false, &pressedOK, UMLApp::app());
-#endif
-
     if (pressedOK) {
         dynamic_cast<ObjectNodeWidget*>(targetWidget)->setObjectNodeType(type);
         if (type == QLatin1String("Data store"))
@@ -353,15 +336,10 @@ void ObjectNodeWidget::askForObjectNodeType(UMLWidget* &targetWidget)
 void ObjectNodeWidget::askStateForWidget()
 {
     bool pressedOK = false;
-#if QT_VERSION >= 0x050000
     QString state = QInputDialog::getText(UMLApp::app(),
                                           i18n("Enter Object Flow State"), i18n("Enter State (keep '-' if there is no state for the object) "),
                                           QLineEdit::Normal,
                                           i18n("-"), &pressedOK);
-#else
-    QString state = KInputDialog::getText(i18n("Enter Object Flow State"), i18n("Enter State (keep '-' if there is no state for the object) "), i18n("-"), &pressedOK, UMLApp::app());
-#endif
-
     if (pressedOK) {
         setState(state);
     } else {
diff --git a/umbrello/umlwidgets/objectwidget.cpp b/umbrello/umlwidgets/objectwidget.cpp
index ab05d60a437cbe0fd9d4d311d9564df825b814be..c6c7731f6da7509c0bbb8a09f445457697233027 100644
--- a/umbrello/umlwidgets/objectwidget.cpp
+++ b/umbrello/umlwidgets/objectwidget.cpp
@@ -26,14 +26,9 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QPointer>
 #include <QPainter>
 #include <QValidator>
@@ -169,22 +164,12 @@ void ObjectWidget::slotMenuSelection(QAction* action)
         {
             bool ok;
             QRegExpValidator* validator = new QRegExpValidator(QRegExp(QLatin1String(".*")), 0);
-#if QT_VERSION >= 0x050000
             QString name = QInputDialog::getText(m_scene->activeView(),
                                                  i18n("Rename Object"),
                                                  i18n("Enter object name:"),
                                                  QLineEdit::Normal,
                                                  m_instanceName,
                                                  &ok);
-#else
-            QString name = KInputDialog::getText
-                   (i18n("Rename Object"),
-                    i18n("Enter object name:"),
-                    m_instanceName,
-                    &ok,
-                    m_scene->activeView(),
-                    validator);
-#endif
             if (ok) {
                 m_instanceName = name;
                 updateGeometry();
diff --git a/umbrello/umlwidgets/pinwidget.cpp b/umbrello/umlwidgets/pinwidget.cpp
index 136f6cafeff4ed6de4a02fbcde3b5fb428648cda..af75213301796e505c9dc167b6c93f2d7cfcc234 100644
--- a/umbrello/umlwidgets/pinwidget.cpp
+++ b/umbrello/umlwidgets/pinwidget.cpp
@@ -19,15 +19,10 @@
 #include "activitywidget.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QPainter>
 
 DEBUG_REGISTER_DISABLED(PinWidget)
@@ -79,17 +74,11 @@ void PinWidget::slotMenuSelection(QAction* action)
         {
             bool ok = false;
             QString name = m_Text;
-#if QT_VERSION >= 0x050000
             name = QInputDialog::getText(Q_NULLPTR,
                                          i18n("Enter Pin Name"),
                                          i18n("Enter the pin name :"),
                                          QLineEdit::Normal,
                                          m_Text, &ok);
-#else
-            name = KInputDialog::getText(i18n("Enter Pin Name"),
-                                         i18n("Enter the pin name :"),
-                                         m_Text, &ok);
-#endif
             if (ok) {
                 setName(name);
             }
diff --git a/umbrello/umlwidgets/portwidget.cpp b/umbrello/umlwidgets/portwidget.cpp
index 5f7e176b1ec89ce37eb8ac9543d90a80c58fed18..469a62c9e78761f24731b1dcc074e0a4a77f5fe7 100644
--- a/umbrello/umlwidgets/portwidget.cpp
+++ b/umbrello/umlwidgets/portwidget.cpp
@@ -21,15 +21,10 @@
 #include "floatingtextwidget.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QPainter>
 #include <QToolTip>
 
@@ -84,15 +79,10 @@ void PortWidget::slotMenuSelection(QAction* action)
         {
             bool ok = false;
             QString newName;
-#if QT_VERSION >= 0x050000
             newName = QInputDialog::getText(Q_NULLPTR,
                                             i18n("Enter Port Name"), i18n("Enter the port name :"),
                                             QLineEdit::Normal,
                                             name(), &ok);
-#else
-            newName = KInputDialog::getText(i18n("Enter Port Name"), i18n("Enter the port name :"),
-                                            name(), &ok);
-#endif
             if (ok) {
                 setName(newName);
             }
diff --git a/umbrello/umlwidgets/preconditionwidget.cpp b/umbrello/umlwidgets/preconditionwidget.cpp
index 533fdec4dc83476e4ad8f47eb897abbaecfb7414..37c34278aef1f334ce3e52cb5a59fbfc00f59de8 100644
--- a/umbrello/umlwidgets/preconditionwidget.cpp
+++ b/umbrello/umlwidgets/preconditionwidget.cpp
@@ -21,15 +21,10 @@
 #include "idchangelog.h"
 
 // kde includes
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 #include <KLocalizedString>
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QPainter>
 
 DEBUG_REGISTER_DISABLED(PreconditionWidget)
@@ -261,17 +256,11 @@ void PreconditionWidget::slotMenuSelection(QAction* action)
         {
             bool ok = false;
             QString text = name();
-#if QT_VERSION >= 0x050000
             text = QInputDialog::getText(Q_NULLPTR,
                                          i18n("Enter Precondition Name"),
                                          i18n("Enter the precondition :"),
                                          QLineEdit::Normal,
                                          text, &ok);
-#else
-            text = KInputDialog::getText(i18n("Enter Precondition Name"),
-                                          i18n("Enter the precondition :"),
-                                          text, &ok);
-#endif
             if (ok && !text.isEmpty()) {
                 setName(text);
             }
diff --git a/umbrello/umlwidgets/signalwidget.cpp b/umbrello/umlwidgets/signalwidget.cpp
index 158f6ee3c5c05558a4f0ead8104595b2d81af02b..98dfc1fc4d913eee23d4079c09da16ce3ee739fd 100644
--- a/umbrello/umlwidgets/signalwidget.cpp
+++ b/umbrello/umlwidgets/signalwidget.cpp
@@ -25,15 +25,10 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 
 // qt includes
 #include <QEvent>
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QPolygon>
 
 /**
@@ -330,17 +325,11 @@ void SignalWidget::slotMenuSelection(QAction* action)
         {
             bool ok = false;
             QString name = m_Text;
-#if QT_VERSION >= 0x050000
             name = QInputDialog::getText(Q_NULLPTR,
                                          i18n("Enter signal name"),
                                          i18n("Enter the signal name :"),
                                          QLineEdit::Normal,
                                          m_Text, &ok);
-#else
-            name = KInputDialog::getText(i18n("Enter signal name"),
-                                         i18n("Enter the signal name :"),
-                                         m_Text, &ok);
-#endif
             if (ok && name.length() > 0) {
                 setName(name);
             }
diff --git a/umbrello/umlwidgets/statewidget.cpp b/umbrello/umlwidgets/statewidget.cpp
index f5330fb94215e0fb74ce4ffe1c7b0c0757adac04..aa32833f8615d4c5ed8603b173692fdddf86e013 100644
--- a/umbrello/umlwidgets/statewidget.cpp
+++ b/umbrello/umlwidgets/statewidget.cpp
@@ -24,14 +24,9 @@
 
 // kde includes
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 #include <QPointer>
 
 /**
@@ -485,17 +480,11 @@ void StateWidget::slotMenuSelection(QAction* action)
     ListPopupMenu::MenuType sel = ListPopupMenu::typeFromAction(action);
     switch(sel) {
     case ListPopupMenu::mt_Rename:
-#if QT_VERSION >= 0x050000
         nameNew = QInputDialog::getText(Q_NULLPTR,
                                         i18n("Enter State Name"),
                                         i18n("Enter the name of the new state:"),
                                         QLineEdit::Normal,
                                         name(), &ok);
-#else
-        nameNew = KInputDialog::getText(i18n("Enter State Name"),
-                                         i18n("Enter the name of the new state:"),
-                                         name(), &ok);
-#endif
         if (ok && nameNew.length() > 0) {
             setName(nameNew);
         }
@@ -506,17 +495,11 @@ void StateWidget::slotMenuSelection(QAction* action)
         break;
 
     case ListPopupMenu::mt_New_Activity:
-#if QT_VERSION >= 0x050000
         nameNew = QInputDialog::getText(Q_NULLPTR,
                                         i18n("Enter Activity"),
                                         i18n("Enter the name of the new activity:"),
                                         QLineEdit::Normal,
                                         i18n("new activity"), &ok);
-#else
-        nameNew = KInputDialog::getText(i18n("Enter Activity"),
-                                         i18n("Enter the name of the new activity:"),
-                                         i18n("new activity"), &ok);
-#endif
         if (ok && nameNew.length() > 0) {
             addActivity(nameNew);
         }
diff --git a/umbrello/umlwidgets/toolbarstateonewidget.cpp b/umbrello/umlwidgets/toolbarstateonewidget.cpp
index d70bf8635e66e1ba3535c9139c23abc6748e2ae6..8f40a1e80f948c32d977d4266a4cd19b52fae8cc 100644
--- a/umbrello/umlwidgets/toolbarstateonewidget.cpp
+++ b/umbrello/umlwidgets/toolbarstateonewidget.cpp
@@ -32,14 +32,9 @@
 // kde includes
 #include <KLocalizedString>
 #include <KMessageBox>
-#if QT_VERSION < 0x050000
-#include <kinputdialog.h>
-#endif
 
 // qt includes
-#if QT_VERSION >= 0x050000
 #include <QInputDialog>
-#endif
 
 // using namespace Uml;
 
@@ -196,16 +191,11 @@ void ToolBarStateOneWidget::setWidget(UMLWidget* firstObject)
             // Create the widget. Some setup functions can remove the widget.
         } else if (m_firstObject->baseType() == WidgetBase::wt_Component) {
             bool pressedOK = false;
-#if QT_VERSION >= 0x050000
             QString name = QInputDialog::getText(UMLApp::app(),
                                                  i18n("Enter Port Name"), i18n("Enter the port"),
                                                  QLineEdit::Normal,
                                                  i18n("new port"),
                                                  &pressedOK);
-#else
-            QString name = KInputDialog::getText(i18n("Enter Port Name"), i18n("Enter the port"), i18n("new port"),
-                                                 &pressedOK, UMLApp::app());
-#endif
             if (pressedOK) {
                 UMLPackage* component = static_cast<UMLPackage*>(m_firstObject->umlObject());
                 UMLObject *port = Object_Factory::createUMLObject(UMLObject::ot_Port, name, component);
diff --git a/umbrello/umlwidgets/widgetbase.cpp b/umbrello/umlwidgets/widgetbase.cpp
index 23943860ac45d0f2e7354bfcc71cefeb376ec3fc..e6baef91ec8a0862b41905582f04b16874df93a1 100644
--- a/umbrello/umlwidgets/widgetbase.cpp
+++ b/umbrello/umlwidgets/widgetbase.cpp
@@ -19,17 +19,11 @@
 #include "umlobject.h"
 #include "umlscene.h"
 
-#if QT_VERSION < 0x050000
-#include <kcolordialog.h>
-#include <kfontdialog.h>
-#endif
 #include <KLocalizedString>
 
 #include <QAction>
-#if QT_VERSION >= 0x050000
 #include <QColorDialog>
 #include <QFontDialog>
-#endif
 #include <QPointer>
 
 /**
@@ -798,13 +792,8 @@ void WidgetBase::slotMenuSelection(QAction *trigger)
 
     case ListPopupMenu::mt_Line_Color:
     case ListPopupMenu::mt_Line_Color_Selection:
-#if QT_VERSION >= 0x050000
         newColor = QColorDialog::getColor(lineColor());
         if (newColor != lineColor()) {
-#else
-        newColor = lineColor();
-        if (KColorDialog::getColor(newColor)) {
-#endif
             if (sel == ListPopupMenu::mt_Line_Color_Selection) {
                 umlScene()->selectionSetLineColor(newColor);
             } else {
@@ -817,13 +806,8 @@ void WidgetBase::slotMenuSelection(QAction *trigger)
 
     case ListPopupMenu::mt_Fill_Color:
     case ListPopupMenu::mt_Fill_Color_Selection:
-#if QT_VERSION >= 0x050000
         newColor = QColorDialog::getColor(fillColor());
         if (newColor != fillColor()) {
-#else
-        newColor = fillColor();
-        if (KColorDialog::getColor(newColor)) {
-#endif
             if (sel == ListPopupMenu::mt_Fill_Color_Selection) {
                 umlScene()->selectionSetFillColor(newColor);
             } else {
@@ -916,14 +900,9 @@ void WidgetBase::slotMenuSelection(QAction *trigger)
 
     case ListPopupMenu::mt_Change_Font:
     case ListPopupMenu::mt_Change_Font_Selection: {
-#if QT_VERSION >= 0x050000
         bool ok = false;
         QFont newFont = QFontDialog::getFont(&ok, font());
         if (ok) {
-#else
-        QFont newFont = font();
-        if (KFontDialog::getFont(newFont, KFontChooser::NoDisplayFlags, 0) == KFontDialog::Accepted) {
-#endif
             if (sel == ListPopupMenu::mt_Change_Font_Selection) {
                 m_scene->selectionSetFont(newFont);
             } else {
diff --git a/umbrello/worktoolbar.cpp b/umbrello/worktoolbar.cpp
index 78e7195c0dc0809d1beb865e97f9c0fff68e027c..a07de40c34c7df9b644231a0227c127e6d0b502c 100644
--- a/umbrello/worktoolbar.cpp
+++ b/umbrello/worktoolbar.cpp
@@ -20,9 +20,6 @@
 
 // kde include files
 #include <KLocalizedString>
-#if QT_VERSION < 0x050000
-#include <KAction>
-#endif
 #include <KActionCollection>
 
 // qt include files
@@ -67,11 +64,7 @@ WorkToolBar::~WorkToolBar()
  */
 QAction* WorkToolBar::insertHotBtn(ToolBar_Buttons tbb)
 {
-#if QT_VERSION >= 0x050000
     QAction *action = m_actions[tbb];
-#else
-    KAction *action = m_actions[tbb];
-#endif
     addAction(action);
     action->setChecked(true);
     return action;
@@ -383,13 +376,8 @@ void WorkToolBar::loadPixmaps()
     for (uint i = 0; i < n_buttonInfos; ++i) {
         const ButtonInfo& info = buttonInfo[i];
         QString key = QLatin1String(ENUM_NAME(WorkToolBar, ToolBar_Buttons, info.tbb));
-#if QT_VERSION >= 0x050000
         QAction *action = collection->addAction(key, this, info.slotName);
         action->setIcon(Icon_Utils::BarIcon(info.icon));
-#else
-        KAction *action = collection->addAction(key, this, info.slotName);
-        action->setIcon(KIcon(Icon_Utils::BarIcon(info.icon)));
-#endif
         action->setText(info.btnName);
         m_actions[info.tbb] = action;
         m_cursors[info.tbb] = Icon_Utils::Cursor(info.icon);
diff --git a/umbrello/worktoolbar.h b/umbrello/worktoolbar.h
index 4bcb3883705cc332ffd968767c324b77244173c4..fc1d0894c4f60e3b002d35b8c5082b719b989833 100644
--- a/umbrello/worktoolbar.h
+++ b/umbrello/worktoolbar.h
@@ -124,11 +124,7 @@ private:
 
     typedef QMap<Uml::DiagramType::Enum, ToolBar_Buttons> OldToolMap;
     typedef QMap<ToolBar_Buttons, QCursor> CursorMap;
-#if QT_VERSION >= 0x050000
     typedef QMap<ToolBar_Buttons, QAction*> ActionsMap;
-#else
-    typedef QMap<ToolBar_Buttons, KAction*> ActionsMap;
-#endif
 
     ToolBar_Buttons          m_CurrentButtonID;
     OldToolMap               m_map;
diff --git a/unittests/CMakeLists.txt b/unittests/CMakeLists.txt
index 2c3352ea7bc311420689a24c7f23c6b04757deec..4dabca808ffea62afd01e0ddbbf0f3c64fe2485c 100644
--- a/unittests/CMakeLists.txt
+++ b/unittests/CMakeLists.txt
@@ -42,28 +42,15 @@ include_directories(
       ${CMAKE_CURRENT_BINARY_DIR}
 )
 
-if(NOT BUILD_KF5)
-    set(LIBS
-        Qt4::QtCore
-        Qt4::QtGui
-        Qt4::QtXml
-        Qt4::QtTest
-        ${KDE4_KFILE_LIBS}
-        ${LIBXML2_LIBRARIES}
-        ${LIBXSLT_LIBRARIES}
-        libumbrello
-    )
-else()
-    set(LIBS
-        Qt5::Xml
-        Qt5::Test
-        Qt5::Widgets
-        KF5::I18n
-        ${LIBXML2_LIBRARIES}
-        ${LIBXSLT_LIBRARIES}
-        libumbrello
-    )
-endif()
+set(LIBS
+    Qt5::Xml
+    Qt5::Test
+    Qt5::Widgets
+    KF5::I18n
+    ${LIBXML2_LIBRARIES}
+    ${LIBXSLT_LIBRARIES}
+    libumbrello
+)
 
 ecm_add_test(
     TEST_basictypes.cpp
diff --git a/unittests/testbase.cpp b/unittests/testbase.cpp
index e0d6ec3e91e1bb07f99472ee26862584e6e7357f..4d97a5a492aee37076469a3c007987b4884bf1f4 100644
--- a/unittests/testbase.cpp
+++ b/unittests/testbase.cpp
@@ -31,13 +31,7 @@
 #error umbrello unittests require QT_GUI_LIB to be present
 #endif
 
-#if QT_VERSION < 0x050000
-#include <KTempDir>
-#endif
-
-#if QT_VERSION >= 0x050000
 #include <QTemporaryDir>
-#endif
 
 TestBase::TestBase(QObject *parent)
   : QObject(parent)
@@ -59,13 +53,8 @@ void TestCodeGeneratorBase::initTestCase()
 {
     TestBase::initTestCase();
 
-#if QT_VERSION >= 0x050000
     static QTemporaryDir tmpDir;
     m_tempPath = tmpDir.path() + QLatin1String("/");
-#else
-    static KTempDir tmpDir;
-    m_tempPath = tmpDir.name();
-#endif
     UMLApp::app()->commonPolicy()->setOutputDirectory(m_tempPath);
 }
 

