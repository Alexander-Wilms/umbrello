diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7ffe97b343433946a23bd5ce2bf8c763df1f044f..355185616ace4bff87aefd26454c7947d9dce169 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -15,7 +15,7 @@ option(BUILD_CURSOR_ICONS "Create cursor icons from svg source" OFF)
 
 option(BUILD_ICONS_INTO_SIZE_RELATED_DIRS "place icons into separate directories (for debugging purpose)" OFF)
 
-option(BUILD_KF5 "Build for KDE Frameworks 5" ON)
+option(BUILD_KF5 "Build for KDE Frameworks 5" OFF)
 
 # where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked
 list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)
diff --git a/doc/index.docbook b/doc/index.docbook
index 685d8984cd6ebc534c0b9ced65467acfb1088492..3a260e777155cedb8f95217555741e56ec6e6f9b 100644
--- a/doc/index.docbook
+++ b/doc/index.docbook
@@ -1,7 +1,7 @@
 <?xml version="1.0" ?>
 
-<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.5-Based Variant V1.1//EN"
- "dtd/kdedbx45.dtd" [
+<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN"
+ "dtd/kdex.dtd" [
  <!ENTITY umbrello "<application>Umbrello &UML; Modeller</application>">
  <!ENTITY kappname "&umbrello;">
  <!ENTITY packagename "kdesdk">
diff --git a/umbrello/CMakeLists.txt b/umbrello/CMakeLists.txt
index 10cd5a39f7c212666922ad0ca29dc6f578ab3ed4..09b80bf08300bea92222a8b78fed28833660c887 100644
--- a/umbrello/CMakeLists.txt
+++ b/umbrello/CMakeLists.txt
@@ -240,6 +240,8 @@ set(libdialogs_SRCS
     dialogs/widgets/umlpackagewidget.cpp
     dialogs/widgets/umlstereotypewidget.cpp
     dialogs/widgets/visibilityenumwidget.cpp
+    dialogs/widgets/umltypequalifierswidget.cpp
+    dialogs/widgets/umltypemodifierwidget.cpp
 )
 
 ki18n_wrap_ui(  libdialogs_SRCS
@@ -251,6 +253,12 @@ ki18n_wrap_ui(  libdialogs_SRCS
     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/codeimportoptionspage.ui
     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/diagrampropertiespage.ui
     ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/pages/umlrolepropertiesbase.ui
+    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umlattributedialog.ui
+    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umlentityattributedialog.ui
+    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umltemplatedialog.ui
+    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/umloperationdialog.ui
+    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/widgets/umltypequalifierswidget.ui
+    ${CMAKE_CURRENT_SOURCE_DIR}/dialogs/widgets/visibilityenumwidget.ui
 )
 
 set(librefactoring_SRCS
diff --git a/umbrello/basictypes.cpp b/umbrello/basictypes.cpp
index 85d819201593897d2068dde4aeafb434e3927008..3d8b58dba299ffaa2c734c967469153c4cf79e71 100644
--- a/umbrello/basictypes.cpp
+++ b/umbrello/basictypes.cpp
@@ -153,6 +153,114 @@ Enum fromInt(int item)
 }
 
 }  // end namespace Visibility
+//-----------------------------------------------------------------------------
+namespace TypeQualifiers{
+
+/**
+     * Convert Type Qualifiers item into QString representation.
+     * @param item       item to convert
+     * @return QString representation of TypeQualifier
+     */
+QString toString(Enum item)
+{
+    switch (item) {
+    case Const:
+        return QLatin1String("const ");
+    case Volatile:
+        return QLatin1String("volatile ");
+    case Mutable:
+        return QLatin1String("mutable ");
+    case ConstVolatile:
+        return QLatin1String("const volatile ");
+    case None:
+    default:
+        return QLatin1String("");
+    }
+}
+
+/**
+     * Convert a string item into TypeQualifier representation.
+     * @param item   item to convert
+     * @return TypeQualifier enum
+     */
+Enum fromString(const QString& item)
+{
+    if(item == QLatin1String(""))
+        return None;
+    else if(item == QLatin1String("const"))
+        return Const;
+    else if(item == QLatin1String("volatile"))
+        return Volatile;
+    else if(item == QLatin1String("mutable"))
+        return Mutable;
+    else if(item == QLatin1String("const volatile"))
+        return ConstVolatile;
+    else
+        return None;
+}
+
+/**
+     * Convert a integer item into TypeQualifier representation.
+     * @param item   integer value to convert
+     * @return TypeQualifier enum
+     */
+Enum fromInt(int item)
+{
+    return Enum(item);
+}
+
+}  // end namespace TypeQualifier
+
+//-----------------------------------------------------------------------------
+namespace TypeModifiers{
+
+/**
+     * Convert Type Modifiers item into QString representation.
+     * @param item       item to convert
+     * @return QString representation of TypeQualifier
+     */
+QString toString(Enum item)
+{
+    switch (item) {
+    case Pointer:
+        return QLatin1String("*");
+    case Reference:
+        return QLatin1String("&");
+    case None:
+    default:
+        return QLatin1String("");
+
+    }
+}
+
+/**
+     * Convert a string item into TypeModifier representation.
+     * @param item   item to convert
+     * @return TypeModifier enum
+     */
+Enum fromString(const QString& item)
+{
+    if(item == QLatin1String(""))
+        return None;
+    if(item == QLatin1String("*"))
+        return Pointer;
+    if(item == QLatin1String("&"))
+        return Reference;
+    else
+        return None;
+}
+
+/**
+     * Convert a integer item into TypeModifier representation.
+     * @param item   integer value to convert
+     * @return TypeModifier enum
+     */
+Enum fromInt(int item)
+{
+    return Enum(item);
+}
+
+}  // end namespace TypeModifiers
 
 //-----------------------------------------------------------------------------
 
diff --git a/umbrello/basictypes.h b/umbrello/basictypes.h
index 62492988792752f6987e4410c6ae01dd9a5eb659..a387e67069cf2ab8954c087d7bf78c67d74b5fe4 100644
--- a/umbrello/basictypes.h
+++ b/umbrello/basictypes.h
@@ -68,6 +68,33 @@ namespace Uml
         Enum fromInt(int item);
     }
 
+    namespace TypeQualifiers {
+
+        enum Enum{
+            None,
+            Const,
+            Volatile,
+            Mutable,
+            ConstVolatile
+        };
+
+        QString toString(Enum item);
+        Enum fromString(const QString& item);
+        Enum fromInt(int item);
+    }
+
+    namespace TypeModifiers{
+        enum Enum{
+            None,
+            Pointer,
+            Reference
+        };
+
+        QString toString(Enum item);
+        Enum fromString(const QString& item);
+        Enum fromInte(int item);
+    }
+
     /**
      * Supported diagram types.
      */
diff --git a/umbrello/birdview.cpp b/umbrello/birdview.cpp
index 468493f58dc114a7852a3aadb86f2209f2584bfd..f4bcfabe7a8c032538b29acce7c545a3e05a64d6 100644
--- a/umbrello/birdview.cpp
+++ b/umbrello/birdview.cpp
@@ -68,7 +68,7 @@ BirdView::BirdView(QDockWidget *parent, UMLView* view)
 
     setSlotsEnabled(true);
     parent->setWidget(m_birdView);  // must be the last command
-    connect(m_view, &UMLView::destroyed, this, &BirdView::slotDestroyed);
+    connect(m_view, SIGNAL(destroyed(QObject*)), this, SLOT(slotDestroyed(QObject*)));
     slotViewChanged();
 }
 
@@ -77,7 +77,7 @@ BirdView::BirdView(QDockWidget *parent, UMLView* view)
  */
 BirdView::~BirdView()
 {
-    disconnect(m_view, &UMLView::destroyed, this, &BirdView::slotDestroyed);
+    disconnect(m_view, SIGNAL(destroyed(QObject*)), this, SLOT(slotDestroyed(QObject*)));
     setParent(0);
     delete m_protectFrame;
     delete m_birdView;
@@ -233,12 +233,16 @@ void BirdView::setSlotsEnabled(bool enabled)
 {
     UMLView* view = UMLApp::app()->currentView();
     if (enabled) {
-        connect(view->verticalScrollBar(), &QScrollBar::valueChanged, this, &BirdView::slotViewChanged);
-        connect(view->horizontalScrollBar() ,&QScrollBar::valueChanged, this, &BirdView::slotViewChanged);
+        connect(view->verticalScrollBar(), SIGNAL(valueChanged(int)),
+                this, SLOT(slotViewChanged()));
+        connect(view->horizontalScrollBar(), SIGNAL(valueChanged(int)),
+                this, SLOT(slotViewChanged()));
     }
     else {
-        disconnect(view->verticalScrollBar() ,&QScrollBar::valueChanged ,this, &BirdView::slotViewChanged);
-        disconnect(view->horizontalScrollBar() ,&QScrollBar::valueChanged ,this, &BirdView::slotViewChanged);
+        disconnect(view->verticalScrollBar(), SIGNAL(valueChanged(int)),
+                   this, SLOT(slotViewChanged()));
+        disconnect(view->horizontalScrollBar(), SIGNAL(valueChanged(int)),
+                   this, SLOT(slotViewChanged()));
     }
 }
 
diff --git a/umbrello/birdview.h b/umbrello/birdview.h
index 585a52c92e45080aa6fb2683dc81f5673b9c45c1..920da95efd9090573a0e64d8ebfab1214623546b 100644
--- a/umbrello/birdview.h
+++ b/umbrello/birdview.h
@@ -75,7 +75,6 @@ signals:
 
 public slots:
     void slotViewChanged();
-    void slotDockSizeChanged(const QSize &size);
 
 protected:
     virtual void mousePressEvent(QMouseEvent *event);
@@ -84,6 +83,7 @@ protected:
     virtual void keyPressEvent(QKeyEvent *event);
 
 private slots:
+    void slotDockSizeChanged(const QSize &size);
     void slotDestroyed(QObject *object);
 
 private:
diff --git a/umbrello/codegenerators/advancedcodegenerator.cpp b/umbrello/codegenerators/advancedcodegenerator.cpp
index 068ecdb5cd5e0cb1ff652861385d4fb0d8f77ad8..87121f8838cd87f9d87dd268e927537894dfc212 100644
--- a/umbrello/codegenerators/advancedcodegenerator.cpp
+++ b/umbrello/codegenerators/advancedcodegenerator.cpp
@@ -111,8 +111,11 @@ void AdvancedCodeGenerator::initFromParentDocument()
  */
 void AdvancedCodeGenerator::connectSlots()
 {
-    connect(m_document, &UMLDoc::sigObjectCreated, this, &AdvancedCodeGenerator::checkAddUMLObject);
-    connect(m_document, &UMLDoc::sigObjectRemoved, this, &AdvancedCodeGenerator::checkRemoveUMLObject);
+    connect(m_document, SIGNAL(sigObjectCreated(UMLObject*)),
+            this, SLOT(checkAddUMLObject(UMLObject*)));
+    connect(m_document, SIGNAL(sigObjectRemoved(UMLObject*)),
+            this, SLOT(checkRemoveUMLObject(UMLObject*)));
     CodeGenerationPolicy *commonPolicy = UMLApp::app()->commonPolicy();
-    connect(commonPolicy, &CodeGenerationPolicy::modifiedCodeContent, this, &AdvancedCodeGenerator::syncCodeToDocument);
+    connect(commonPolicy, SIGNAL(modifiedCodeContent()),
+            this, SLOT(syncCodeToDocument()));
 }
diff --git a/umbrello/codegenerators/classifiercodedocument.cpp b/umbrello/codegenerators/classifiercodedocument.cpp
index 35e11605a4d5015e6a3463aa1bb06fba6e416dc0..173d208627994ddb5daf44bd2243aa19eaff7baf 100644
--- a/umbrello/codegenerators/classifiercodedocument.cpp
+++ b/umbrello/codegenerators/classifiercodedocument.cpp
@@ -435,14 +435,16 @@ void ClassifierCodeDocument::init (UMLClassifier * c)
 
     // slots
     if (parentIsClass())  {
-        connect(c, &UMLClassifier::attributeAdded, [this](UMLClassifierListItem *assoc) {addAttributeClassField(assoc);});
-        connect(c, &UMLClassifier::attributeRemoved, this, &ClassifierCodeDocument::removeAttributeClassField);
+        connect(c, SIGNAL(attributeAdded(UMLClassifierListItem*)), this, SLOT(addAttributeClassField(UMLClassifierListItem*)));
+        connect(c, SIGNAL(attributeRemoved(UMLClassifierListItem*)), this, SLOT(removeAttributeClassField(UMLClassifierListItem*)));
     }
-    connect(c, &UMLClassifier::sigAssociationEndAdded, [this](UMLAssociation *assoc){addAssociationClassField(assoc);});
-    connect(c, &UMLClassifier::sigAssociationEndRemoved, this, &ClassifierCodeDocument::removeAssociationClassField);
-    connect(c, &UMLClassifier::operationAdded, this, &ClassifierCodeDocument::addOperation);
-    connect(c, &UMLClassifier::operationRemoved, this, &ClassifierCodeDocument::removeOperation);
-    connect(c, &UMLClassifier::modified, this, &ClassifierCodeDocument::syncToParent);
+
+    connect(c, SIGNAL(sigAssociationEndAdded(UMLAssociation*)), this, SLOT(addAssociationClassField(UMLAssociation*)));
+    connect(c, SIGNAL(sigAssociationEndRemoved(UMLAssociation*)), this, SLOT(removeAssociationClassField(UMLAssociation*)));
+    connect(c, SIGNAL(operationAdded(UMLClassifierListItem*)), this, SLOT(addOperation(UMLClassifierListItem*)));
+    connect(c, SIGNAL(operationRemoved(UMLClassifierListItem*)), this, SLOT(removeOperation(UMLClassifierListItem*)));
+    connect(c, SIGNAL(modified()), this, SLOT(syncToParent()));
+
 }
 
 /**
diff --git a/umbrello/codegenerators/codeaccessormethod.cpp b/umbrello/codegenerators/codeaccessormethod.cpp
index 7a91e4e52b1fea231afe3ac26ccb9a48ea9b08ca..01bf77c9a954441a383cf40cf5539cd5a8c8bb1f 100644
--- a/umbrello/codegenerators/codeaccessormethod.cpp
+++ b/umbrello/codegenerators/codeaccessormethod.cpp
@@ -187,6 +187,6 @@ void CodeAccessorMethod::initFields(CodeClassField * parentClassField)
     m_accessorType = GET;
     setCanDelete(false);  // we cant delete these with the codeeditor, delete the UML operation instead.
 
-    connect(m_parentclassfield, &CodeClassField::modified, this, &CodeAccessorMethod::syncToParent);
+    connect(m_parentclassfield, SIGNAL(modified()), this, SLOT(syncToParent()));
 }
 
diff --git a/umbrello/codegenerators/codeclassfield.cpp b/umbrello/codegenerators/codeclassfield.cpp
index 8af0ad1358d4e756672f3230bd5393c6a850e16c..77287fff5e6d5d217b15ff46a10bcbb23621b56a 100644
--- a/umbrello/codegenerators/codeclassfield.cpp
+++ b/umbrello/codegenerators/codeclassfield.cpp
@@ -661,7 +661,7 @@ void CodeClassField::finishInitialization()
     m_declCodeBlock = CodeGenFactory::newDeclarationCodeBlock(getParentDocument(), this);
     initAccessorMethods();
     updateContent();
-    // child objects will trigger off this signal
-    connect(getParentObject(), &UMLObject::modified, this, &CodeClassField::modified);
+
+    connect(getParentObject(), SIGNAL(modified()), this, SIGNAL(modified())); // child objects will trigger off this signal
 }
 
diff --git a/umbrello/codegenerators/codeclassfielddeclarationblock.cpp b/umbrello/codegenerators/codeclassfielddeclarationblock.cpp
index 8635e9f00312ff666b52ac9b1c1228d775bc34d7..ac7cc08f9f2f5c07e6066c4e94b5ed063cb42971 100644
--- a/umbrello/codegenerators/codeclassfielddeclarationblock.cpp
+++ b/umbrello/codegenerators/codeclassfielddeclarationblock.cpp
@@ -163,6 +163,6 @@ void CodeClassFieldDeclarationBlock::init (CodeClassField * parentCF)
 {
     m_parentclassfield = parentCF;
     setCanDelete(false);
-    connect(m_parentclassfield, &CodeClassField::modified, this, &CodeClassFieldDeclarationBlock::syncToParent);
+    connect(m_parentclassfield, SIGNAL(modified()), this, SLOT(syncToParent()));
 }
 
diff --git a/umbrello/codegenerators/codeparameter.cpp b/umbrello/codegenerators/codeparameter.cpp
index 23a4edcf4e7deee2025ff37237ee16384ed70d48..565dadca75d68baf813ad7077302ee793dcfdf93 100644
--- a/umbrello/codegenerators/codeparameter.cpp
+++ b/umbrello/codegenerators/codeparameter.cpp
@@ -283,6 +283,6 @@ void CodeParameter::initFields(ClassifierCodeDocument * doc, UMLObject * obj)
     m_comment = CodeGenFactory::newCodeComment(m_parentDocument);
     m_comment->setText(getParentObject()->doc());
 
-    connect(m_parentObject, &UMLObject::modified, this, &CodeParameter::syncToParent);
+    connect(m_parentObject, SIGNAL(modified()), this, SLOT(syncToParent()));
 }
 
diff --git a/umbrello/codegenerators/cpp/cppcodegenerationform.cpp b/umbrello/codegenerators/cpp/cppcodegenerationform.cpp
index f1998ab916ed91a5cab89f47ddc7490d9bc94670..218a53faa9b3edebb4d66ef8076f919767ae9e0b 100644
--- a/umbrello/codegenerators/cpp/cppcodegenerationform.cpp
+++ b/umbrello/codegenerators/cpp/cppcodegenerationform.cpp
@@ -71,7 +71,9 @@ CPPCodeGenerationForm::CPPCodeGenerationForm(QWidget *parent, const char *name)
         new QListWidgetItem(i18n("Use '\\' as documentation tag instead of '@'"), ui_generalOptionsListWidget);
     m_optionDocToolTag->setFlags(flags);
 
-    connect(ui_generalOptionsListWidget, &QListWidget::itemClicked, this, &CPPCodeGenerationForm::generalOptionsListWidgetClicked);
+    connect(ui_generalOptionsListWidget,
+            SIGNAL(itemClicked(QListWidgetItem*)), this,
+            SLOT(generalOptionsListWidgetClicked(QListWidgetItem*)));
 }
 
 /**
diff --git a/umbrello/codegenerators/ownedcodeblock.cpp b/umbrello/codegenerators/ownedcodeblock.cpp
index 6dc8bf27768d29c92576e49e248e51bcfbe697f2..ac003e4e0c3fe86594297482affc6111c78ac4dc 100644
--- a/umbrello/codegenerators/ownedcodeblock.cpp
+++ b/umbrello/codegenerators/ownedcodeblock.cpp
@@ -159,7 +159,7 @@ void OwnedCodeBlock::initFields(UMLObject * parent)
     // this code block and the parent UMLObject..when the parent
     // signals a change has been made, we automatically update
     // ourselves
-    connect(m_parentObject, &UMLObject::modified, this, &OwnedCodeBlock::syncToParent);
+    connect(m_parentObject, SIGNAL(modified()), this, SLOT(syncToParent()));
 }
 
 void OwnedCodeBlock::syncToParent()
diff --git a/umbrello/codegenwizard/codegenerationwizard.cpp b/umbrello/codegenwizard/codegenerationwizard.cpp
index 8084a3311eec545a6b47bd81aeb99f00e059fbc2..a66555fdbc8ad499a045e9549e3bb751e0523b07 100644
--- a/umbrello/codegenwizard/codegenerationwizard.cpp
+++ b/umbrello/codegenwizard/codegenerationwizard.cpp
@@ -44,7 +44,7 @@ CodeGenerationWizard::CodeGenerationWizard(UMLClassifierList *classList)
     setPage(OptionsPage, createOptionsPage());
     setPage(SelectionPage, createSelectionPage(classList));
     setPage(StatusPage, createStatusPage());
-    connect(m_OptionsPage, &CodeGenOptionsPage::languageChanged, this, &CodeGenerationWizard::slotLanguageChanged);
+    connect(m_OptionsPage, SIGNAL(languageChanged()), this, SLOT(slotLanguageChanged()));
 }
 
 /**
diff --git a/umbrello/codegenwizard/codegenoptionspage.cpp b/umbrello/codegenwizard/codegenoptionspage.cpp
index 4bdf00de2c789950f6fc74742844398b35afc149..9a4b4bb08a2f947e6abc2be43a8ebb06f8496777 100644
--- a/umbrello/codegenwizard/codegenoptionspage.cpp
+++ b/umbrello/codegenwizard/codegenoptionspage.cpp
@@ -62,12 +62,13 @@ CodeGenOptionsPage::CodeGenOptionsPage(QWidget *parent)
     ui_SelectIndentationTypeBox->setCurrentIndex(indentTypeToInteger(m_parentPolicy->getIndentationType()));
     ui_SelectIndentationNumber->setValue(m_parentPolicy->getIndentationAmount());
 
-    connect(this, &CodeGenOptionsPage::syncCodeDocumentsToParent, gen, &CodeGenerator::syncCodeToDocument);
-    connect(this, &CodeGenOptionsPage::languageChanged, this, &CodeGenOptionsPage::updateCodeGenerationPolicyTab);
-    connect(this, &CodeGenOptionsPage::languageChanged, this, &CodeGenOptionsPage::changeLanguage);
+    connect(this, SIGNAL(syncCodeDocumentsToParent()), gen, SLOT(syncCodeToDocument()));
+    connect(this, SIGNAL(languageChanged()), this, SLOT(updateCodeGenerationPolicyTab()));
+    connect(this, SIGNAL(languageChanged()), this, SLOT(changeLanguage()));
+
+    connect(ui_browseOutput, SIGNAL(clicked()), this, SLOT(browseClicked()));
+    connect(ui_browseHeadings, SIGNAL(clicked()), this, SLOT(browseClicked()));
 
-    connect(ui_browseOutput, &QPushButton::clicked, this, &CodeGenOptionsPage::browseClicked);
-    connect(ui_browseHeadings, &QPushButton::clicked, this, &CodeGenOptionsPage::browseClicked);
     setupActiveLanguageBox();
 
     //now insert the language-dependant page, should there be one
@@ -94,7 +95,7 @@ void CodeGenOptionsPage::setupActiveLanguageBox()
         indexCounter++;
     }
     ui_SelectLanguageBox->setCurrentIndex(UMLApp::app()->activeLanguage());
-    connect(ui_SelectLanguageBox,static_cast<void (KComboBox::*)(int)>(&KComboBox::activated), this, &CodeGenOptionsPage::activeLanguageChanged);
+    connect(ui_SelectLanguageBox, SIGNAL(activated(int)), this, SLOT(activeLanguageChanged(int)));
 }
 
 /**
@@ -197,7 +198,8 @@ void CodeGenOptionsPage::updateCodeGenerationPolicyTab()
     }
 
     ui_tabWidgetMain->insertTab(2, m_pCodePolicyPage, i18n("Language Options"));
-    connect(this, &CodeGenOptionsPage::applyClicked, m_pCodePolicyPage, &CodeGenerationPolicyPage::apply);
+
+    connect(this, SIGNAL(applyClicked()), m_pCodePolicyPage, SLOT(apply()));
 }
 
 /**
diff --git a/umbrello/codegenwizard/codegenselectpage.cpp b/umbrello/codegenwizard/codegenselectpage.cpp
index 8a44ecf20d38f1429bf9241d058495f5566d9498..d34caae48ec4d23c934ff76cefc9608d819aff45 100644
--- a/umbrello/codegenwizard/codegenselectpage.cpp
+++ b/umbrello/codegenwizard/codegenselectpage.cpp
@@ -36,8 +36,8 @@ CodeGenSelectPage::CodeGenSelectPage(QWidget *parent)
 
     setupUi(this);
 
-    connect(ui_addButton, &QPushButton::clicked, this, &CodeGenSelectPage::selectClass);
-    connect(ui_removeButton, &QPushButton::clicked, this, &CodeGenSelectPage::deselectClass);
+    connect(ui_addButton, SIGNAL(clicked()), this, SLOT(selectClass()));
+    connect(ui_removeButton, SIGNAL(clicked()), this, SLOT(deselectClass()));
 }
 
 /**
diff --git a/umbrello/codegenwizard/codegenstatuspage.cpp b/umbrello/codegenwizard/codegenstatuspage.cpp
index b6d1fd1f82c944e9292686736267c94dfee12632..03659fefe4d32aeff9de7fd2be5bf2bae1789098 100644
--- a/umbrello/codegenwizard/codegenstatuspage.cpp
+++ b/umbrello/codegenwizard/codegenstatuspage.cpp
@@ -55,9 +55,9 @@ CodeGenStatusPage::CodeGenStatusPage(QWidget *parent)
     ui_tableWidgetStatus->setColumnCount(3);
     ui_textEditLogger->setReadOnly(true);
 
-    connect(ui_pushButtonGenerate, &QPushButton::clicked, this, &CodeGenStatusPage::generateCode);
-    connect(ui_pushButtonClear, &QPushButton::clicked, this, &CodeGenStatusPage::loggerClear);
-    connect(ui_pushButtonExport, &QPushButton::clicked, this, &CodeGenStatusPage::loggerExport);
+    connect(ui_pushButtonGenerate, SIGNAL(clicked()), this, SLOT(generateCode()));
+    connect(ui_pushButtonClear, SIGNAL(clicked()), this, SLOT(loggerClear()));
+    connect(ui_pushButtonExport, SIGNAL(clicked()), this, SLOT(loggerExport()));
 }
 
 /**
@@ -114,8 +114,10 @@ void CodeGenStatusPage::generateCode()
     UMLDoc* doc = UMLApp::app()->document();
 
     if (codeGenerator) {
-        connect(codeGenerator, &CodeGenerator::codeGenerated,this, &CodeGenStatusPage::classGenerated);
-        connect(codeGenerator, &CodeGenerator::showGeneratedFile, this, &CodeGenStatusPage::showFileGenerated);
+        connect(codeGenerator, SIGNAL(codeGenerated(UMLClassifier*,bool)),
+                this, SLOT(classGenerated(UMLClassifier*,bool)));
+        connect(codeGenerator, SIGNAL(showGeneratedFile(QString)),
+                this, SLOT(showFileGenerated(QString)));
 
         UMLClassifierList cList;
 
diff --git a/umbrello/codeimpwizard/codeimpselectpage.cpp b/umbrello/codeimpwizard/codeimpselectpage.cpp
index 476ba6ba0353b23f1959baf5725d5ae57b8ddfaf..170bb72ce79d190f1fe20de047985034f3d73827 100644
--- a/umbrello/codeimpwizard/codeimpselectpage.cpp
+++ b/umbrello/codeimpwizard/codeimpselectpage.cpp
@@ -50,19 +50,20 @@ CodeImpSelectPage::CodeImpSelectPage(QWidget *parent)
     setupUi(this);
 
     setupLanguageBox();
-    connect(ui_languageBox, static_cast<void (KComboBox::*)(int)>(&KComboBox::activated), this, &CodeImpSelectPage::languageChanged);
-    connect(this, &CodeImpSelectPage::languageChanged, this, &CodeImpSelectPage::changeLanguage);
+    connect(ui_languageBox, SIGNAL(activated(int)), this, SLOT(languageChanged(int)));
+    connect(this, SIGNAL(languageChanged()), this, SLOT(changeLanguage()));
 
     setupTreeView();
-    connect(ui_treeView, &QTreeView::clicked, this, &CodeImpSelectPage::treeClicked);
-    connect(ui_treeView, &QTreeView::entered, this, &CodeImpSelectPage::treeEntered);
+    connect(ui_treeView, SIGNAL(clicked(QModelIndex)), this, SLOT(treeClicked(QModelIndex)));
+    connect(ui_treeView, SIGNAL(entered(QModelIndex)), this, SLOT(treeEntered(QModelIndex)));
 
     setupFileExtEdit();
-    connect(ui_fileExtLineEdit, &QLineEdit::editingFinished, this, &CodeImpSelectPage::fileExtChanged);
+    connect(ui_fileExtLineEdit, SIGNAL(editingFinished()), this, SLOT(fileExtChanged()));
+
+    connect(ui_subdirCheckBox, SIGNAL(stateChanged(int)), this, SLOT(subdirStateChanged(int)));
+    connect(ui_selectAllButton, SIGNAL(clicked()), this, SLOT(selectAll()));
+    connect(ui_deselectAllButton, SIGNAL(clicked()), this, SLOT(deselectAll()));
 
-    connect(ui_subdirCheckBox, &QCheckBox::stateChanged, this, &CodeImpSelectPage::subdirStateChanged);
-    connect(ui_selectAllButton, &QPushButton::clicked, this, &CodeImpSelectPage::selectAll);
-    connect(ui_deselectAllButton, &QPushButton::clicked, this, &CodeImpSelectPage::deselectAll);
     setupToolTips();
     // update file extensions
     changeLanguage();
@@ -308,7 +309,7 @@ bool CodeImpSelectPage::validatePage()
 void CodeImpSelectPage::languageChanged(int id)
 {
     Q_UNUSED(id);
-    emit sglanguageChanged();
+    emit languageChanged();
 }
 
 /**
diff --git a/umbrello/codeimpwizard/codeimpselectpage.h b/umbrello/codeimpwizard/codeimpselectpage.h
index ba9656cca3193625ada082d1e96eb879e86b7bb6..78bc817f75820562768702c0d53f4ca683caeba9 100644
--- a/umbrello/codeimpwizard/codeimpselectpage.h
+++ b/umbrello/codeimpwizard/codeimpselectpage.h
@@ -72,7 +72,7 @@ private slots:
 
 signals:
     void applyClicked();
-    void sglanguageChanged();
+    void languageChanged();
     void syncCodeDocumentsToParent();
     void selectionChanged();
 };
diff --git a/umbrello/codeimpwizard/codeimpstatuspage.cpp b/umbrello/codeimpwizard/codeimpstatuspage.cpp
index 8916961e8ff87db0adf4c30eafc61b516303f3f8..2ce4ad5f6805dc19cf67706c7d405f948cc9b6a2 100644
--- a/umbrello/codeimpwizard/codeimpstatuspage.cpp
+++ b/umbrello/codeimpwizard/codeimpstatuspage.cpp
@@ -70,11 +70,11 @@ CodeImpStatusPage::CodeImpStatusPage(QWidget *parent)
     ui_tableWidgetStatus->setColumnWidth(0, 200);
     ui_tableWidgetStatus->setColumnWidth(1, 200);
 
-    connect(ui_pushButtonStart, &QPushButton::clicked, this, &CodeImpStatusPage::importCode);
+    connect(ui_pushButtonStart, SIGNAL(clicked()), this, SLOT(importCode()));
     ui_pushButtonStop->setEnabled(false);
-    connect(ui_pushButtonStop, &QPushButton::clicked, this, &CodeImpStatusPage::importCodeStop);
-    connect(ui_pushButtonClear, &QPushButton::clicked, this, &CodeImpStatusPage::loggerClear);
-    connect(ui_pushButtonExport, &QPushButton::clicked, this, &CodeImpStatusPage::loggerExport);
+    connect(ui_pushButtonStop, SIGNAL(clicked()), this, SLOT(importCodeStop()));
+    connect(ui_pushButtonClear, SIGNAL(clicked()), this, SLOT(loggerClear()));
+    connect(ui_pushButtonExport, SIGNAL(clicked()), this, SLOT(loggerExport()));
 }
 
 /**
@@ -148,8 +148,9 @@ void CodeImpStatusPage::importCode()
 
 #ifdef ENABLE_IMPORT_THREAD
     m_thread = new QThread;
-    connect(m_thread, &QThread::finished, this, &CodeImpStatusPage::importCodeFile);
-    connect(m_thread, &QThread::terminated, this, &CodeImpStatusPage::importCodeStop);
+    //connect(thread, SIGNAL(started()), this, SLOT(importCodeFile()));
+    connect(m_thread, SIGNAL(finished(bool)), this, SLOT(importCodeFile(bool)));
+    connect(m_thread, SIGNAL(terminated()), this, SLOT(importCodeStop()));
 #endif
     importCodeFile();
 }
@@ -176,12 +177,12 @@ void CodeImpStatusPage::importCodeFile(bool noError)
     m_file = m_files.at(m_index++);
     messageToLog(m_file.fileName(), i18n("importing file ..."));
     CodeImpThread* worker = new CodeImpThread(m_file);
-    connect(worker, &CodeImpThread::messageToWiz, this, &CodeImpStatusPage::updateStatus);
-    connect(worker, &CodeImpThread::messageToLog, this, &CodeImpStatusPage::messageToLog);
-    connect(worker, &CodeImpThread::messageToApp, this, &CodeImpStatusPage::messageToApp);
+    connect(worker, SIGNAL(messageToWiz(QString,QString)), this, SLOT(updateStatus(QString,QString)));
+    connect(worker, SIGNAL(messageToLog(QString,QString)), this, SLOT(messageToLog(QString,QString)));
+    connect(worker, SIGNAL(messageToApp(QString)), this, SLOT(messageToApp(QString)));
 #ifndef ENABLE_IMPORT_THREAD
-    connect(worker, &CodeImpThread::finished, this, &CodeImpStatusPage::importNextFile);
-    connect(worker, &CodeImpThread::aborted, this, &CodeImpStatusPage::importCodeStop);
+    connect(worker, SIGNAL(finished(bool)), this, SLOT(importNextFile(bool)));
+    connect(worker, SIGNAL(aborted()), this, SLOT(importCodeStop()));
     worker->run();
     worker->deleteLater();
 #else
diff --git a/umbrello/codeimpwizard/codeimpthread.cpp b/umbrello/codeimpwizard/codeimpthread.cpp
index a17473f360d7d852d1b9128eb1032e58df99cbf6..45f220b0caae75964841b699e10ecf33a75804b4 100644
--- a/umbrello/codeimpwizard/codeimpthread.cpp
+++ b/umbrello/codeimpwizard/codeimpthread.cpp
@@ -34,7 +34,8 @@ CodeImpThread::CodeImpThread(QFileInfo file, QObject* parent)
   : QObject(parent),
     m_file(file)
 {
-    connect(this, &CodeImpThread::askQuestion, this, &CodeImpThread::questionAsked);
+    connect(this, SIGNAL(askQuestion(QString,int)),
+            this, SLOT(questionAsked(QString,int)));
 }
 
 /**
diff --git a/umbrello/debug/debug_utils.cpp b/umbrello/debug/debug_utils.cpp
index 6b76119d324e471286a1007029a3a8d5d4bcfa49..4aa7ab375e48932c702c2b66aee414bc862b7dba 100644
--- a/umbrello/debug/debug_utils.cpp
+++ b/umbrello/debug/debug_utils.cpp
@@ -55,7 +55,7 @@ Tracer::Tracer(QWidget *parent)
     setAlternatingRowColors(true);
     setHeaderLabel(i18n("Class Name"));
     setContextMenuPolicy(Qt::CustomContextMenu);
-    connect(this, &Tracer::itemClicked, this, &Tracer::slotItemClicked);
+    connect(this, SIGNAL(itemClicked(QTreeWidgetItem*,int)), this, SLOT(slotItemClicked(QTreeWidgetItem*,int)));
 }
 
 /**
diff --git a/umbrello/dialogs/activitydialog.cpp b/umbrello/dialogs/activitydialog.cpp
index 1dcc4e64084a3887baba9732a82579ad45f63d91..14304199bbd63e29b52da3abd4eee7ad5d717f68 100644
--- a/umbrello/dialogs/activitydialog.cpp
+++ b/umbrello/dialogs/activitydialog.cpp
@@ -42,8 +42,8 @@ ActivityDialog::ActivityDialog(QWidget * parent, ActivityWidget * pWidget)
     setCaption(i18n("Properties"));
     setupPages();
 
-    connect(this, &ActivityDialog::okClicked, this, &ActivityDialog::slotOk);
-    connect(this, &ActivityDialog::applyClicked, this, &ActivityDialog::slotApply);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
 }
 
 /**
@@ -186,11 +186,11 @@ void ActivityDialog::setupGeneralPage()
         showParameterActivity();
     }
 
-    connect(m_GenPageWidgets.ParamRB, &QRadioButton::clicked, this, &ActivityDialog::slotShowActivityParameter);
-    connect(m_GenPageWidgets.NormalRB, &QRadioButton::clicked, this, &ActivityDialog::slotHideActivityParameter);
-    connect(m_GenPageWidgets.InvokRB, &QRadioButton::clicked, this, &ActivityDialog::slotHideActivityParameter);
+    connect(m_GenPageWidgets.ParamRB, SIGNAL(clicked()), this, SLOT(slotShowActivityParameter()));
+    connect(m_GenPageWidgets.NormalRB, SIGNAL(clicked()), this, SLOT(slotHideActivityParameter()));
+    connect(m_GenPageWidgets.InvokRB, SIGNAL(clicked()), this, SLOT(slotHideActivityParameter()));
 
-    ActivityWidget::ActivityType newType = m_pActivityWidget->activityType();
+    ActivityWidget::ActivityType newType = m_pActivityWidget->activityType() ;
 
     m_GenPageWidgets.NormalRB->setChecked(newType == ActivityWidget::Normal);
 
diff --git a/umbrello/dialogs/associationpropertiesdialog.cpp b/umbrello/dialogs/associationpropertiesdialog.cpp
index 5478cc3c68b14946042a7e7e10e6c84a3496825a..363d625ce7e9369874e7d796eaff19ae2006d371 100644
--- a/umbrello/dialogs/associationpropertiesdialog.cpp
+++ b/umbrello/dialogs/associationpropertiesdialog.cpp
@@ -47,8 +47,8 @@ AssociationPropertiesDialog::AssociationPropertiesDialog (QWidget *parent, Assoc
     setCaption(i18n("Association Properties"));
     setupPages();
 
-    connect(this, &AssociationPropertiesDialog::okClicked, this, &AssociationPropertiesDialog::slotOk);
-    connect(this, &AssociationPropertiesDialog::applyClicked, this, &AssociationPropertiesDialog::slotApply);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
 }
 
 /**
diff --git a/umbrello/dialogs/classpropertiesdialog.cpp b/umbrello/dialogs/classpropertiesdialog.cpp
index 829734683e26d5dee962cd7f4081473bd66784b5..820a3c5ab1113d325b40850689929196068260e4 100644
--- a/umbrello/dialogs/classpropertiesdialog.cpp
+++ b/umbrello/dialogs/classpropertiesdialog.cpp
@@ -52,8 +52,8 @@ ClassPropertiesDialog::ClassPropertiesDialog(QWidget *parent, UMLObject * c, boo
 
     setupPages(assoc);
 
-    connect(this, &ClassPropertiesDialog::okClicked, this, &ClassPropertiesDialog::slotOk);
-    connect(this, &ClassPropertiesDialog::applyClicked, this, &ClassPropertiesDialog::slotApply);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
 }
 
 /**
@@ -75,8 +75,8 @@ ClassPropertiesDialog::ClassPropertiesDialog(QWidget *parent, ObjectWidget *o)
     setupFontPage(m_pWidget);
 
     setMinimumSize(340, 420);
-    connect(this, &ClassPropertiesDialog::okClicked, this, &ClassPropertiesDialog::slotOk);
-    connect(this, &ClassPropertiesDialog::applyClicked, this, &ClassPropertiesDialog::slotApply);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
 }
 
 /**
@@ -116,8 +116,8 @@ ClassPropertiesDialog::ClassPropertiesDialog(QWidget *parent, UMLWidget *w)
     }
     setupStylePage(m_pWidget);
     setupFontPage(m_pWidget);
-    connect(this, &ClassPropertiesDialog::okClicked, this, &ClassPropertiesDialog::slotOk);
-    connect(this, &ClassPropertiesDialog::applyClicked, this, &ClassPropertiesDialog::slotApply);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
 }
 
 void ClassPropertiesDialog::init()
diff --git a/umbrello/dialogs/classwizard.cpp b/umbrello/dialogs/classwizard.cpp
index e21180972f9ed6082147cec4b66cdd06e37715f9..45d303695f77bdaae7bf729d3a61037df8484e0a 100644
--- a/umbrello/dialogs/classwizard.cpp
+++ b/umbrello/dialogs/classwizard.cpp
@@ -59,7 +59,7 @@ ClassWizard::ClassWizard(UMLDoc* doc)
     setWindowTitle(i18n("Class Wizard"));
     setOption(QWizard::NoBackButtonOnStartPage, true);
     setOption(QWizard::HaveHelpButton, true);
-    connect(this, &ClassWizard::helpRequested, this, &ClassWizard::showHelp);
+    connect(this, SIGNAL(helpRequested()), this, SLOT(showHelp()));
 
     addPage(createGeneralPage());
     addPage(createAttributesPage());
diff --git a/umbrello/dialogs/codeeditor.cpp b/umbrello/dialogs/codeeditor.cpp
index e361a3caee55d36b3c71138456afc30d91040667..cdab65d17a33a9bc52c9807bda1fc5a3a96b3b5a 100644
--- a/umbrello/dialogs/codeeditor.cpp
+++ b/umbrello/dialogs/codeeditor.cpp
@@ -770,7 +770,7 @@ KMenu * CodeEditor::createPopup()
             KAction* hideAct = new KAction(i18n("Hide"), this);
 #endif
             hideAct->setShortcut(Qt::Key_H);
-            connect(hideAct, &QAction::triggered, this, &CodeEditor::slotChangeSelectedBlockView);
+            connect(hideAct, SIGNAL(triggered()), this, SLOT(slotChangeSelectedBlockView()));
             menu->addAction(hideAct);
         }
         else {
@@ -780,7 +780,7 @@ KMenu * CodeEditor::createPopup()
             KAction* showAct = new KAction(i18n("Show"), this);
 #endif
             showAct->setShortcut(Qt::Key_S);
-            connect(showAct, &QAction::triggered, this, &CodeEditor::slotChangeSelectedBlockView);
+            connect(showAct, SIGNAL(triggered()), this, SLOT(slotChangeSelectedBlockView()));
             menu->addAction(showAct);
         }
 
@@ -793,7 +793,7 @@ KMenu * CodeEditor::createPopup()
                 KAction* hideCommAct = new KAction(i18n("Hide Comment"), this);
 #endif
                 hideCommAct->setShortcut(Qt::CTRL + Qt::Key_H);
-                connect(hideCommAct, &QAction::triggered, this, &CodeEditor::slotChangeSelectedBlockCommentView);
+                connect(hideCommAct, SIGNAL(triggered()), this, SLOT(slotChangeSelectedBlockCommentView()));
                 menu->addAction(hideCommAct);
             }
             else {
@@ -803,7 +803,7 @@ KMenu * CodeEditor::createPopup()
                 KAction* showCommAct = new KAction(i18n("Show Comment"), this);
 #endif
                 showCommAct->setShortcut(Qt::CTRL + Qt::Key_S);
-                connect(showCommAct, &QAction::triggered, this, &CodeEditor::slotChangeSelectedBlockCommentView);
+                connect(showCommAct, SIGNAL(triggered()), this, SLOT(slotChangeSelectedBlockCommentView()));
                 menu->addAction(showCommAct);
             }
         }
@@ -815,7 +815,7 @@ KMenu * CodeEditor::createPopup()
         KAction* insCodeBeforeAct = new KAction(i18n("Insert Code Block Before"), this);
 #endif
         insCodeBeforeAct->setShortcut(Qt::CTRL + Qt::Key_B);
-        connect(insCodeBeforeAct, &QAction::triggered, this, &CodeEditor::slotInsertCodeBlockBeforeSelected);
+        connect(insCodeBeforeAct, SIGNAL(triggered()), this, SLOT(slotInsertCodeBlockBeforeSelected()));
         menu->addAction(insCodeBeforeAct);
 
 #if QT_VERSION >= 0x050000
@@ -824,7 +824,7 @@ KMenu * CodeEditor::createPopup()
         KAction* insCodeAfterAct = new KAction(i18n("Insert Code Block After"), this);
 #endif
         insCodeAfterAct->setShortcut(Qt::CTRL + Qt::Key_A);
-        connect(insCodeAfterAct, &QAction::triggered, this, &CodeEditor::slotInsertCodeBlockAfterSelected);
+        connect(insCodeAfterAct, SIGNAL(triggered()), this, SLOT(slotInsertCodeBlockAfterSelected()));
         menu->addAction(insCodeAfterAct);
 
         menu->addSeparator();
@@ -835,7 +835,7 @@ KMenu * CodeEditor::createPopup()
         KAction* copyAct = new KAction(i18n("Copy"), this);
 #endif
         copyAct->setShortcut(Qt::CTRL + Qt::Key_C);
-        connect(copyAct, &QAction::triggered, this, &CodeEditor::slotCopyTextBlock);
+        connect(copyAct, SIGNAL(triggered()), this, SLOT(slotCopyTextBlock()));
         menu->addAction(copyAct);
 
 #if QT_VERSION >= 0x050000
@@ -844,7 +844,7 @@ KMenu * CodeEditor::createPopup()
         KAction* pasteAct = new KAction(i18n("Paste"), this);
 #endif
         pasteAct->setShortcut(Qt::CTRL + Qt::Key_V);
-        connect(pasteAct, &QAction::triggered, this, &CodeEditor::slotPasteTextBlock);
+        connect(pasteAct, SIGNAL(triggered()), this, SLOT(slotPasteTextBlock()));
         menu->addAction(pasteAct);
 
 #if QT_VERSION >= 0x050000
@@ -853,7 +853,7 @@ KMenu * CodeEditor::createPopup()
         KAction* cutAct = new KAction(i18n("Cut"), this);
 #endif
         cutAct->setShortcut(Qt::CTRL + Qt::Key_X);
-        connect(cutAct, &QAction::triggered, this, &CodeEditor::slotCutTextBlock);
+        connect(cutAct, SIGNAL(triggered()), this, SLOT(slotCutTextBlock()));
         menu->addAction(cutAct);
 
         // enable/disable based on conditions
@@ -992,7 +992,7 @@ void CodeEditor::init(CodeViewerDialog * parentDialog, CodeDocument * parentDoc)
 
     // connect(this, SIGNAL(newLinePressed()), this, SLOT(newLinePressed()));
     // connect(this, SIGNAL(backspacePressed()), this, SLOT(backspacePressed()));
-    connect(this, &CodeEditor::cursorPositionChanged, this, &CodeEditor::slotCursorPositionChanged);
+    connect(this, SIGNAL(cursorPositionChanged()), this, SLOT(slotCursorPositionChanged()));
 
     // do this last
     loadFromDocument();
diff --git a/umbrello/dialogs/codetextedit.cpp b/umbrello/dialogs/codetextedit.cpp
index de6ccc3922bb14ff0b427f4e90167e057d6e8d47..54a35895ec4eb715062cfc9f604978d55419cfe2 100644
--- a/umbrello/dialogs/codetextedit.cpp
+++ b/umbrello/dialogs/codetextedit.cpp
@@ -38,9 +38,9 @@ CodeTextEdit::CodeTextEdit(QWidget *parent)
     m_lineNumberArea = new LineNumberArea(this);
     m_highlighter = new CodeTextHighlighter(document());
 
-    connect(this, &CodeTextEdit::blockCountChanged, this, &CodeTextEdit::updateLineNumberAreaWidth);
-    connect(this, &CodeTextEdit::updateRequest, this, &CodeTextEdit::updateLineNumberArea);
-    connect(this, &CodeTextEdit::cursorPositionChanged, this, &CodeTextEdit::highlightCurrentLine);
+    connect(this, SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth(int)));
+    connect(this, SIGNAL(updateRequest(QRect,int)), this, SLOT(updateLineNumberArea(QRect,int)));
+    connect(this, SIGNAL(cursorPositionChanged()), this, SLOT(highlightCurrentLine()));
 
     updateLineNumberAreaWidth(0);
     highlightCurrentLine();
diff --git a/umbrello/dialogs/codeviewerdialog.cpp b/umbrello/dialogs/codeviewerdialog.cpp
index ae1cb405d0798fe739aa2764f983593b15b3c181..fc34f846595d6e559932b18a84db01ed37249ca0 100644
--- a/umbrello/dialogs/codeviewerdialog.cpp
+++ b/umbrello/dialogs/codeviewerdialog.cpp
@@ -33,6 +33,7 @@ CodeViewerDialog::CodeViewerDialog (QWidget* parent, CodeDocument * doc,
     setupUi(mainWidget());
     initGUI();
     addCodeDocument(doc);
+    connect(this, SIGNAL(cancelClicked()), mainWidget(), SLOT(close()));
 }
 
 CodeViewerDialog::~CodeViewerDialog()
@@ -62,8 +63,8 @@ void CodeViewerDialog::addCodeDocument(CodeDocument * doc)
     uDebug() << "name=" << name << " / ext=" << ext;
     ui_tabWidget->addTab(page, (name + (ext.isEmpty() ? QString() : ext)));
 
-    connect(ui_highlightCheckBox, &QCheckBox::stateChanged, page, &CodeEditor::changeHighlighting);
-    connect(ui_showHiddenCodeCB, &QCheckBox::stateChanged, page, &CodeEditor::changeShowHidden);
+    connect(ui_highlightCheckBox, SIGNAL(stateChanged(int)), page, SLOT(changeHighlighting(int)));
+    connect(ui_showHiddenCodeCB, SIGNAL(stateChanged(int)), page, SLOT(changeShowHidden(int)));
 }
 
 /**
diff --git a/umbrello/dialogs/exportallviewsdialog.cpp b/umbrello/dialogs/exportallviewsdialog.cpp
index 7b37fa88dab77cd4ca485566c74c71a223c4dfb1..4810805757e982e06544d3b99e81baf06b79a0e0 100644
--- a/umbrello/dialogs/exportallviewsdialog.cpp
+++ b/umbrello/dialogs/exportallviewsdialog.cpp
@@ -42,7 +42,7 @@ ExportAllViewsDialog::ExportAllViewsDialog(QWidget* parent, const char* name)
 
     // reload the strings so the m_imageType tooltip is added
     languageChange();
-    connect(m_imageType, &ImageTypeWidget::currentIndexChanged, this, &ExportAllViewsDialog::slotImageTypeChanged);
+    connect(m_imageType, SIGNAL(currentIndexChanged(QString)), this, SLOT(slotImageTypeChanged(QString)));
 
     m_kURL->setMode(KFile::Directory | KFile::ExistingOnly);
 }
diff --git a/umbrello/dialogs/finddialog.cpp b/umbrello/dialogs/finddialog.cpp
index 42df21a401cce45be5d4557219c1bbaec1ba3183..14f1f4fca11a78684cb569dea9cb90ba24d93dd2 100644
--- a/umbrello/dialogs/finddialog.cpp
+++ b/umbrello/dialogs/finddialog.cpp
@@ -15,14 +15,14 @@ FindDialog::FindDialog(QWidget *parent) :
 {
     setCaption(i18n("Find"));
     setupUi(mainWidget());
-    connect(ui_buttonGroup,static_cast<void (QButtonGroup::*)(int)> (&QButtonGroup::buttonClicked), this, &FindDialog::slotFilterButtonClicked);
+    connect(ui_buttonGroup, SIGNAL(buttonClicked(int)), this, SLOT(slotFilterButtonClicked(int)));
     ui_treeView->setChecked(true);
     ui_categoryAll->setChecked(true);
 }
 
 FindDialog::~FindDialog()
 {
-    disconnect(ui_buttonGroup, static_cast<void (QButtonGroup::*)(int)> (&QButtonGroup::buttonClicked), this, &FindDialog::slotFilterButtonClicked);
+    disconnect(ui_buttonGroup, SIGNAL(buttonClicked(int)), this, SLOT(slotFilterButtonClicked(int)));
 }
 
 /**
diff --git a/umbrello/dialogs/multipagedialogbase.cpp b/umbrello/dialogs/multipagedialogbase.cpp
index 2c3bf4d8c48ac5ad387f5dd57b9e25423eaa0bf9..780406ed13e076801b0246b4a6f51dac5493b5ee 100644
--- a/umbrello/dialogs/multipagedialogbase.cpp
+++ b/umbrello/dialogs/multipagedialogbase.cpp
@@ -68,10 +68,9 @@ MultiPageDialogBase::MultiPageDialogBase(QWidget *parent, bool withDefaultButton
         if (withDefaultButton) {
             QPushButton *defaultButton = new QPushButton(i18n("Default"));
             m_pageDialog->addActionButton(defaultButton);
-            connect(defaultButton, &QPushButton::clicked, this, &MultiPageDialogBase::slotDefaultClicked);
+            connect(defaultButton, SIGNAL(clicked()), this, SLOT(slotDefaultClicked()));
         }
-        //connect(dlgButtonBox, SIGNAL(clicked(QAbstractButton*)), this, SLOT(slotButtonClicked(QAbstractButton*)));
-        connect(dlgButtonBox, &QDialogButtonBox::clicked, this, &MultiPageDialogBase::slotButtonClicked);
+        connect(dlgButtonBox, SIGNAL(clicked(QAbstractButton*)), this, SLOT(slotButtonClicked(QAbstractButton*)));
     } else {
         m_pageWidget = new KPageWidget(this);
         m_pageWidget->setFaceType(KPageView::Tree);
@@ -101,9 +100,9 @@ MultiPageDialogBase::MultiPageDialogBase(QWidget *parent, bool withDefaultButton
         m_pageDialog->setFaceType(KPageDialog::List);
         m_pageDialog->setModal(true);
         m_pageDialog->setHelp(QString::fromLatin1("umbrello/index.html"), QString());
-        connect(m_pageDialog, &KPageDialog::okClicked, this, &MultiPageDialogBase::slotOkClicked);
-        connect(m_pageDialog, &KPageDialog::applyClicked, this, &MultiPageDialogBase::slotApplyClicked);
-        connect(m_pageDialog, &KPageDialog::defaultClicked, this, &MultiPageDialogBase::slotDefaultClicked);
+        connect(m_pageDialog, SIGNAL(okClicked()), this, SLOT(slotOkClicked()));
+        connect(m_pageDialog, SIGNAL(applyClicked()), this, SLOT(slotApplyClicked()));
+        connect(m_pageDialog, SIGNAL(defaultClicked()), this, SLOT(slotDefaultClicked()));
     } else {
         m_pageWidget = new KPageWidget(this);
         m_pageWidget->setFaceType(KPageView::Tree);
diff --git a/umbrello/dialogs/objectnodedialog.cpp b/umbrello/dialogs/objectnodedialog.cpp
index 2cb558330eb1aea38aeef55a0f41dbe68004cd98..03704c517f4871d0e64bd7623efc77508dc8e7f8 100644
--- a/umbrello/dialogs/objectnodedialog.cpp
+++ b/umbrello/dialogs/objectnodedialog.cpp
@@ -42,8 +42,8 @@ ObjectNodeDialog::ObjectNodeDialog(QWidget *parent, ObjectNodeWidget * pWidget)
 {
     setCaption(i18n("Properties"));
     setupPages();
-    connect(this, &ObjectNodeDialog::okClicked, this, &ObjectNodeDialog::slotOk);
-    connect(this, &ObjectNodeDialog::applyClicked, this, &ObjectNodeDialog::slotApply);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
 }
 
 /**
@@ -178,9 +178,9 @@ void ObjectNodeDialog::setupGeneralPage()
         showState();
     }
 
-    connect(m_GenPageWidgets.bufferRB, &QRadioButton::clicked, this, &ObjectNodeDialog::slotHideState);
-    connect(m_GenPageWidgets.dataRB, &QRadioButton::clicked, this, &ObjectNodeDialog::slotHideState);
-    connect(m_GenPageWidgets.flowRB, &QRadioButton::clicked, this, &ObjectNodeDialog::slotShowState);
+    connect(m_GenPageWidgets.bufferRB, SIGNAL(clicked()), this, SLOT(slotHideState()));
+    connect(m_GenPageWidgets.dataRB, SIGNAL(clicked()), this, SLOT(slotHideState()));
+    connect(m_GenPageWidgets.flowRB, SIGNAL(clicked()), this, SLOT(slotShowState()));
 
     ObjectNodeWidget::ObjectNodeType newType = m_pObjectNodeWidget->objectNodeType() ;
 
diff --git a/umbrello/dialogs/pages/activitypage.cpp b/umbrello/dialogs/pages/activitypage.cpp
index dd64c7e5dd890d0d1740eaf67abfa6e534f0b925..2fb4179888092124e6b95db50e7e1a5a7a9f5eff 100644
--- a/umbrello/dialogs/pages/activitypage.cpp
+++ b/umbrello/dialogs/pages/activitypage.cpp
@@ -107,11 +107,11 @@ void ActivityPage::setupPage()
 #if QT_VERSION >= 0x050000
     QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pActivityGB);
     QPushButton* newActivity = buttonBox->addButton(i18n("New Activity..."), QDialogButtonBox::ActionRole);
-    connect(newActivity, &QPushButton::clicked, this, &ActivityPage::slotNewActivity);
+    connect(newActivity, SIGNAL(clicked()), this, SLOT(slotNewActivity()));
     m_pDeleteActivityButton = buttonBox->addButton(i18n("Delete"), QDialogButtonBox::ActionRole);
-    connect(m_pDeleteActivityButton, &QPushButton::clicked, this, &ActivityPage::slotDelete);
+    connect(m_pDeleteActivityButton, SIGNAL(clicked()), this, SLOT(slotDelete()));
     m_pRenameButton = buttonBox->addButton(i18n("Rename"), QDialogButtonBox::ActionRole);
-    connect(m_pRenameButton, &QPushButton::clicked, this, &ActivityPage::slotRename);
+    connect(m_pRenameButton, SIGNAL(clicked()), this, SLOT(slotRename()));
 #else
     KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pActivityGB);
     buttonBox->addButton(i18n("New Activity..."), KDialogButtonBox::ActionRole,
@@ -134,13 +134,16 @@ void ActivityPage::setupPage()
     }
 
     //now setup the signals
-    connect(m_pActivityLW, &QListWidget::itemClicked, this, &ActivityPage::slotClicked);
-    connect(m_pActivityLW, &QListWidget::customContextMenuRequested, this, &ActivityPage::slotRightButtonPressed);
-    connect(m_pTopArrowB, &QToolButton::clicked, this, &ActivityPage::slotTopClicked);
-    connect(m_pUpArrowB, &QToolButton::clicked, this, &ActivityPage::slotUpClicked);
-    connect(m_pDownArrowB, &QToolButton::clicked, this, &ActivityPage::slotDownClicked);
-    connect(m_pBottomArrowB, &QToolButton::clicked, this, &ActivityPage::slotBottomClicked);
-    connect(m_pActivityLW, &QListWidget::itemDoubleClicked, this, &ActivityPage::slotDoubleClicked);
+    connect(m_pActivityLW, SIGNAL(itemClicked(QListWidgetItem*)), this, SLOT(slotClicked(QListWidgetItem*)));
+    connect(m_pActivityLW, SIGNAL(customContextMenuRequested(QPoint)),
+            this, SLOT(slotRightButtonPressed(QPoint)));
+
+    connect(m_pTopArrowB, SIGNAL(clicked()), this, SLOT(slotTopClicked()));
+    connect(m_pUpArrowB, SIGNAL(clicked()), this, SLOT(slotUpClicked()));
+    connect(m_pDownArrowB, SIGNAL(clicked()), this, SLOT(slotDownClicked()));
+    connect(m_pBottomArrowB, SIGNAL(clicked()), this, SLOT(slotBottomClicked()));
+
+    connect(m_pActivityLW, SIGNAL(itemDoubleClicked(QListWidgetItem*)), this, SLOT(slotDoubleClicked(QListWidgetItem*)));
 
     enableWidgets(false);
 }
diff --git a/umbrello/dialogs/pages/associationgeneralpage.cpp b/umbrello/dialogs/pages/associationgeneralpage.cpp
index 78806a685477c219c89a33aac34d72695792ead9..76be4181b5af1de5b31bbedc1db69c5170cbc48d 100644
--- a/umbrello/dialogs/pages/associationgeneralpage.cpp
+++ b/umbrello/dialogs/pages/associationgeneralpage.cpp
@@ -115,7 +115,7 @@ void AssociationGeneralPage::constructWidget()
         // stereotype checkbox
         m_pStereoChkB = new QCheckBox(i18n("Stereotype"), nameAndTypeGB);
         m_pStereoChkB->setChecked(umlAssoc->umlStereotype() != NULL);
-        connect(m_pStereoChkB, &QCheckBox::stateChanged, this, &AssociationGeneralPage::slotStereoCheckboxChanged);
+        connect(m_pStereoChkB, SIGNAL(stateChanged(int)), this, SLOT(slotStereoCheckboxChanged(int)));
         m_pNameAndTypeLayout->addWidget(m_pStereoChkB, 0, 2);
     }
 
diff --git a/umbrello/dialogs/pages/autolayoutoptionpage.cpp b/umbrello/dialogs/pages/autolayoutoptionpage.cpp
index a62f8e9e5dc97d9a94ac0641e3bf0208785ba62e..8105ab01dcd8a9edcc53c65724d8aec45120ea13 100644
--- a/umbrello/dialogs/pages/autolayoutoptionpage.cpp
+++ b/umbrello/dialogs/pages/autolayoutoptionpage.cpp
@@ -37,7 +37,7 @@ AutoLayoutOptionPage::AutoLayoutOptionPage(QWidget* parent)
     m_autoDotPath->setChecked(Settings::optionState().autoLayoutState.autoDotPath);
     m_dotPath->setText(Settings::optionState().autoLayoutState.dotPath);
     m_showExportLayout->setChecked(Settings::optionState().autoLayoutState.showExportLayout);
-    connect(m_autoDotPath, &QCheckBox::toggled, this, &AutoLayoutOptionPage::slotAutoDotPathCBClicked);
+    connect(m_autoDotPath, SIGNAL(toggled(bool)), this, SLOT(slotAutoDotPathCBClicked(bool)));
 
     if (Settings::optionState().autoLayoutState.autoDotPath) {
         m_dotPath->setEnabled (false);
diff --git a/umbrello/dialogs/pages/classassociationspage.cpp b/umbrello/dialogs/pages/classassociationspage.cpp
index fec37277f58956f0f4a3db6bb736f63ec0adcd3a..aeb629927c33cee884448d3076fed75bdaa77126 100644
--- a/umbrello/dialogs/pages/classassociationspage.cpp
+++ b/umbrello/dialogs/pages/classassociationspage.cpp
@@ -54,8 +54,10 @@ ClassAssociationsPage::ClassAssociationsPage(QWidget *parent, UMLScene *s, UMLOb
     setMinimumSize(310, 330);
     fillListBox();
 
-    connect(m_pAssocLW, &QListWidget::itemDoubleClicked, this, &ClassAssociationsPage::slotDoubleClick);
-    connect(m_pAssocLW, &QListWidget::customContextMenuRequested, this, &ClassAssociationsPage::slotRightButtonPressed);
+    connect(m_pAssocLW, SIGNAL(itemDoubleClicked(QListWidgetItem*)),
+            this, SLOT(slotDoubleClick(QListWidgetItem*)));
+    connect(m_pAssocLW, SIGNAL(customContextMenuRequested(QPoint)),
+            this, SLOT(slotRightButtonPressed(QPoint)));
 }
 
 /**
@@ -63,9 +65,10 @@ ClassAssociationsPage::ClassAssociationsPage(QWidget *parent, UMLScene *s, UMLOb
  */
 ClassAssociationsPage::~ClassAssociationsPage()
 {
-    disconnect(m_pAssocLW, &QListWidget::itemDoubleClicked, this, &ClassAssociationsPage::slotDoubleClick);
-    disconnect(m_pAssocLW, &QListWidget::customContextMenuRequested, this, &ClassAssociationsPage::slotRightButtonPressed);
-
+    disconnect(m_pAssocLW, SIGNAL(itemDoubleClicked(QListWidgetItem*)),
+               this, SLOT(slotDoubleClick(QListWidgetItem*)));
+    disconnect(m_pAssocLW, SIGNAL(customContextMenuRequested(QPoint)),
+               this, SLOT(slotRightButtonPressed(QPoint)));
 }
 
 void ClassAssociationsPage::slotDoubleClick(QListWidgetItem * item)
diff --git a/umbrello/dialogs/pages/classgeneralpage.cpp b/umbrello/dialogs/pages/classgeneralpage.cpp
index 776897723fc1b8cac6c3383c959b2358b2195118..57534bbffbcb94ff3d4b9560937ad729a82afbf8 100644
--- a/umbrello/dialogs/pages/classgeneralpage.cpp
+++ b/umbrello/dialogs/pages/classgeneralpage.cpp
@@ -93,7 +93,8 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLObject* o)
     m_nameWidget->addToLayout(m_pNameLayout, 0);
 
     if (t != UMLObject::ot_Stereotype) {
-        m_stereotypeWidget = new UMLStereotypeWidget(m_pObject);
+        m_stereotypeWidget = new UMLStereotypeWidget();
+        m_stereotypeWidget->setUMLObject(m_pObject);
         if (t == UMLObject::ot_Interface || t == UMLObject::ot_Datatype || t == UMLObject::ot_Enum) {
             m_stereotypeWidget->setEditable(false);
         }
@@ -143,11 +144,13 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLObject* o)
 
     // setup scope
     if (t != UMLObject::ot_Stereotype) {
-        m_visibilityEnumWidget = new VisibilityEnumWidget(m_pObject, this);
+        m_visibilityEnumWidget = new VisibilityEnumWidget();
+        m_visibilityEnumWidget->setUMLObject(m_pObject);
         m_visibilityEnumWidget->addToLayout(topLayout);
     }
 
-    m_docWidget = new DocumentationWidget(m_pObject, this);
+    m_docWidget = new DocumentationWidget();
+    m_docWidget->setUMLObject(m_pObject);
     topLayout->addWidget(m_docWidget);
 }
 
@@ -213,7 +216,7 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, ObjectWidget* o)
     topLayout->addWidget(m_docWidget);
 
     if (m_pMultiCB) {
-        connect(m_pDrawActorCB, &QCheckBox::toggled, this, &ClassGeneralPage::slotActorToggled);
+        connect(m_pDrawActorCB, SIGNAL(toggled(bool)), this, SLOT(slotActorToggled(bool)));
     }
 }
 
@@ -252,7 +255,8 @@ ClassGeneralPage::ClassGeneralPage(UMLDoc* d, QWidget* parent, UMLWidget* widget
     m_nameWidget->addToLayout(m_pNameLayout, 0);
 
     if (widget->umlObject()) {
-        m_stereotypeWidget = new UMLStereotypeWidget(widget->umlObject());
+        m_stereotypeWidget = new UMLStereotypeWidget();
+        m_stereotypeWidget->setUMLObject(widget->umlObject());
         m_stereotypeWidget->addToLayout(m_pNameLayout, 1);
     }
 
diff --git a/umbrello/dialogs/pages/classifierlistpage.cpp b/umbrello/dialogs/pages/classifierlistpage.cpp
index 421a498e598df949e86f14f03600432635100b90..2d511a7e9284d9e16c6af7279182156b6502bf6b 100644
--- a/umbrello/dialogs/pages/classifierlistpage.cpp
+++ b/umbrello/dialogs/pages/classifierlistpage.cpp
@@ -94,16 +94,16 @@ void ClassifierListPage::setupPage()
     enableWidgets(false);//disable widgets until an att is chosen
     m_pOldListItem = 0;
 
-    connect(m_pItemListLB, &QListWidget::currentItemChanged, this, &ClassifierListPage::slotActivateItem);
-    connect(m_pItemListLB, &QListWidget::itemDoubleClicked, this, &ClassifierListPage::slotDoubleClick);
-    connect(m_pItemListLB, &QListWidget::customContextMenuRequested, this, &ClassifierListPage::slotRightButtonPressed);
+    connect(m_pItemListLB, SIGNAL(currentItemChanged(QListWidgetItem*,QListWidgetItem*)), this, SLOT(slotActivateItem(QListWidgetItem*)));
+    connect(m_pItemListLB, SIGNAL(itemDoubleClicked(QListWidgetItem*)), this, SLOT(slotDoubleClick(QListWidgetItem*)));
+    connect(m_pItemListLB, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(slotRightButtonPressed(QPoint)));
 
-    connect(m_doc, &UMLDoc::sigObjectCreated, this, &ClassifierListPage::slotListItemCreated);
+    connect(m_doc, SIGNAL(sigObjectCreated(UMLObject*)), this, SLOT(slotListItemCreated(UMLObject*)));
 
-    connect(m_pTopArrowB, &QToolButton::clicked, this, &ClassifierListPage::slotTopClicked);
-    connect(m_pUpArrowB, &QToolButton::clicked, this, &ClassifierListPage::slotUpClicked);
-    connect(m_pDownArrowB, &QToolButton::clicked, this, &ClassifierListPage::slotDownClicked);
-    connect(m_pBottomArrowB, &QToolButton::clicked, this, &ClassifierListPage::slotBottomClicked);
+    connect(m_pTopArrowB, SIGNAL(clicked()), this, SLOT(slotTopClicked()));
+    connect(m_pUpArrowB, SIGNAL(clicked()), this, SLOT(slotUpClicked()));
+    connect(m_pDownArrowB, SIGNAL(clicked()), this, SLOT(slotDownClicked()));
+    connect(m_pBottomArrowB, SIGNAL(clicked()), this, SLOT(slotBottomClicked()));
 }
 
 /**
@@ -208,11 +208,11 @@ void ClassifierListPage::setupActionButtons(const QString& itemType, QVBoxLayout
 #if QT_VERSION >= 0x050000
     QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pItemListGB);
     m_pNewClassifierListItemButton = buttonBox->addButton(itemType, QDialogButtonBox::ActionRole);
-    connect(m_pNewClassifierListItemButton, &QPushButton::clicked, this, &ClassifierListPage::slotNewListItem);
+    connect(m_pNewClassifierListItemButton, SIGNAL(clicked()), this, SLOT(slotNewListItem()));
     m_pDeleteListItemButton = buttonBox->addButton(i18n("&Delete"), QDialogButtonBox::ActionRole);
-    connect(m_pDeleteListItemButton, &QPushButton::clicked, this, &ClassifierListPage::slotDelete);
+    connect(m_pDeleteListItemButton, SIGNAL(clicked()), this, SLOT(slotDelete()));
     m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), QDialogButtonBox::ActionRole);
-    connect(m_pPropertiesButton, &QPushButton::clicked, this, &ClassifierListPage::slotProperties);
+    connect(m_pPropertiesButton, SIGNAL(clicked()), this, SLOT(slotProperties()));
 #else
     KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pItemListGB);
     m_pNewClassifierListItemButton = buttonBox->addButton(itemType, KDialogButtonBox::ActionRole, this,
@@ -266,7 +266,7 @@ void ClassifierListPage::reloadItemListBox()
     // to the ListItemModified slot in this class
     foreach (UMLClassifierListItem* listItem, itemList) {
         m_pItemListLB->addItem(listItem->toString(Uml::SignatureType::SigNoVis));
-        connect(listItem, &UMLClassifierListItem::modified, this, &ClassifierListPage::slotListItemModified);
+        connect(listItem, SIGNAL(modified()), this, SLOT(slotListItemModified()));
     }
 }
 
@@ -419,7 +419,7 @@ void ClassifierListPage::slotListItemCreated(UMLObject* object)
     if (index > -1) {
         m_pItemListLB->setCurrentItem(m_pItemListLB->item(index));
         slotActivateItem(m_pItemListLB->item(index));
-        connect(object, &UMLObject::modified, this, &ClassifierListPage::slotListItemModified);
+        connect(object, SIGNAL(modified()), this, SLOT(slotListItemModified()));
     }
 }
 
diff --git a/umbrello/dialogs/pages/constraintlistpage.cpp b/umbrello/dialogs/pages/constraintlistpage.cpp
index 7f484c79e14f3633ccd3575cd31d76487fb80108..f2aa031aa77d2eaa86fa9b4d08d1a71feeb8771b 100644
--- a/umbrello/dialogs/pages/constraintlistpage.cpp
+++ b/umbrello/dialogs/pages/constraintlistpage.cpp
@@ -85,27 +85,32 @@ void ConstraintListPage::setupActions()
 #else
     newUniqueConstraintAction = new KAction(i18n("Unique Constraint..."), this);
 #endif
-    connect(newUniqueConstraintAction, &QAction::triggered, this, &ConstraintListPage::slotNewUniqueConstraint);
+    connect(newUniqueConstraintAction, SIGNAL(triggered(bool)),
+             this, SLOT(slotNewUniqueConstraint()));
+
 #if QT_VERSION >= 0x050000
     newPrimaryKeyConstraintAction = new QAction(i18n("Primary Key Constraint..."), this);
 #else
     newPrimaryKeyConstraintAction = new KAction(i18n("Primary Key Constraint..."), this);
 #endif
-    connect(newPrimaryKeyConstraintAction, &QAction::triggered, this, &ConstraintListPage::slotNewPrimaryKeyConstraint);
+    connect(newPrimaryKeyConstraintAction, SIGNAL(triggered(bool)),
+             this, SLOT(slotNewPrimaryKeyConstraint()));
 
 #if QT_VERSION >= 0x050000
     newForeignKeyConstraintAction = new QAction(i18n("Foreign Key Constraint..."), this);
 #else
     newForeignKeyConstraintAction = new KAction(i18n("Foreign Key Constraint..."), this);
 #endif
-    connect(newForeignKeyConstraintAction, &QAction::triggered, this, &ConstraintListPage::slotNewForeignKeyConstraint);
+    connect(newForeignKeyConstraintAction, SIGNAL(triggered(bool)),
+             this, SLOT(slotNewForeignKeyConstraint()));
 
 #if QT_VERSION >= 0x050000
     newCheckConstraintAction = new QAction(i18n("Check Constraint..."), this);
 #else
     newCheckConstraintAction = new KAction(i18n("Check Constraint..."), this);
 #endif
-    connect(newCheckConstraintAction, &QAction::triggered, this, &ConstraintListPage::slotNewCheckConstraint);
+    connect(newCheckConstraintAction, SIGNAL(triggered(bool)),
+             this, SLOT(slotNewCheckConstraint()));
 }
 
 void ConstraintListPage::slotNewUniqueConstraint()
diff --git a/umbrello/dialogs/pages/diagramprintpage.cpp b/umbrello/dialogs/pages/diagramprintpage.cpp
index c2ddc5dfd850e65e7a6080e929e0042fbd4b7953..f8367fb67d16f5f1c9fdc8a7cdf756c3c7aea9f9 100644
--- a/umbrello/dialogs/pages/diagramprintpage.cpp
+++ b/umbrello/dialogs/pages/diagramprintpage.cpp
@@ -87,12 +87,13 @@ DiagramPrintPage::DiagramPrintPage(QWidget * parent, UMLDoc * doc)
     m_nIdList.append(UMLApp::app()->currentView()->umlScene()->ID());
 
     m_ViewType = Uml::DiagramType::Class;
-    connect(m_pAllRB, &QRadioButton::clicked, this, &DiagramPrintPage::slotClicked);
-    connect(m_pCurrentRB, &QRadioButton::clicked, this, &DiagramPrintPage::slotClicked);
-    connect(m_pSelectRB, &QRadioButton::clicked, this, &DiagramPrintPage::slotClicked);
-    connect(m_pTypeRB, &QRadioButton::clicked, this, &DiagramPrintPage::slotClicked);
+    connect(m_pAllRB, SIGNAL(clicked()), this, SLOT(slotClicked()));
+    connect(m_pCurrentRB, SIGNAL(clicked()), this, SLOT(slotClicked()));
+    connect(m_pSelectRB, SIGNAL(clicked()), this, SLOT(slotClicked()));
+    connect(m_pTypeRB, SIGNAL(clicked()), this, SLOT(slotClicked()));
+
+    connect(m_pTypeCB, SIGNAL(activated(int)), this, SLOT(slotActivated(int)));
 
-    connect(m_pTypeCB, static_cast<void (KComboBox::*)(int)>(&KComboBox::activated), this, &DiagramPrintPage::slotActivated);
     QStringList types;
     // diagramNo 1 is Uml::DiagramType::Class
     // digaramNo 9 is Uml::DiagramType::EntityRelationship
diff --git a/umbrello/dialogs/pages/generaloptionpage.cpp b/umbrello/dialogs/pages/generaloptionpage.cpp
index 563bf33962749ff6ffb45a98a580fd0720a2f3fc..a01d0e8c7a695ba619077d0bf4dc3ed762c1ce19 100644
--- a/umbrello/dialogs/pages/generaloptionpage.cpp
+++ b/umbrello/dialogs/pages/generaloptionpage.cpp
@@ -150,7 +150,7 @@ GeneralOptionPage::GeneralOptionPage(QWidget* parent)
     }
 
     m_GeneralWidgets.diagramKB->setCurrentIndex((int)optionState.generalState.diagram-1);
-    connect(m_GeneralWidgets.autosaveCB, &QCheckBox::clicked, this, &GeneralOptionPage::slotAutosaveCBClicked);
+    connect(m_GeneralWidgets.autosaveCB, SIGNAL(clicked()), this, SLOT(slotAutosaveCBClicked()));
 
     m_GeneralWidgets.defaultLanguageL = new QLabel(i18n("Default Language :"), m_GeneralWidgets.startupGB);
     startupLayout->addWidget(m_GeneralWidgets.defaultLanguageL, 2, 0);
diff --git a/umbrello/dialogs/pages/packagecontentspage.cpp b/umbrello/dialogs/pages/packagecontentspage.cpp
index 957740740f72e2ede42a3b0c7fbd9194005e2972..5af9ecbcf61c279518ae9640365a2d8c88d41dc5 100644
--- a/umbrello/dialogs/pages/packagecontentspage.cpp
+++ b/umbrello/dialogs/pages/packagecontentspage.cpp
@@ -53,8 +53,10 @@ PackageContentsPage::PackageContentsPage(QWidget *parent, UMLPackage *pkg)
     setMinimumSize(310, 330);
     fillListBox();
 
-    connect(m_contentLW, &QListWidget::itemDoubleClicked, this, &PackageContentsPage::slotDoubleClick);
-    connect(m_contentLW, &QListWidget::customContextMenuRequested, this, &PackageContentsPage::slotShowContextMenu);
+    connect(m_contentLW, SIGNAL(itemDoubleClicked(QListWidgetItem*)),
+            this, SLOT(slotDoubleClick(QListWidgetItem*)));
+    connect(m_contentLW, SIGNAL(customContextMenuRequested(QPoint)),
+            this, SLOT(slotShowContextMenu(QPoint)));
 }
 
 /**
@@ -62,8 +64,10 @@ PackageContentsPage::PackageContentsPage(QWidget *parent, UMLPackage *pkg)
  */
 PackageContentsPage::~PackageContentsPage()
 {
-    disconnect(m_contentLW, &QListWidget::itemDoubleClicked, this, &PackageContentsPage::slotDoubleClick);
-    disconnect(m_contentLW, &QListWidget::customContextMenuRequested, this, &PackageContentsPage::slotShowContextMenu);
+    disconnect(m_contentLW, SIGNAL(itemDoubleClicked(QListWidgetItem*)),
+               this, SLOT(slotDoubleClick(QListWidgetItem*)));
+    disconnect(m_contentLW, SIGNAL(customContextMenuRequested(QPoint)),
+               this, SLOT(slotShowContextMenu(QPoint)));
 }
 
 void PackageContentsPage::slotDoubleClick(QListWidgetItem *item)
diff --git a/umbrello/dialogs/pages/umlwidgetstylepage.cpp b/umbrello/dialogs/pages/umlwidgetstylepage.cpp
index 53ab7fae69da4d4b222262b0720614e2273c7d80..9601d952a0fbd9c92ab953e61d74d6e3c4393695 100644
--- a/umbrello/dialogs/pages/umlwidgetstylepage.cpp
+++ b/umbrello/dialogs/pages/umlwidgetstylepage.cpp
@@ -137,9 +137,9 @@ void UMLWidgetStylePage::init()
     colorLayout->addWidget(m_pUseFillColorCB, ++row, 0);
 
     //connect button signals up
-    connect(m_pTextDefaultB, &QPushButton::clicked, this, &UMLWidgetStylePage::slotTextButtonClicked);
-    connect(m_pLineDefaultB, &QPushButton::clicked, this, &UMLWidgetStylePage::slotLineButtonClicked);
-    connect(m_pFillDefaultB, &QPushButton::clicked, this, &UMLWidgetStylePage::slotFillButtonClicked);
+    connect(m_pTextDefaultB, SIGNAL(clicked()), this, SLOT(slotTextButtonClicked())) ;
+    connect(m_pLineDefaultB, SIGNAL(clicked()), this, SLOT(slotLineButtonClicked())) ;
+    connect(m_pFillDefaultB, SIGNAL(clicked()), this, SLOT(slotFillButtonClicked()));
 
     if (!m_pUMLWidget) {  //  when we are on the diagram
         m_BackgroundColorL = new QLabel(i18nc("background color", "&Background:"), m_pColorGB);
@@ -163,8 +163,8 @@ void UMLWidgetStylePage::init()
         colorLayout->addWidget(m_GridDotDefaultB, row, 2);
 
         //connect button signals up
-        connect(m_BackgroundDefaultB, &QPushButton::clicked, this, &UMLWidgetStylePage::slotBackgroundButtonClicked);
-        connect(m_GridDotDefaultB, &QPushButton::clicked, this, &UMLWidgetStylePage::slotGridDotButtonClicked);
+        connect(m_BackgroundDefaultB, SIGNAL(clicked()), this, SLOT(slotBackgroundButtonClicked()));
+        connect(m_GridDotDefaultB,    SIGNAL(clicked()), this, SLOT(slotGridDotButtonClicked()));
     }
 
     m_pStyleGB = new QGroupBox(i18nc("title of width group", "Width"), this);
@@ -189,7 +189,7 @@ void UMLWidgetStylePage::init()
     styleLayout->addWidget(m_lineWidthDefaultB, row, 2);
 
     //connect button signals up
-    connect(m_lineWidthDefaultB, &QPushButton::clicked, this, &UMLWidgetStylePage::slotLineWidthButtonClicked);
+    connect(m_lineWidthDefaultB, SIGNAL(clicked()), this, SLOT(slotLineWidthButtonClicked()));
 }
 
 /**
diff --git a/umbrello/dialogs/parameterpropertiesdialog.cpp b/umbrello/dialogs/parameterpropertiesdialog.cpp
index a6468b4339680f626498d3b606d355a8ddc7707e..61730d7151a308d5542f08b5788702fa002fdf10 100644
--- a/umbrello/dialogs/parameterpropertiesdialog.cpp
+++ b/umbrello/dialogs/parameterpropertiesdialog.cpp
@@ -71,7 +71,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
     propLayout->setSpacing(10);
     propLayout->setMargin(margin);
 
-    m_datatypeWidget = new UMLDatatypeWidget(m_pAtt);
+    m_datatypeWidget = new UMLDatatypeWidget();
+    m_datatypeWidget->setAttribute(m_pAtt);
     m_datatypeWidget->addToLayout(propLayout, 0);
 
     Dialog_Utils::makeLabeledEditField(propLayout, 1,
@@ -82,7 +83,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
                                     m_pInitialL, i18n("&Initial value:"),
                                     m_pInitialLE, attr->getInitialValue());
 
-    m_stereotypeWidget = new UMLStereotypeWidget(m_pAtt);
+    m_stereotypeWidget = new UMLStereotypeWidget();
+    m_stereotypeWidget->setUMLObject(m_pAtt);
     m_stereotypeWidget->addToLayout(propLayout, 3);
 
     m_pKindGB =  new QGroupBox(i18n("Passing Direction"));
@@ -102,7 +104,8 @@ ParameterPropertiesDialog::ParameterPropertiesDialog(QWidget * parent, UMLDoc *
 
     topLayout->addWidget(m_pKindGB);
 
-    m_docWidget = new DocumentationWidget(m_pAtt);
+    m_docWidget = new DocumentationWidget();
+    m_docWidget->setUMLObject(m_pAtt);
     topLayout->addWidget(m_docWidget);
 
     // Check the proper Kind radiobutton.
diff --git a/umbrello/dialogs/selectoperationdialog.cpp b/umbrello/dialogs/selectoperationdialog.cpp
index 4d6733c3df3231005028e28afabc445414cd9070..b1632aa3246a701b464d83bd8fb387b7aa08648d 100644
--- a/umbrello/dialogs/selectoperationdialog.cpp
+++ b/umbrello/dialogs/selectoperationdialog.cpp
@@ -75,8 +75,9 @@ SelectOperationDialog::SelectOperationDialog(UMLView *parent, UMLClassifier * c,
 
     m_pOpAS = new QCheckBox(i18n("Auto increment:"), m_pOpGB);
     mainLayout->addWidget(m_pOpAS, 0, 2);
-    connect(m_pOpAS, &QCheckBox::toggled, this, &SelectOperationDialog::slotAutoIncrementChecked);
+    connect(m_pOpAS, SIGNAL(toggled(bool)), this, SLOT(slotAutoIncrementChecked(bool)));
     m_pOpAS->setEnabled(enableAutoIncrement);
+
     m_pOpRB = new QLabel(i18n("Class operation:"), m_pOpGB);
     mainLayout->addWidget(m_pOpRB, 1, 0);
 
@@ -85,18 +86,18 @@ SelectOperationDialog::SelectOperationDialog(UMLView *parent, UMLClassifier * c,
     m_pOpCB->setCompletionMode(KGlobalSettings::CompletionPopup);
 #endif
     m_pOpCB->setDuplicatesEnabled(false); // only allow one of each type in box
-    connect(m_pOpCB, static_cast<void (KComboBox::*)(int)> (&KComboBox::currentIndexChanged), this, &SelectOperationDialog::slotIndexChanged);
+    connect(m_pOpCB, SIGNAL(currentIndexChanged(int)), this, SLOT(slotIndexChanged(int)));
     mainLayout->addWidget(m_pOpCB, 1, 1, 1, 2);
 
     m_newOperationButton = new QPushButton(i18n("New Operation..."), m_pOpGB);
-    connect(m_newOperationButton, &QPushButton::clicked, this, &SelectOperationDialog::slotNewOperation);
+    connect(m_newOperationButton, SIGNAL(clicked()), this, SLOT(slotNewOperation()));
     mainLayout->addWidget(m_newOperationButton, 1, 3);
 
     m_pCustomRB = new QLabel(i18n("Custom operation:"), m_pOpGB);
     mainLayout->addWidget(m_pCustomRB, 2, 0);
 
     m_pOpLE = new KLineEdit(m_pOpGB);
-    connect(m_pOpLE, &KLineEdit::textChanged, this, &SelectOperationDialog::slotTextChanged);
+    connect(m_pOpLE, SIGNAL(textChanged(QString)), this, SLOT(slotTextChanged(QString)));
     mainLayout->addWidget(m_pOpLE, 2, 1, 1, 2);
     setupOperationsList();
     enableButtonOk(false);
diff --git a/umbrello/dialogs/settingsdialog.cpp b/umbrello/dialogs/settingsdialog.cpp
index d7b118e34224c3f3f0ada6ed17a7189a12185a9d..5628016e91d1553741a40d9c45da7823e06a26e1 100644
--- a/umbrello/dialogs/settingsdialog.cpp
+++ b/umbrello/dialogs/settingsdialog.cpp
@@ -61,9 +61,9 @@ SettingsDialog::SettingsDialog(QWidget * parent, Settings::OptionState *state)
     setupCodeGenPage();
     setupCodeViewerPage(state->codeViewerState);
     setupAutoLayoutPage();
-    connect(this, &SettingsDialog::okClicked, this, &SettingsDialog::slotOk);
-    connect(this, &SettingsDialog::applyClicked, this, &SettingsDialog::slotApply);
-    connect(this, &SettingsDialog::defaultClicked, this, &SettingsDialog::slotDefault);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
+    connect(this, SIGNAL(defaultClicked()), this, SLOT(slotDefault()));
 }
 
 SettingsDialog::~SettingsDialog()
@@ -183,12 +183,12 @@ void SettingsDialog::setupUIPage()
     m_UiWidgets.useFillColorCB->setChecked(m_pOptionState->uiState.useFillColor);
 
     //connect button signals up
-    connect(m_UiWidgets.textColorCB, &QCheckBox::toggled, this, &SettingsDialog::slotTextCBChecked);
-    connect(m_UiWidgets.lineColorCB, &QCheckBox::toggled, this, &SettingsDialog::slotLineCBChecked);
-    connect(m_UiWidgets.fillColorCB, &QCheckBox::toggled, this, &SettingsDialog::slotFillCBChecked);
-    connect(m_UiWidgets.gridColorCB, &QCheckBox::toggled, this, &SettingsDialog::slotGridCBChecked);
-    connect(m_UiWidgets.bgColorCB, &QCheckBox::toggled, this, &SettingsDialog::slotBgCBChecked);
-    connect(m_UiWidgets.lineWidthCB, &QCheckBox::toggled, this, &SettingsDialog::slotLineWidthCBChecked);
+    connect(m_UiWidgets.textColorCB, SIGNAL(toggled(bool)), this, SLOT(slotTextCBChecked(bool)));
+    connect(m_UiWidgets.lineColorCB, SIGNAL(toggled(bool)), this, SLOT(slotLineCBChecked(bool)));
+    connect(m_UiWidgets.fillColorCB, SIGNAL(toggled(bool)), this, SLOT(slotFillCBChecked(bool)));
+    connect(m_UiWidgets.gridColorCB, SIGNAL(toggled(bool)), this, SLOT(slotGridCBChecked(bool)));
+    connect(m_UiWidgets.bgColorCB, SIGNAL(toggled(bool)), this, SLOT(slotBgCBChecked(bool)));
+    connect(m_UiWidgets.lineWidthCB, SIGNAL(toggled(bool)), this, SLOT(slotLineWidthCBChecked(bool)));
 
     //TODO Once the new scene is complete, so something better, it does not worth it for now
     if (m_UiWidgets.textColorB->color() == TEXT_COLOR) {
@@ -251,7 +251,7 @@ void SettingsDialog::setupCodeImportPage()
 void SettingsDialog::setupCodeGenPage()
 {
     m_pCodeGenPage = new CodeGenOptionsPage;
-    connect(m_pCodeGenPage, &CodeGenOptionsPage::languageChanged, this, &SettingsDialog::slotApply);
+    connect(m_pCodeGenPage, SIGNAL(languageChanged()), this, SLOT(slotApply()));
 
     pageCodeGen = createPage(i18n("Code Generation"), i18n("Code Generation Settings"),
                              Icon_Utils::it_Properties_CodeGeneration, m_pCodeGenPage);
diff --git a/umbrello/dialogs/singlepagedialogbase.cpp b/umbrello/dialogs/singlepagedialogbase.cpp
index a6a922f07c494d3a6650f375776907804244d0e3..6a81b615afb5afdcd6d597ce9da657a4861d159f 100644
--- a/umbrello/dialogs/singlepagedialogbase.cpp
+++ b/umbrello/dialogs/singlepagedialogbase.cpp
@@ -39,7 +39,7 @@ SinglePageDialogBase::SinglePageDialogBase(QWidget *parent, bool withApplyButton
     if (withSearchButton)
         m_buttonBox->button(QDialogButtonBox::Ok)->setText(i18n("Search"));
 
-    connect(m_buttonBox, &QDialogButtonBox::clicked, this, &SinglePageDialogBase::slotClicked);
+    connect(m_buttonBox, SIGNAL(clicked(QAbstractButton*)), this, SLOT(slotClicked(QAbstractButton*)));
     mainWidget();
 }
 #else
@@ -62,8 +62,8 @@ SinglePageDialogBase::SinglePageDialogBase(QWidget *parent, bool withApplyButton
     setModal(true);
     showButtonSeparator(true);
 
-    connect(this, &SinglePageDialogBase::okClicked, this, &SinglePageDialogBase::slotOk);
-    connect(this, &SinglePageDialogBase::applyClicked, this, &SinglePageDialogBase::slotApply);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
 }
 #endif
 
diff --git a/umbrello/dialogs/statedialog.cpp b/umbrello/dialogs/statedialog.cpp
index 6391f8e66aae25111aca3d5516dccb14623d62ec..30f6de621a2da822df5020bea72f212eeb3dce07 100644
--- a/umbrello/dialogs/statedialog.cpp
+++ b/umbrello/dialogs/statedialog.cpp
@@ -42,8 +42,8 @@ StateDialog::StateDialog(QWidget * parent, StateWidget * pWidget)
 {
     setCaption(i18n("Properties"));
     setupPages();
-    connect(this, &StateDialog::okClicked, this, &StateDialog::slotOk);
-    connect(this, &StateDialog::applyClicked, this, &StateDialog::slotApply);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
 }
 
 /**
diff --git a/umbrello/dialogs/umlattributedialog.cpp b/umbrello/dialogs/umlattributedialog.cpp
index a6da94a91ca5f3c3b3006d943b52f2e15cf34925..33ba6995d0253224bee7a2fc1d153cc7fac9dce8 100644
--- a/umbrello/dialogs/umlattributedialog.cpp
+++ b/umbrello/dialogs/umlattributedialog.cpp
@@ -14,21 +14,14 @@
 // app includes
 #include "attribute.h"
 #include "classifier.h"
-#include "documentationwidget.h"
 #include "template.h"
 #include "umldoc.h"
 #include "uml.h"
-#include "umldatatypewidget.h"
-#include "umlstereotypewidget.h"
-#include "visibilityenumwidget.h"
 #include "dialog_utils.h"
 #include "object_factory.h"
 #include "import_utils.h"
 
 // kde includes
-#include <klineedit.h>
-#include <kcombobox.h>
-#include <kcompletion.h>
 #include <KLocalizedString>
 #include <KMessageBox>
 
@@ -42,11 +35,14 @@
 #include <QRadioButton>
 #include <QVBoxLayout>
 
-UMLAttributeDialog::UMLAttributeDialog(QWidget * pParent, UMLAttribute * pAttribute)
+UMLAttributeDialog::UMLAttributeDialog(QWidget *pParent, UMLAttribute *pAttribute)
   : SinglePageDialogBase(pParent)
+  , ui(new Ui::UMLAttributeDialog)
+  , m_pAttribute(pAttribute)
 {
     setCaption(i18n("Attribute Properties"));
-    m_pAttribute = pAttribute;
+    activeLanguage = UMLApp::app()->activeLanguage();
+    ui->setupUi(mainWidget());
     setupDialog();
 }
 
@@ -59,45 +55,19 @@ UMLAttributeDialog::~UMLAttributeDialog()
  */
 void UMLAttributeDialog::setupDialog()
 {
-    int margin = fontMetrics().height();
-
-    QFrame * frame = new QFrame(this);
-    setMainWidget(frame);
-    QVBoxLayout * mainLayout = new QVBoxLayout(frame);
-
-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
-    QGridLayout * valuesLayout = new QGridLayout(m_pValuesGB);
-    valuesLayout->setMargin(margin);
-    valuesLayout->setSpacing(10);
-
-    m_datatypeWidget = new UMLDatatypeWidget(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
-    m_datatypeWidget->addToLayout(valuesLayout, 0);
-
-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
-                                    m_pNameL, i18nc("attribute name", "&Name:"),
-                                    m_pNameLE, m_pAttribute->name());
-
-    Dialog_Utils::makeLabeledEditField(valuesLayout, 2,
-                                    m_pInitialL, i18n("&Initial value:"),
-                                    m_pInitialLE, m_pAttribute->getInitialValue());
-
-    m_stereotypeWidget = new UMLStereotypeWidget(m_pAttribute);
-    m_stereotypeWidget->addToLayout(valuesLayout, 3);
-
-    m_pStaticCB = new QCheckBox(i18n("Classifier &scope (\"static\")"), m_pValuesGB);
-    m_pStaticCB->setChecked(m_pAttribute->isStatic());
-    valuesLayout->addWidget(m_pStaticCB, 4, 0);
-
-    mainLayout->addWidget(m_pValuesGB);
-    m_visibilityEnumWidget = new VisibilityEnumWidget(m_pAttribute, this);
-    m_visibilityEnumWidget->addToLayout(mainLayout);
-
-    m_docWidget = new DocumentationWidget(m_pAttribute, this);
-    mainLayout->addWidget(m_docWidget);
-
-    m_pNameLE->setFocus();
-    connect(m_pNameLE, &KLineEdit::textChanged, this, &UMLAttributeDialog::slotNameChanged);
-    slotNameChanged(m_pNameLE->text());
+    ui->dataTypeWidget->setClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
+    if(activeLanguage == Uml::ProgrammingLanguage::Cpp){
+        ui->typeQualifiersWidget->setUMLClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
+        ui->typeModifierWidget->setUMLClassifierItem(dynamic_cast<UMLClassifierListItem*>(m_pAttribute));
+        ui->cb_classifierScopeStatic->setVisible(true);
+    }else{
+        ui->cb_classifierScopeStatic->setVisible(false);
+        ui->typeModifierWidget->setVisible(false);
+        ui->typeQualifiersWidget->setVisible(false);
+    }
+    ui->stereotypeWidget->setUMLObject(m_pAttribute);
+    ui->visibilityWidget->setUMLObject(m_pAttribute);
+    ui->documentationWidget->setUMLObject(m_pAttribute);
 }
 
 void UMLAttributeDialog::slotNameChanged(const QString &_text)
@@ -111,11 +81,11 @@ void UMLAttributeDialog::slotNameChanged(const QString &_text)
  */
 bool UMLAttributeDialog::apply()
 {
-    QString name = m_pNameLE->text();
+    QString name = ui->tb_name->text();
     if (name.isEmpty()) {
         KMessageBox::error(this, i18n("You have entered an invalid attribute name."),
                            i18n("Attribute Name Invalid"), 0);
-        m_pNameLE->setText(m_pAttribute->name());
+        ui->tb_name->setText(m_pAttribute->name());
         return false;
     }
     UMLClassifier * pConcept = dynamic_cast<UMLClassifier *>(m_pAttribute->parent());
@@ -123,21 +93,24 @@ bool UMLAttributeDialog::apply()
     if (o && o != m_pAttribute) {
         KMessageBox::error(this, i18n("The attribute name you have chosen is already being used in this operation."),
                            i18n("Attribute Name Not Unique"), 0);
-        m_pNameLE->setText(m_pAttribute->name());
+        ui->tb_name->setText(m_pAttribute->name());
         return false;
     }
     m_pAttribute->setName(name);
-    m_visibilityEnumWidget->apply();
+    ui->visibilityWidget->apply();
 
     // Set the scope as the default in the option state
     Settings::optionState().classState.defaultAttributeScope = m_pAttribute->visibility();
 
-    m_pAttribute->setInitialValue(m_pInitialLE->text());
-    m_stereotypeWidget->apply();
-    m_pAttribute->setStatic(m_pStaticCB->isChecked());
-
-    m_datatypeWidget->apply();
-    m_docWidget->apply();
+    m_pAttribute->setInitialValue(ui->tb_initialValue->text());
+    ui->stereotypeWidget->apply();
+    ui->documentationWidget->apply();
+    if(activeLanguage == Uml::ProgrammingLanguage::Cpp){
+        ui->typeQualifiersWidget->apply();
+        ui->typeModifierWidget->apply();
+        m_pAttribute->setStatic(ui->cb_classifierScopeStatic->isChecked());
+    }
+    ui->dataTypeWidget->apply();
 
     return true;
 }
diff --git a/umbrello/dialogs/umlattributedialog.h b/umbrello/dialogs/umlattributedialog.h
index 7e0166036cfed65941bfa5f6081916cfe35263de..c02ee41ec29daf84beb54d8327729700172ff694 100644
--- a/umbrello/dialogs/umlattributedialog.h
+++ b/umbrello/dialogs/umlattributedialog.h
@@ -12,17 +12,8 @@
 #define UMLATTRIBUTEDIALOG_H
 
 #include "singlepagedialogbase.h"
-
-class DocumentationWidget;
-class QCheckBox;
-class QGroupBox;
-class QRadioButton;
-class QLabel;
-class UMLAttribute;
-class KLineEdit;
-class UMLDatatypeWidget;
-class UMLStereotypeWidget;
-class VisibilityEnumWidget;
+#include "basictypes.h"
+#include "ui_umlattributedialog.h"
 
 /**
  * @author Paul Hensgen
@@ -35,6 +26,10 @@ public:
     UMLAttributeDialog(QWidget * pParent, UMLAttribute * pAttribute);
     ~UMLAttributeDialog();
 
+private:
+    Ui::UMLAttributeDialog *ui;
+    Uml::ProgrammingLanguage::Enum activeLanguage;
+
 protected:
     void setupDialog();
     bool apply();
@@ -44,18 +39,9 @@ protected:
      */
     UMLAttribute * m_pAttribute;
 
-    //GUI Widgets
-    QGroupBox * m_pValuesGB;
-    QLabel * m_pNameL, * m_pInitialL;
-    KLineEdit * m_pNameLE, * m_pInitialLE;
-    QCheckBox* m_pStaticCB;
-    UMLDatatypeWidget *m_datatypeWidget;
-    UMLStereotypeWidget *m_stereotypeWidget;
-    VisibilityEnumWidget *m_visibilityEnumWidget;
-    DocumentationWidget *m_docWidget;
-
 public slots:
     void slotNameChanged(const QString &);
+
 };
 
 #endif
diff --git a/umbrello/dialogs/umlattributedialog.ui b/umbrello/dialogs/umlattributedialog.ui
new file mode 100644
index 0000000000000000000000000000000000000000..40c81ef4fcd261c2bf52573e02997a8d9c319944
--- /dev/null
+++ b/umbrello/dialogs/umlattributedialog.ui
@@ -0,0 +1,145 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>UMLAttributeDialog</class>
+ <widget class="QWidget" name="UMLAttributeDialog">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>464</width>
+    <height>300</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QVBoxLayout" name="verticalLayout_3">
+   <item>
+    <widget class="QLabel" name="label">
+     <property name="text">
+      <string>General Properties</string>
+     </property>
+     <property name="alignment">
+      <set>Qt::AlignCenter</set>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <layout class="QHBoxLayout" name="horizontalLayout_3">
+     <item>
+      <layout class="QVBoxLayout" name="verticalLayout">
+       <item>
+        <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
+       </item>
+       <item>
+        <layout class="QHBoxLayout" name="horizontalLayout_2">
+         <item>
+          <widget class="QLabel" name="label_3">
+           <property name="text">
+            <string>Name:</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="tb_name"/>
+         </item>
+        </layout>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <layout class="QVBoxLayout" name="verticalLayout_2">
+       <item>
+        <widget class="UMLTypeModifierWidget" name="typeModifierWidget" native="true"/>
+       </item>
+       <item>
+        <layout class="QHBoxLayout" name="horizontalLayout">
+         <item>
+          <widget class="QLabel" name="label_4">
+           <property name="text">
+            <string>Initial Value:</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="tb_initialValue"/>
+         </item>
+        </layout>
+       </item>
+      </layout>
+     </item>
+    </layout>
+   </item>
+   <item>
+    <layout class="QHBoxLayout" name="horizontalLayout_5">
+     <item>
+      <widget class="VisibilityEnumWidget" name="visibilityWidget" native="true"/>
+     </item>
+     <item>
+      <widget class="UmlTypeQualifiersWidget" name="typeQualifiersWidget" native="true"/>
+     </item>
+    </layout>
+   </item>
+   <item>
+    <widget class="QCheckBox" name="cb_classifierScopeStatic">
+     <property name="text">
+      <string>Classifier Scope(&quot;static&quot;)</string>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true">
+     <property name="sizePolicy">
+      <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
+       <horstretch>0</horstretch>
+       <verstretch>0</verstretch>
+      </sizepolicy>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
+   </item>
+  </layout>
+ </widget>
+ <customwidgets>
+  <customwidget>
+   <class>UMLDatatypeWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/umldatatypewidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>UMLStereotypeWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/umlstereotypewidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>VisibilityEnumWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/visibilityenumwidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>DocumentationWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/documentationwidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>UmlTypeQualifiersWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/umltypequalifierswidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>UMLTypeModifierWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/umltypemodifierwidget.h</header>
+   <container>1</container>
+  </customwidget>
+ </customwidgets>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/umbrello/dialogs/umlentityattributedialog.cpp b/umbrello/dialogs/umlentityattributedialog.cpp
index ae2df442d4948a283f31828871e18a2e51f2a027..4c27b0f80fca535cbce572e1b8d8999df6727410 100644
--- a/umbrello/dialogs/umlentityattributedialog.cpp
+++ b/umbrello/dialogs/umlentityattributedialog.cpp
@@ -43,9 +43,11 @@
 
 UMLEntityAttributeDialog::UMLEntityAttributeDialog(QWidget * pParent, UMLEntityAttribute * pEntityAttribute)
   : SinglePageDialogBase(pParent)
+  , ui(new Ui::UMLEntityAttributeDialog)
+  , m_pEntityAttribute(pEntityAttribute)
 {
     setCaption(i18n("Entity Attribute Properties"));
-    m_pEntityAttribute = pEntityAttribute;
+    ui->setupUi(mainWidget());
     setupDialog();
 }
 
@@ -58,69 +60,19 @@ UMLEntityAttributeDialog::~UMLEntityAttributeDialog()
  */
 void UMLEntityAttributeDialog::setupDialog()
 {
-    int margin = fontMetrics().height();
-    QFrame *frame = new QFrame(this);
-    setMainWidget(frame);
-    QVBoxLayout * mainLayout = new QVBoxLayout(frame);
-
-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
-    QGridLayout * valuesLayout = new QGridLayout(m_pValuesGB);
-    valuesLayout->setMargin(margin);
-    valuesLayout->setSpacing(10);
-
-    m_datatypeWidget = new UMLDatatypeWidget(m_pEntityAttribute);
-    m_datatypeWidget->addToLayout(valuesLayout, 0);
-
-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
-                                    m_pNameL, i18nc("name of entity attribute", "&Name:"),
-                                    m_pNameLE, m_pEntityAttribute->name());
-
-    Dialog_Utils::makeLabeledEditField(valuesLayout, 2,
-                                    m_pInitialL, i18n("&Default value:"),
-                                    m_pInitialLE, m_pEntityAttribute->getInitialValue());
-
-    m_stereotypeWidget = new UMLStereotypeWidget(m_pEntityAttribute);
-    m_stereotypeWidget->addToLayout(valuesLayout, 3);
-
-    Dialog_Utils::makeLabeledEditField(valuesLayout, 4,
-                                    m_pValuesL, i18n("Length/Values:"),
-                                    m_pValuesLE, m_pEntityAttribute->getValues());
-
-    m_pAutoIncrementCB = new QCheckBox(i18n("&Auto increment"), m_pValuesGB);
-    m_pAutoIncrementCB->setChecked(m_pEntityAttribute->getAutoIncrement());
-    valuesLayout->addWidget(m_pAutoIncrementCB, 5, 0);
-
-    m_pNullCB = new QCheckBox(i18n("Allow &null"), m_pValuesGB);
-    m_pNullCB->setChecked(m_pEntityAttribute->getNull());
-    valuesLayout->addWidget(m_pNullCB, 6, 0);
+    ui->dataTypeWidget->setEntityAttribute(m_pEntityAttribute);
+    ui->stereotypeWidget->setUMLObject(m_pEntityAttribute);
+    ui->ck_autoIncrement->setChecked(m_pEntityAttribute->getAutoIncrement());
+    ui->ck_allowNull->setChecked(m_pEntityAttribute->getNull());
 
     // enable/disable isNull depending on the state of Auto Increment Check Box
-    slotAutoIncrementStateChanged(m_pAutoIncrementCB->isChecked());
-
-    m_pAttributesL = new QLabel(i18n("Attributes:"), m_pValuesGB);
-    valuesLayout->addWidget(m_pAttributesL, 7, 0);
-
-    m_pAttributesCB = new KComboBox(true, m_pValuesGB);
-#if QT_VERSION < 0x050000
-    m_pAttributesCB->setCompletionMode(KGlobalSettings::CompletionPopup);
-#endif
-    valuesLayout->addWidget(m_pAttributesCB, 7, 1);
-    m_pAttributesL->setBuddy(m_pAttributesCB);
+    slotAutoIncrementStateChanged(ui->ck_autoIncrement->isChecked());
 
     insertAttribute(m_pEntityAttribute->getAttributes());
-    insertAttribute(QString::fromLatin1("binary"), m_pAttributesCB->count());
-    insertAttribute(QString::fromLatin1("unsigned"), m_pAttributesCB->count());
-    insertAttribute(QString::fromLatin1("unsigned zerofill"), m_pAttributesCB->count());
-
-    mainLayout->addWidget(m_pValuesGB);
-
-    m_pScopeGB = new QGroupBox(i18n("Indexing"), frame);
-    QHBoxLayout* scopeLayout = new QHBoxLayout(m_pScopeGB);
-    scopeLayout->setMargin(margin);
-
-    m_pNoneRB = new QRadioButton(i18n("&Not Indexed"), m_pScopeGB);
-    scopeLayout->addWidget(m_pNoneRB);
-
+    insertAttribute(QString::fromLatin1("binary"), ui->cb_attributesTypes->count());
+    insertAttribute(QString::fromLatin1("unsigned"), ui->cb_attributesTypes->count());
+    insertAttribute(QString::fromLatin1("unsigned zerofill"), ui->cb_attributesTypes->count());
+#if 0
     /*
     m_pPublicRB = new QRadioButton(i18n("&Primary"), m_pScopeGB);
     scopeLayout->addWidget(m_pPublicRB);
@@ -129,10 +81,6 @@ void UMLEntityAttributeDialog::setupDialog()
     scopeLayout->addWidget(m_pProtectedRB);
     */
 
-    m_pPrivateRB = new QRadioButton(i18n("&Indexed"), m_pScopeGB);
-    scopeLayout->addWidget(m_pPrivateRB);
-
-    mainLayout->addWidget(m_pScopeGB);
     UMLEntityAttribute::DBIndex_Type scope = m_pEntityAttribute->indexType();
 
     /*
@@ -149,9 +97,14 @@ void UMLEntityAttributeDialog::setupDialog()
     }
 
     m_pNameLE->setFocus();
-    connect(m_pNameLE, &KLineEdit::textChanged, this, &UMLEntityAttributeDialog::slotNameChanged);
-    connect(m_pAutoIncrementCB, &QCheckBox::clicked, this, &UMLEntityAttributeDialog::slotAutoIncrementStateChanged);
+    connect(m_pNameLE, SIGNAL(textChanged(QString)), SLOT(slotNameChanged(QString)));
+    connect(m_pAutoIncrementCB, SIGNAL(clicked(bool)), this, SLOT(slotAutoIncrementStateChanged(bool)));
     slotNameChanged(m_pNameLE->text());
+#endif
+    ui->tb_name->setFocus();
+    connect(ui->tb_name, &QLineEdit::textChanged, this, &UMLEntityAttributeDialog::slotNameChanged);
+    connect(ui->ck_autoIncrement, &QCheckBox::clicked, this, &UMLEntityAttributeDialog::slotAutoIncrementStateChanged);
+    slotNameChanged(ui->tb_name->text());
 }
 
 void UMLEntityAttributeDialog::slotNameChanged(const QString &_text)
@@ -165,11 +118,11 @@ void UMLEntityAttributeDialog::slotNameChanged(const QString &_text)
  */
 bool UMLEntityAttributeDialog::apply()
 {
-    QString name = m_pNameLE->text();
+    QString name = ui->tb_name->text();
     if (name.isEmpty()) {
         KMessageBox::error(this, i18n("You have entered an invalid entity attribute name."),
                            i18n("Entity Attribute Name Invalid"), 0);
-        m_pNameLE->setText(m_pEntityAttribute->name());
+        ui->tb_name->setText(m_pEntityAttribute->name());
         return false;
     }
     UMLClassifier * pConcept = dynamic_cast<UMLClassifier *>(m_pEntityAttribute->parent());
@@ -177,17 +130,17 @@ bool UMLEntityAttributeDialog::apply()
     if (o && o != m_pEntityAttribute) {
         KMessageBox::error(this, i18n("The entity attribute name you have chosen is already being used in this operation."),
                            i18n("Entity Attribute Name Not Unique"), 0);
-        m_pNameLE->setText(m_pEntityAttribute->name());
+        ui->tb_name->setText(m_pEntityAttribute->name());
         return false;
     }
     m_pEntityAttribute->setName(name);
-    m_pEntityAttribute->setInitialValue(m_pInitialLE->text());
-    m_stereotypeWidget->apply();
-    m_pEntityAttribute->setValues(m_pValuesLE->text());
-    m_pEntityAttribute->setAttributes(m_pAttributesCB->currentText());
-    m_pEntityAttribute->setAutoIncrement(m_pAutoIncrementCB->isChecked());
-    m_pEntityAttribute->setNull(m_pNullCB->isChecked());
-
+    m_pEntityAttribute->setInitialValue(ui->tb_defaultValue->text());
+    ui->stereotypeWidget->apply();
+    m_pEntityAttribute->setValues(ui->tb_lenghtValues->text());
+    m_pEntityAttribute->setAttributes(ui->cb_attributesTypes->currentText());
+    m_pEntityAttribute->setAutoIncrement(ui->ck_autoIncrement->isChecked());
+    m_pEntityAttribute->setNull(ui->ck_allowNull->isChecked());
+#if 0
     /*
     if (m_pPublicRB->isChecked()) {
         m_pEntityAttribute->setIndexType(UMLEntityAttribute::Primary);
@@ -201,8 +154,8 @@ bool UMLEntityAttributeDialog::apply()
     } else {
         m_pEntityAttribute->setIndexType(UMLEntityAttribute::None);
     }
-
-    m_datatypeWidget->apply();
+#endif
+    ui->dataTypeWidget->apply();
     return true;
 }
 
@@ -211,8 +164,7 @@ bool UMLEntityAttributeDialog::apply()
  */
 void UMLEntityAttributeDialog::insertAttribute(const QString& type, int index)
 {
-    m_pAttributesCB->insertItem(index, type);
-    m_pAttributesCB->completionObject()->addItem(type);
+    ui->cb_attributesTypes->insertItem(index, type);
 }
 
 /**
@@ -221,10 +173,10 @@ void UMLEntityAttributeDialog::insertAttribute(const QString& type, int index)
 void UMLEntityAttributeDialog::slotAutoIncrementStateChanged(bool checked)
 {
     if (checked == true) {
-        m_pNullCB->setChecked(false);
-        m_pNullCB->setEnabled(false);
+        ui->ck_allowNull->setChecked(false);
+        ui->ck_allowNull->setEnabled(false);
     } else if (checked == false) {
-        m_pNullCB->setEnabled(true);
+        ui->ck_allowNull->setEnabled(true);
     }
 
 }
diff --git a/umbrello/dialogs/umlentityattributedialog.h b/umbrello/dialogs/umlentityattributedialog.h
index 3233dea2f5a08a1b8fdaf5a0adc63418a0df96f5..865909cf0fc932ca71171479c8351738d8330f06 100644
--- a/umbrello/dialogs/umlentityattributedialog.h
+++ b/umbrello/dialogs/umlentityattributedialog.h
@@ -12,6 +12,7 @@
 #define UMLENTITYATTRIBUTEDIALOG_H
 
 #include "singlepagedialogbase.h"
+#include "ui_umlentityattributedialog.h"
 
 class QCheckBox;
 class QGroupBox;
@@ -34,6 +35,9 @@ public:
     UMLEntityAttributeDialog(QWidget* pParent, UMLEntityAttribute* pEntityAttribute);
     ~UMLEntityAttributeDialog();
 
+private:
+    Ui::UMLEntityAttributeDialog *ui;
+
 protected:
 
     void setupDialog();
@@ -47,18 +51,6 @@ protected:
      */
     UMLEntityAttribute * m_pEntityAttribute;
 
-    //GUI Widgets
-    QGroupBox * m_pAttsGB, * m_pValuesGB;
-    QGroupBox * m_pScopeGB;
-    QRadioButton * m_pPublicRB, * m_pPrivateRB,  * m_pProtectedRB, * m_pNoneRB;
-    QLabel * m_pNameL, * m_pInitialL, * m_pValuesL, * m_pAttributesL ;
-    KComboBox * m_pAttributesCB;
-    KLineEdit * m_pNameLE, * m_pInitialLE, * m_pValuesLE;
-    QCheckBox* m_pAutoIncrementCB;
-    QCheckBox* m_pNullCB;
-    UMLDatatypeWidget *m_datatypeWidget;
-    UMLStereotypeWidget *m_stereotypeWidget;
-
 public slots:
     void slotAutoIncrementStateChanged(bool checked);
     void slotNameChanged(const QString &);
diff --git a/umbrello/dialogs/umlentityattributedialog.ui b/umbrello/dialogs/umlentityattributedialog.ui
new file mode 100644
index 0000000000000000000000000000000000000000..dc9b7b03d7ad0cfb0665e1c585888c874d807cd0
--- /dev/null
+++ b/umbrello/dialogs/umlentityattributedialog.ui
@@ -0,0 +1,137 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>UMLEntityAttributeDialog</class>
+ <widget class="QWidget" name="UMLEntityAttributeDialog">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>286</width>
+    <height>386</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <property name="layoutDirection">
+   <enum>Qt::LeftToRight</enum>
+  </property>
+  <layout class="QGridLayout" name="gridLayout">
+   <item row="4" column="3">
+    <widget class="QLineEdit" name="tb_defaultValue"/>
+   </item>
+   <item row="8" column="0" colspan="4">
+    <widget class="QCheckBox" name="ck_allowNull">
+     <property name="text">
+      <string>Allow Null</string>
+     </property>
+    </widget>
+   </item>
+   <item row="0" column="0" colspan="4">
+    <widget class="QLabel" name="label">
+     <property name="layoutDirection">
+      <enum>Qt::LeftToRight</enum>
+     </property>
+     <property name="text">
+      <string>General Properties</string>
+     </property>
+     <property name="alignment">
+      <set>Qt::AlignCenter</set>
+     </property>
+    </widget>
+   </item>
+   <item row="3" column="3">
+    <widget class="QLineEdit" name="tb_name"/>
+   </item>
+   <item row="6" column="0" colspan="3">
+    <widget class="QLabel" name="label_4">
+     <property name="text">
+      <string>Lenght/Values:</string>
+     </property>
+    </widget>
+   </item>
+   <item row="10" column="0" colspan="4">
+    <widget class="QGroupBox" name="groupBox">
+     <property name="title">
+      <string>Indexing</string>
+     </property>
+     <layout class="QHBoxLayout" name="horizontalLayout_5">
+      <item>
+       <widget class="QRadioButton" name="radioButton">
+        <property name="text">
+         <string>Not Inde&amp;xed</string>
+        </property>
+        <property name="checked">
+         <bool>true</bool>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <widget class="QRadioButton" name="radioButton_2">
+        <property name="text">
+         <string>Indexed</string>
+        </property>
+       </widget>
+      </item>
+     </layout>
+    </widget>
+   </item>
+   <item row="3" column="0">
+    <widget class="QLabel" name="label_2">
+     <property name="text">
+      <string>Name:</string>
+     </property>
+    </widget>
+   </item>
+   <item row="4" column="0" colspan="3">
+    <widget class="QLabel" name="label_3">
+     <property name="text">
+      <string>Default Value:</string>
+     </property>
+    </widget>
+   </item>
+   <item row="1" column="0" colspan="4">
+    <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
+   </item>
+   <item row="9" column="0" colspan="2">
+    <widget class="QLabel" name="label_5">
+     <property name="text">
+      <string>Attributes:</string>
+     </property>
+    </widget>
+   </item>
+   <item row="9" column="2" colspan="2">
+    <widget class="QComboBox" name="cb_attributesTypes"/>
+   </item>
+   <item row="7" column="0" colspan="4">
+    <widget class="QCheckBox" name="ck_autoIncrement">
+     <property name="text">
+      <string>Auto Increment:</string>
+     </property>
+    </widget>
+   </item>
+   <item row="5" column="0" colspan="4">
+    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true"/>
+   </item>
+   <item row="6" column="3">
+    <widget class="QLineEdit" name="tb_lenghtValues"/>
+   </item>
+  </layout>
+ </widget>
+ <customwidgets>
+  <customwidget>
+   <class>UMLDatatypeWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/umldatatypewidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>UMLStereotypeWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/umlstereotypewidget.h</header>
+   <container>1</container>
+  </customwidget>
+ </customwidgets>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/umbrello/dialogs/umlenumliteraldialog.cpp b/umbrello/dialogs/umlenumliteraldialog.cpp
index 82c5d97dedb45aa1b87b446d286786883ca8d445..f53cae1a39d88a2ef6fa4444e70bb70b0bd6a99d 100644
--- a/umbrello/dialogs/umlenumliteraldialog.cpp
+++ b/umbrello/dialogs/umlenumliteraldialog.cpp
@@ -66,7 +66,7 @@ void UMLEnumLiteralDialog::setupDialog()
     mainLayout->addWidget(m_pValuesGB);
 
     m_pNameLE->setFocus();
-    connect(m_pNameLE, &KLineEdit::textChanged, this, &UMLEnumLiteralDialog::slotNameChanged);
+    connect(m_pNameLE, SIGNAL(textChanged(QString)), SLOT(slotNameChanged(QString)));
     slotNameChanged(m_pNameLE->text());
 }
 
diff --git a/umbrello/dialogs/umlforeignkeyconstraintdialog.cpp b/umbrello/dialogs/umlforeignkeyconstraintdialog.cpp
index 6bf0846e25ce4fbc917e437af72a7737d33567fc..786494337117f6f5d8bc497968debdb8a052bbdc 100644
--- a/umbrello/dialogs/umlforeignkeyconstraintdialog.cpp
+++ b/umbrello/dialogs/umlforeignkeyconstraintdialog.cpp
@@ -63,8 +63,8 @@ UMLForeignKeyConstraintDialog::UMLForeignKeyConstraintDialog(QWidget* parent, UM
     setupGeneralPage();
     setupColumnPage();
 
-    connect(this, &UMLForeignKeyConstraintDialog::okClicked, this, &UMLForeignKeyConstraintDialog::slotOk);
-    connect(this, &UMLForeignKeyConstraintDialog::applyClicked, this, &UMLForeignKeyConstraintDialog::slotApply);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
 }
 
 /**
@@ -276,7 +276,7 @@ void UMLForeignKeyConstraintDialog::setupGeneralPage()
     m_GeneralWidgets.updateActionCB->setCurrentIndex(m_pForeignKeyConstraint->getUpdateAction());
     m_GeneralWidgets.deleteActionCB->setCurrentIndex(m_pForeignKeyConstraint->getDeleteAction());
 
-    connect(m_GeneralWidgets.referencedEntityCB,static_cast<void (KComboBox::*)(int)> (&KComboBox::activated), this, &UMLForeignKeyConstraintDialog::slotReferencedEntityChanged);
+    connect(m_GeneralWidgets.referencedEntityCB, SIGNAL(activated(int)), this, SLOT(slotReferencedEntityChanged(int)));
 }
 
 /**
@@ -318,9 +318,9 @@ void UMLForeignKeyConstraintDialog::setupColumnPage()
 #if QT_VERSION >= 0x050000
     QDialogButtonBox* buttonBox = new QDialogButtonBox();
     m_ColumnWidgets.addPB = buttonBox->addButton(i18n("&Add"), QDialogButtonBox::ActionRole);
-    connect(m_ColumnWidgets.addPB, &QPushButton::clicked, this, &UMLForeignKeyConstraintDialog::slotAddPair);
+    connect(m_ColumnWidgets.addPB, SIGNAL(clicked()), this, SLOT(slotAddPair()));
     m_ColumnWidgets.removePB = buttonBox->addButton(i18n("&Delete"), QDialogButtonBox::ActionRole);
-    connect(m_ColumnWidgets.removePB, &QPushButton::clicked, this, &UMLForeignKeyConstraintDialog::slotDeletePair);
+    connect(m_ColumnWidgets.removePB, SIGNAL(clicked()), this, SLOT(slotDeletePair()));
 #else
     KDialogButtonBox* buttonBox = new KDialogButtonBox(page);
     m_ColumnWidgets.addPB = buttonBox->addButton(i18n("&Add"), KDialogButtonBox::ActionRole, this,
@@ -371,7 +371,7 @@ void UMLForeignKeyConstraintDialog::setupColumnPage()
 
     slotResetWidgetState();
 
-    connect(m_ColumnWidgets.mappingTW, &QTreeWidget::itemClicked, this, &UMLForeignKeyConstraintDialog::slotResetWidgetState);
+    connect(m_ColumnWidgets.mappingTW, SIGNAL(itemClicked(QTreeWidgetItem*,int)), this, SLOT(slotResetWidgetState()));
 }
 
 /**
diff --git a/umbrello/dialogs/umloperationdialog.cpp b/umbrello/dialogs/umloperationdialog.cpp
index 1d10e8f2ff311d44a61efda780b24aa7d9a7c44c..741b8d7018eb06a7bbbf9d85ad0de7436ff426bf 100644
--- a/umbrello/dialogs/umloperationdialog.cpp
+++ b/umbrello/dialogs/umloperationdialog.cpp
@@ -59,8 +59,10 @@
  */
 UMLOperationDialog::UMLOperationDialog(QWidget * parent, UMLOperation * pOperation)
   : SinglePageDialogBase(parent)
+  , ui(new Ui::UMLOperationDialog)
 {
     setCaption(i18n("Operation Properties"));
+    ui->setupUi(mainWidget());
     m_operation = pOperation;
     m_doc = UMLApp::app()->document();
     m_menu = 0;
@@ -79,117 +81,39 @@ UMLOperationDialog::~UMLOperationDialog()
  */
 void UMLOperationDialog::setupDialog()
 {
-    QFrame *frame = new QFrame(this);
-    setMainWidget(frame);
-    int margin = fontMetrics().height();
-    QVBoxLayout * topLayout = new QVBoxLayout(frame);
-
-    m_pGenGB = new QGroupBox(i18n("General Properties"), frame);
-    QGridLayout * genLayout = new QGridLayout(m_pGenGB);
-    genLayout->setColumnStretch(1, 1);
-    genLayout->setColumnStretch(3, 1);
-    genLayout->addItem(new QSpacerItem(200, 0), 0, 1);
-    genLayout->addItem(new QSpacerItem(200, 0), 0, 3);
-    genLayout->setMargin(margin);
-    genLayout->setSpacing(10);
-
-    Dialog_Utils::makeLabeledEditField(genLayout, 0,
-                                    m_pNameL, i18nc("operation name", "&Name:"),
-                                    m_pNameLE, m_operation->name());
-
-    m_datatypeWidget = new UMLDatatypeWidget(m_operation);
-    m_datatypeWidget->addToLayout(genLayout, 0, 2);
-
-    m_stereotypeWidget = new UMLStereotypeWidget(m_operation);
-    m_stereotypeWidget->addToLayout(genLayout, 1);
-
-    m_pAbstractCB = new QCheckBox(i18n("&Abstract operation"), m_pGenGB);
-    m_pAbstractCB->setChecked(m_operation->isAbstract());
-    genLayout->addWidget(m_pAbstractCB, 2, 0);
-    m_pStaticCB = new QCheckBox(i18n("Classifier &scope (\"static\")"), m_pGenGB);
-    m_pStaticCB->setChecked(m_operation->isStatic());
-    genLayout->addWidget(m_pStaticCB, 2, 1);
-    m_pQueryCB = new QCheckBox(i18n("&Query (\"const\")"), m_pGenGB);
-    m_pQueryCB->setChecked(m_operation->getConst());
-    genLayout->addWidget(m_pQueryCB, 2, 2);
-
-    m_visibilityEnumWidget = new VisibilityEnumWidget(m_operation, this);
-
-    m_docWidget = new DocumentationWidget(m_operation, this);
-
-    m_pParmsGB = new QGroupBox(i18n("Parameters"), frame);
-    QVBoxLayout* parmsLayout = new QVBoxLayout(m_pParmsGB);
-    parmsLayout->setMargin(margin);
-    parmsLayout->setSpacing(10);
-
-    // horizontal box contains the list box and the move up/down buttons
-    QHBoxLayout* parmsHBoxLayout = new QHBoxLayout();
-    m_pParmsLW = new QListWidget(m_pParmsGB);
-    m_pParmsLW->setContextMenuPolicy(Qt::CustomContextMenu);
-
-    // the move up/down buttons (another vertical box)
-    QVBoxLayout* buttonLayout = new QVBoxLayout();
-
-    m_pUpButton = new QToolButton(m_pParmsGB);
-    m_pUpButton->setArrowType(Qt::UpArrow);
-    m_pUpButton->setEnabled(false);
-    buttonLayout->addWidget(m_pUpButton);
-
-    m_pDownButton = new QToolButton(m_pParmsGB);
-    m_pDownButton->setArrowType(Qt::DownArrow);
-    m_pDownButton->setEnabled(false);
-    buttonLayout->addWidget(m_pDownButton);
-
-#if QT_VERSION >= 0x050000
-    QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pParmsGB);
-    QPushButton* newParam = buttonBox->addButton(i18n("Ne&w Parameter..."), QDialogButtonBox::ActionRole);
-    connect(newParam, &QPushButton::clicked, this, &UMLOperationDialog::slotNewParameter);
-    m_pDeleteButton = buttonBox->addButton(i18n("&Delete"), QDialogButtonBox::ActionRole);
-    connect(m_pDeleteButton, &QPushButton::clicked, this, &UMLOperationDialog::slotDeleteParameter);
-    m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), QDialogButtonBox::ActionRole);
-    connect(m_pPropertiesButton, &QPushButton::clicked, this, &UMLOperationDialog::slotParameterProperties);
-#else
-    KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pParmsGB);
-    buttonBox->addButton(i18n("Ne&w Parameter..."), KDialogButtonBox::ActionRole,
-                          this, SLOT(slotNewParameter()));
-    m_pDeleteButton = buttonBox->addButton(i18n("&Delete"), KDialogButtonBox::ActionRole,
-                                            this, SLOT(slotDeleteParameter()));
-    m_pPropertiesButton = buttonBox->addButton(i18n("&Properties"), KDialogButtonBox::ActionRole,
-                          this, SLOT(slotParameterProperties()));
-#endif
-
-    parmsHBoxLayout->addWidget(m_pParmsLW);
-    parmsHBoxLayout->addLayout(buttonLayout);
 
-    parmsLayout->addLayout(parmsHBoxLayout);
-    parmsLayout->addWidget(buttonBox);
+    ui->stereotypeWidget->setUMLObject(m_operation);
+    ui->visibilityWidget->setUMLObject(m_operation);
+    ui->documentationWidget->setUMLObject(m_operation);
+    ui->list_parameters->setContextMenuPolicy(Qt::CustomContextMenu);
 
-    topLayout->addWidget(m_pGenGB);
-    topLayout->addWidget(m_visibilityEnumWidget);
-    topLayout->addWidget(m_docWidget);
-    topLayout->addWidget(m_pParmsGB);
+    // setup push buttons signals
+    connect(ui->pb_newParameter, &QPushButton::clicked, this, &UMLOperationDialog::slotNewParameter);
+    connect(ui->pb_delete, &QPushButton::clicked, this, &UMLOperationDialog::slotDeleteParameter);
+    connect(ui->pb_properties, &QPushButton::clicked, this, &UMLOperationDialog::slotParameterProperties);
 
-    m_pDeleteButton->setEnabled(false);
-    m_pPropertiesButton->setEnabled(false);
-    m_pUpButton->setEnabled(false);
-    m_pDownButton->setEnabled(false);
+    ui->pb_delete->setEnabled(false);
+    ui->pb_properties->setEnabled(false);
+    ui->pb_down->setEnabled(false);
+    ui->pb_up->setEnabled(false);
 
     // fill in parm list box
     UMLAttributeList list = m_operation->getParmList();
     foreach (UMLAttribute* pAtt, list) {
-        m_pParmsLW->addItem(pAtt->toString(Uml::SignatureType::SigNoVis));
+        ui->list_parameters->addItem(pAtt->toString(Uml::SignatureType::SigNoVis));
     }
 
     // setup parm list box signals
-    connect(m_pUpButton, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterUp);
-    connect(m_pDownButton, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterDown);
-    connect(m_pParmsLW, &QListWidget::itemClicked, this, &UMLOperationDialog::slotParamsBoxClicked);
-    connect(m_pParmsLW, &QListWidget::customContextMenuRequested, this, &UMLOperationDialog::slotParmRightButtonPressed);
-    connect(m_pParmsLW, &QListWidget::itemDoubleClicked, this, &UMLOperationDialog::slotParmDoubleClick);
-
-    m_pNameLE->setFocus();
-    connect(m_pNameLE, &KLineEdit::textChanged, this, &UMLOperationDialog::slotNameChanged);
-    slotNameChanged(m_pNameLE->text());
+    connect(ui->pb_up, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterUp);
+    connect(ui->pb_down, &QToolButton::clicked, this, &UMLOperationDialog::slotParameterDown);
+
+    connect(ui->list_parameters, &QListWidget::itemClicked, this, &UMLOperationDialog::slotParamsBoxClicked);
+    connect(ui->list_parameters, &QListWidget::customContextMenuRequested, this, &UMLOperationDialog::slotParmRightButtonPressed);
+    connect(ui->list_parameters, &QListWidget::itemDoubleClicked, this, &UMLOperationDialog::slotParmDoubleClick);
+
+    ui->tb_name->setFocus();
+
+    connect(ui->tb_name, &QLineEdit::textChanged, this, &UMLOperationDialog::slotNameChanged);
 }
 
 void UMLOperationDialog::slotNameChanged(const QString &_text)
@@ -200,22 +124,20 @@ void UMLOperationDialog::slotNameChanged(const QString &_text)
 void UMLOperationDialog::slotParmRightButtonPressed(const QPoint &p)
 {
     ListPopupMenu::MenuType type = ListPopupMenu::mt_Undefined;
-    QListWidgetItem* item = m_pParmsLW->itemAt(p);
+    QListWidgetItem* item = ui->list_parameters->itemAt(p);
     if (item) // pressed on an item
-    {
         type = ListPopupMenu::mt_Parameter_Selected;
-    } else // pressed into fresh air
-    {
+    else // pressed into fresh air
         type = ListPopupMenu::mt_New_Parameter;
-    }
+
     if (m_menu) {
         m_menu->hide();
-        disconnect(m_menu, &ListPopupMenu::triggered, this, &UMLOperationDialog::slotMenuSelection);
+        disconnect(m_menu, SIGNAL(triggered(QAction*)), this, SLOT(slotMenuSelection(QAction*)));
         delete m_menu;
         m_menu = 0;
     }
     ListPopupMenu popup(this, type);
-    QAction *triggered = popup.exec(m_pParmsLW->mapToGlobal(p));
+    QAction *triggered = popup.exec(ui->list_parameters->mapToGlobal(p));
     slotMenuSelection(triggered);
 }
 
@@ -257,7 +179,7 @@ void UMLOperationDialog::slotNewParameter()
         if (!pAtt) {
             newAttribute->setID(UniqueID::gen());
             m_operation->addParm(newAttribute);
-            m_pParmsLW->addItem(newAttribute->toString(Uml::SignatureType::SigNoVis));
+            ui->list_parameters->addItem(newAttribute->toString(Uml::SignatureType::SigNoVis));
             m_doc->setModified(true);
         } else {
             KMessageBox::sorry(this, i18n("The parameter name you have chosen\nis already being used in this operation."),
@@ -272,26 +194,26 @@ void UMLOperationDialog::slotNewParameter()
 
 void UMLOperationDialog::slotDeleteParameter()
 {
-    UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(m_pParmsLW->currentItem()));
+    UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(ui->list_parameters->currentItem()));
 
     m_operation->removeParm(pOldAtt);
-    m_pParmsLW->takeItem(m_pParmsLW->currentRow());
+    ui->list_parameters->takeItem(ui->list_parameters->currentRow());
     m_doc->setModified(true);
 
-    m_pDeleteButton->setEnabled(false);
-    m_pPropertiesButton->setEnabled(false);
-    m_pUpButton->setEnabled(false);
-    m_pDownButton->setEnabled(false);
+    ui->pb_delete->setEnabled(false);
+    ui->pb_properties->setEnabled(false);
+    ui->pb_up->setEnabled(false);
+    ui->pb_down->setEnabled(false);
 }
 
 void UMLOperationDialog::slotParameterProperties()
 {
     UMLAttribute* pAtt = 0, * pOldAtt = 0;
 
-    int position = m_pParmsLW->row(m_pParmsLW->currentItem());
+    int position = ui->list_parameters->row(ui->list_parameters->currentItem());
     pOldAtt = m_operation->getParmList().at(position);
     if (!pOldAtt) {
-        uDebug() << "THE impossible has occurred for:" << m_pParmsLW->currentItem()->text();
+        uDebug() << "THE impossible has occurred for:" << ui->list_parameters->currentItem()->text();
         return;
     } // should never occur
 
@@ -316,7 +238,7 @@ void UMLOperationDialog::slotParameterProperties()
             pOldAtt->setName(oldAttName); // reset the name if there was a naming conflict
         }
 
-        QListWidgetItem* item = m_pParmsLW->currentItem();
+        QListWidgetItem* item = ui->list_parameters->currentItem();
         item->setText(pOldAtt->toString(Uml::SignatureType::SigNoVis));
         m_doc->setModified(true);
     }
@@ -326,14 +248,14 @@ void UMLOperationDialog::slotParameterProperties()
 
 void UMLOperationDialog::slotParameterUp()
 {
-    int row = m_pParmsLW->currentRow();
-    QListWidgetItem* item = m_pParmsLW->currentItem();
+    int row = ui->list_parameters->currentRow();
+    QListWidgetItem* item = ui->list_parameters->currentItem();
     if (item) {
-        UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(item));
+        UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(item));
 
         m_operation->moveParmLeft(pOldAtt);
-        m_pParmsLW->takeItem(row);
-        m_pParmsLW->insertItem(row - 1, item);
+        ui->list_parameters->takeItem(row);
+        ui->list_parameters->insertItem(row - 1, item);
 
         m_doc->setModified(true);
         slotParamsBoxClicked(item);
@@ -345,14 +267,14 @@ void UMLOperationDialog::slotParameterUp()
 
 void UMLOperationDialog::slotParameterDown()
 {
-    int row = m_pParmsLW->currentRow();
-    QListWidgetItem* item = m_pParmsLW->currentItem();
+    int row = ui->list_parameters->currentRow();
+    QListWidgetItem* item = ui->list_parameters->currentItem();
     if (item) {
-        UMLAttribute* pOldAtt = m_operation->getParmList().at(m_pParmsLW->row(item));
+        UMLAttribute* pOldAtt = m_operation->getParmList().at(ui->list_parameters->row(item));
 
         m_operation->moveParmRight(pOldAtt);
-        m_pParmsLW->takeItem(row);
-        m_pParmsLW->insertItem(row + 1, item);
+        ui->list_parameters->takeItem(row);
+        ui->list_parameters->insertItem(row + 1, item);
 
         m_doc->setModified(true);
         slotParamsBoxClicked(item);
@@ -368,18 +290,18 @@ void UMLOperationDialog::slotParameterDown()
 void UMLOperationDialog::slotParamsBoxClicked(QListWidgetItem* parameterItem)
 {
     if (parameterItem) {
-        m_pDeleteButton->setEnabled(true);
-        m_pPropertiesButton->setEnabled(true);
-        int row = m_pParmsLW->row(parameterItem);
-        bool hasNext = (row < m_pParmsLW->count() - 1);
+        ui->pb_delete->setEnabled(true);
+        ui->pb_properties->setEnabled(true);
+        int row = ui->list_parameters->row(parameterItem);
+        bool hasNext = (row < ui->list_parameters->count() - 1);
         bool hasPrev = (row > 0);
-        m_pUpButton->setEnabled(hasPrev);
-        m_pDownButton->setEnabled(hasNext);
+        ui->pb_up->setEnabled(hasPrev);
+        ui->pb_down->setEnabled(hasNext);
     } else {
-        m_pDeleteButton->setEnabled(false);
-        m_pPropertiesButton->setEnabled(false);
-        m_pUpButton->setEnabled(false);
-        m_pDownButton->setEnabled(false);
+        ui->pb_delete->setEnabled(false);
+        ui->pb_properties->setEnabled(false);
+        ui->pb_up->setEnabled(false);
+        ui->pb_down->setEnabled(false);
     }
 }
 
@@ -389,11 +311,11 @@ void UMLOperationDialog::slotParamsBoxClicked(QListWidgetItem* parameterItem)
  */
 bool UMLOperationDialog::apply()
 {
-    QString name = m_pNameLE->text();
+    QString name = ui->tb_name->text();
     if(name.length() == 0) {
         KMessageBox::error(this, i18n("You have entered an invalid operation name."),
                            i18n("Operation Name Invalid"), 0);
-        m_pNameLE->setText(m_operation->name());
+        ui->tb_name->setText(m_operation->name());
         return false;
     }
 
@@ -409,11 +331,11 @@ bool UMLOperationDialog::apply()
     }
     m_operation->setName(name);
 
-    m_visibilityEnumWidget->apply();
-    m_datatypeWidget->apply();
-    m_stereotypeWidget->apply();
+    ui->visibilityWidget->apply();
+    ui->dataTypeWidget->apply();
+    ui->stereotypeWidget->apply();
 
-    bool isAbstract = m_pAbstractCB->isChecked();
+    bool isAbstract = ui->ck_abstract->isChecked();
     m_operation->setAbstract(isAbstract);
     if (isAbstract) {
         /* If any operation is abstract then the owning class needs
@@ -425,9 +347,9 @@ bool UMLOperationDialog::apply()
             classifier->setAbstract(true);
         }
     }
-    m_operation->setStatic(m_pStaticCB->isChecked());
-    m_operation->setConst(m_pQueryCB->isChecked());
-    m_docWidget->apply();
+    m_operation->setStatic(ui->ck_classifierScope->isChecked());
+    m_operation->setConst(ui->ck_queryConst->isChecked());
+    ui->documentationWidget->apply();
 
     return true;
 }
diff --git a/umbrello/dialogs/umloperationdialog.h b/umbrello/dialogs/umloperationdialog.h
index 8cc4e5a1d0b70f5a1bb0779c8d0c47f80204a6a0..9721bcf1c918e0ec4d6b664e221ab60e2e5d7caa 100644
--- a/umbrello/dialogs/umloperationdialog.h
+++ b/umbrello/dialogs/umloperationdialog.h
@@ -13,6 +13,7 @@
 
 //kde includes
 #include "singlepagedialogbase.h"
+#include "ui_umloperationdialog.h"
 
 class DocumentationWidget;
 class KComboBox;
@@ -44,6 +45,8 @@ public:
 
     UMLOperationDialog(QWidget * parent, UMLOperation * pOperation);
     ~UMLOperationDialog();
+private:
+    Ui::UMLOperationDialog *ui;
 
 protected:
 
@@ -57,29 +60,6 @@ protected:
     UMLDoc*           m_doc;        ///< The UMLDocument where all objects live.
     ListPopupMenu*    m_menu;       ///< Menu used in parameter list box.
 
-    //GUI widgets
-    QGroupBox*            m_pParmsGB;
-    QGroupBox*            m_pGenGB;
-    QListWidget*          m_pParmsLW;
-    QGroupBox*            m_pScopeGB;
-    QRadioButton*         m_pPublicRB;
-    QRadioButton*         m_pPrivateRB;
-    QRadioButton*         m_pProtectedRB;
-    QRadioButton*         m_pImplementationRB;
-    QLabel*               m_pNameL;
-    UMLDatatypeWidget*    m_datatypeWidget;
-    UMLStereotypeWidget*  m_stereotypeWidget;
-    KLineEdit*            m_pNameLE;
-    QCheckBox*            m_pAbstractCB;
-    QCheckBox*            m_pStaticCB;
-    QCheckBox*            m_pQueryCB;
-    QPushButton*          m_pDeleteButton;
-    QPushButton*          m_pPropertiesButton;
-    QToolButton*          m_pUpButton;
-    QToolButton*          m_pDownButton;
-    DocumentationWidget*  m_docWidget;
-    VisibilityEnumWidget* m_visibilityEnumWidget;
-
 public slots:
     void slotParmRightButtonPressed(const QPoint &p);
     void slotParmDoubleClick(QListWidgetItem *item);
diff --git a/umbrello/dialogs/umloperationdialog.ui b/umbrello/dialogs/umloperationdialog.ui
new file mode 100644
index 0000000000000000000000000000000000000000..4e9eeeac29a1ec1a519d21d0fad6ed10543cd329
--- /dev/null
+++ b/umbrello/dialogs/umloperationdialog.ui
@@ -0,0 +1,254 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>UMLOperationDialog</class>
+ <widget class="QWidget" name="UMLOperationDialog">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>515</width>
+    <height>539</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QVBoxLayout" name="verticalLayout_2">
+   <item>
+    <widget class="QGroupBox" name="groupBox">
+     <property name="title">
+      <string>General Properties</string>
+     </property>
+     <layout class="QGridLayout" name="gridLayout">
+      <item row="0" column="0">
+       <layout class="QHBoxLayout" name="horizontalLayout">
+        <item>
+         <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true">
+          <property name="sizePolicy">
+           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
+            <horstretch>0</horstretch>
+            <verstretch>0</verstretch>
+           </sizepolicy>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="label">
+          <property name="sizePolicy">
+           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
+            <horstretch>0</horstretch>
+            <verstretch>0</verstretch>
+           </sizepolicy>
+          </property>
+          <property name="text">
+           <string>Name:</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="tb_name">
+          <property name="sizePolicy">
+           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
+            <horstretch>0</horstretch>
+            <verstretch>0</verstretch>
+           </sizepolicy>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <spacer name="horizontalSpacer_2">
+          <property name="orientation">
+           <enum>Qt::Horizontal</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>40</width>
+            <height>20</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+       </layout>
+      </item>
+      <item row="1" column="0">
+       <layout class="QHBoxLayout" name="horizontalLayout_4">
+        <item>
+         <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true">
+          <property name="sizePolicy">
+           <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
+            <horstretch>0</horstretch>
+            <verstretch>0</verstretch>
+           </sizepolicy>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <spacer name="horizontalSpacer_3">
+          <property name="orientation">
+           <enum>Qt::Horizontal</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>40</width>
+            <height>20</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+       </layout>
+      </item>
+      <item row="2" column="0">
+       <layout class="QHBoxLayout" name="horizontalLayout_3">
+        <item>
+         <widget class="QCheckBox" name="ck_abstract">
+          <property name="text">
+           <string>Abstract Operation</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QCheckBox" name="ck_classifierScope">
+          <property name="text">
+           <string>Classifier scope (&quot;static&quot;)</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QCheckBox" name="ck_queryConst">
+          <property name="text">
+           <string>Query (&quot;const&quot;)</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </item>
+     </layout>
+    </widget>
+   </item>
+   <item>
+    <widget class="VisibilityEnumWidget" name="visibilityWidget" native="true"/>
+   </item>
+   <item>
+    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
+   </item>
+   <item>
+    <widget class="QGroupBox" name="groupBox_2">
+     <property name="title">
+      <string>Parameters</string>
+     </property>
+     <layout class="QGridLayout" name="gridLayout_2">
+      <item row="0" column="0" rowspan="2">
+       <widget class="QListWidget" name="list_parameters">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
+          <horstretch>0</horstretch>
+          <verstretch>0</verstretch>
+         </sizepolicy>
+        </property>
+       </widget>
+      </item>
+      <item row="2" column="0">
+       <layout class="QHBoxLayout" name="horizontalLayout_2">
+        <item>
+         <spacer name="horizontalSpacer">
+          <property name="orientation">
+           <enum>Qt::Horizontal</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>40</width>
+            <height>20</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+        <item>
+         <widget class="QPushButton" name="pb_newParameter">
+          <property name="text">
+           <string>New Parameter</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QPushButton" name="pb_delete">
+          <property name="text">
+           <string>Delete</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QPushButton" name="pb_properties">
+          <property name="text">
+           <string>Properties</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </item>
+      <item row="1" column="1">
+       <widget class="QToolButton" name="pb_down">
+        <property name="text">
+         <string/>
+        </property>
+        <property name="arrowType">
+         <enum>Qt::DownArrow</enum>
+        </property>
+       </widget>
+      </item>
+      <item row="0" column="1">
+       <widget class="QToolButton" name="pb_up">
+        <property name="text">
+         <string/>
+        </property>
+        <property name="arrowType">
+         <enum>Qt::UpArrow</enum>
+        </property>
+       </widget>
+      </item>
+     </layout>
+    </widget>
+   </item>
+   <item>
+    <spacer name="verticalSpacer">
+     <property name="orientation">
+      <enum>Qt::Vertical</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>20</width>
+       <height>40</height>
+      </size>
+     </property>
+    </spacer>
+   </item>
+  </layout>
+ </widget>
+ <customwidgets>
+  <customwidget>
+   <class>UMLDatatypeWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/umldatatypewidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>UMLStereotypeWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/umlstereotypewidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>DocumentationWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/documentationwidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>VisibilityEnumWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/visibilityenumwidget.h</header>
+   <container>1</container>
+  </customwidget>
+ </customwidgets>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/umbrello/dialogs/umltemplatedialog.cpp b/umbrello/dialogs/umltemplatedialog.cpp
index 766573772aeaf68eb4e965a30e5e8ae4be044713..42d4afe2c50d17cc026396003c39de9446ebb0b0 100644
--- a/umbrello/dialogs/umltemplatedialog.cpp
+++ b/umbrello/dialogs/umltemplatedialog.cpp
@@ -37,9 +37,11 @@
 
 UMLTemplateDialog::UMLTemplateDialog(QWidget* pParent, UMLTemplate* pTemplate)
   : SinglePageDialogBase(pParent)
+  , ui(new Ui::UMLTemplateDialog)
 {
     m_pTemplate = pTemplate;
     setCaption(i18n("Template Properties"));
+    ui->setupUi(mainWidget());
     setupDialog();
 }
 
@@ -52,32 +54,10 @@ UMLTemplateDialog::~UMLTemplateDialog()
  */
 void UMLTemplateDialog::setupDialog()
 {
-    int margin = fontMetrics().height();
-
-    QFrame *frame = new QFrame(this);
-    setMainWidget(frame);
-    QVBoxLayout* mainLayout = new QVBoxLayout(frame);
-
-    m_pValuesGB = new QGroupBox(i18n("General Properties"), frame);
-    QGridLayout* valuesLayout = new QGridLayout(m_pValuesGB);
-    valuesLayout->setMargin(margin);
-    valuesLayout->setSpacing(10);
-
-    m_datatypeWidget = new UMLDatatypeWidget(m_pTemplate);
-    m_datatypeWidget->addToLayout(valuesLayout, 0);
-
-    Dialog_Utils::makeLabeledEditField(valuesLayout, 1,
-                                    m_pNameL, i18nc("template name", "&Name:"),
-                                    m_pNameLE, m_pTemplate->name());
-    m_stereotypeWidget = new UMLStereotypeWidget(m_pTemplate);
-    m_stereotypeWidget->addToLayout(valuesLayout, 2);
-
-    mainLayout->addWidget(m_pValuesGB);
-
-    m_docWidget = new DocumentationWidget(m_pTemplate, this);
-    mainLayout->addWidget(m_docWidget);
-
-    m_pNameLE->setFocus();
+    ui->dataTypeWidget->setTemplate(m_pTemplate);
+    ui->stereotypeWidget->setUMLObject(m_pTemplate);
+    ui->documentationWidget->setUMLObject(m_pTemplate);
+    ui->tb_name->setFocus();
 }
 
 /**
@@ -86,13 +66,13 @@ void UMLTemplateDialog::setupDialog()
  */
 bool UMLTemplateDialog::apply()
 {
-    m_datatypeWidget->apply();
+    ui->dataTypeWidget->apply();
 
-    QString name = m_pNameLE->text();
+    QString name = ui->tb_name->text();
     if(name.length() == 0) {
         KMessageBox::error(this, i18n("You have entered an invalid template name."),
                            i18n("Template Name Invalid"), 0);
-        m_pNameLE->setText(m_pTemplate->name());
+        ui->tb_name->setText(m_pTemplate->name());
         return false;
     }
 
@@ -102,13 +82,13 @@ bool UMLTemplateDialog::apply()
         if (o && o != m_pTemplate) {
             KMessageBox::error(this, i18n("The template parameter name you have chosen is already being used in this operation."),
                                i18n("Template Name Not Unique"), 0);
-            m_pNameLE->setText(m_pTemplate->name());
+            ui->tb_name->setText(m_pTemplate->name());
             return false;
         }
     }
     m_pTemplate->setName(name);
-    m_stereotypeWidget->apply();
-    m_docWidget->apply();
+    ui->stereotypeWidget->apply();
+    ui->documentationWidget->apply();
 
     return true;
 }
diff --git a/umbrello/dialogs/umltemplatedialog.h b/umbrello/dialogs/umltemplatedialog.h
index 2ab6dd3365ce978196836ade91278647fd4b5930..698ef9ea7028db5871a8bcf665b7b21f840c04c8 100644
--- a/umbrello/dialogs/umltemplatedialog.h
+++ b/umbrello/dialogs/umltemplatedialog.h
@@ -12,6 +12,7 @@
 #define UMLTEMPLATEDIALOG_H
 
 #include "singlepagedialogbase.h"
+#include "ui_umltemplatedialog.h"
 
 class DocumentationWidget;
 class KComboBox;
@@ -34,6 +35,8 @@ class UMLTemplateDialog : public SinglePageDialogBase
 public:
     UMLTemplateDialog(QWidget* pParent, UMLTemplate* pAttribute);
     ~UMLTemplateDialog();
+private:
+    Ui::UMLTemplateDialog *ui;
 
 protected:
 
@@ -46,14 +49,6 @@ protected:
      */
     UMLTemplate* m_pTemplate;
 
-    // GUI Widgets
-    QGroupBox *m_pValuesGB;
-    QLabel *m_pNameL;
-    KLineEdit *m_pNameLE;
-    UMLDatatypeWidget *m_datatypeWidget;
-    UMLStereotypeWidget *m_stereotypeWidget;
-    DocumentationWidget *m_docWidget;
-
 protected:
 
     void insertTypesSorted(const QString& type = QString());
diff --git a/umbrello/dialogs/umltemplatedialog.ui b/umbrello/dialogs/umltemplatedialog.ui
new file mode 100644
index 0000000000000000000000000000000000000000..92b21a36d62d058c7dd9abf6df907ccee9830b27
--- /dev/null
+++ b/umbrello/dialogs/umltemplatedialog.ui
@@ -0,0 +1,74 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>UMLTemplateDialog</class>
+ <widget class="QWidget" name="UMLTemplateDialog">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>315</width>
+    <height>138</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QGridLayout" name="gridLayout">
+   <item row="0" column="0" colspan="2">
+    <widget class="QLabel" name="label">
+     <property name="text">
+      <string>General Properties</string>
+     </property>
+    </widget>
+   </item>
+   <item row="1" column="0" colspan="2">
+    <widget class="UMLDatatypeWidget" name="dataTypeWidget" native="true"/>
+   </item>
+   <item row="2" column="0">
+    <widget class="QLabel" name="label_2">
+     <property name="text">
+      <string>Name:</string>
+     </property>
+    </widget>
+   </item>
+   <item row="2" column="1">
+    <widget class="QLineEdit" name="tb_name">
+     <property name="sizePolicy">
+      <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
+       <horstretch>0</horstretch>
+       <verstretch>0</verstretch>
+      </sizepolicy>
+     </property>
+    </widget>
+   </item>
+   <item row="3" column="0" colspan="2">
+    <widget class="UMLStereotypeWidget" name="stereotypeWidget" native="true"/>
+   </item>
+   <item row="4" column="0" colspan="2">
+    <widget class="DocumentationWidget" name="documentationWidget" native="true"/>
+   </item>
+  </layout>
+ </widget>
+ <customwidgets>
+  <customwidget>
+   <class>UMLDatatypeWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/umldatatypewidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>UMLStereotypeWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/umlstereotypewidget.h</header>
+   <container>1</container>
+  </customwidget>
+  <customwidget>
+   <class>DocumentationWidget</class>
+   <extends>QWidget</extends>
+   <header>widgets/documentationwidget.h</header>
+   <container>1</container>
+  </customwidget>
+ </customwidgets>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/umbrello/dialogs/umluniqueconstraintdialog.cpp b/umbrello/dialogs/umluniqueconstraintdialog.cpp
index 4f5dd509dff750bd789231d54e53bfd68af6a4d6..2f51c637e79e848a2081dde0c872b553e7cef368 100644
--- a/umbrello/dialogs/umluniqueconstraintdialog.cpp
+++ b/umbrello/dialogs/umluniqueconstraintdialog.cpp
@@ -113,9 +113,9 @@ void UMLUniqueConstraintDialog::setupDialog()
 #if QT_VERSION >= 0x050000
     QDialogButtonBox* buttonBox = new QDialogButtonBox(m_pAttributeListGB);
     m_pAddPB = buttonBox->addButton(i18n("&Add"), QDialogButtonBox::ActionRole);
-    connect(m_pAddPB, &QPushButton::clicked, this, &UMLUniqueConstraintDialog::slotAddAttribute);
+    connect(m_pAddPB, SIGNAL(clicked()), this, SLOT(slotAddAttribute()));
     m_pRemovePB = buttonBox->addButton(i18n("&Delete"), QDialogButtonBox::ActionRole);
-    connect(m_pRemovePB, &QPushButton::clicked, this, &UMLUniqueConstraintDialog::slotDeleteAttribute);
+    connect(m_pRemovePB, SIGNAL(clicked()), this, SLOT(slotDeleteAttribute()));
 #else
     KDialogButtonBox* buttonBox = new KDialogButtonBox(m_pAttributeListGB);
     m_pAddPB = buttonBox->addButton(i18n("&Add"), KDialogButtonBox::ActionRole, this,
@@ -161,7 +161,7 @@ void UMLUniqueConstraintDialog::setupDialog()
 
     slotResetWidgetState();
 
-    connect(m_pAttributeListLW, &QListWidget::itemClicked, this, &UMLUniqueConstraintDialog::slotResetWidgetState);
+    connect(m_pAttributeListLW, SIGNAL(itemClicked(QListWidgetItem*)), this, SLOT(slotResetWidgetState()));
 }
 
 /**
diff --git a/umbrello/dialogs/umlviewdialog.cpp b/umbrello/dialogs/umlviewdialog.cpp
index 9023c95f3104c334179a224394868728ae53d868..2a198005da747d5f3f1a918b82a2165ba26944b6 100644
--- a/umbrello/dialogs/umlviewdialog.cpp
+++ b/umbrello/dialogs/umlviewdialog.cpp
@@ -46,8 +46,8 @@ UMLViewDialog::UMLViewDialog(QWidget * pParent, UMLScene * pScene)
     setCaption(i18n("Properties"));
     m_pScene = pScene;
     setupPages();
-    connect(this, &UMLViewDialog::okClicked, this, &UMLViewDialog::slotOk);
-    connect(this, &UMLViewDialog::applyClicked, this, &UMLViewDialog::slotApply);
+    connect(this, SIGNAL(okClicked()), this, SLOT(slotOk()));
+    connect(this, SIGNAL(applyClicked()), this, SLOT(slotApply()));
 }
 
 /**
diff --git a/umbrello/dialogs/widgets/documentationwidget.cpp b/umbrello/dialogs/widgets/documentationwidget.cpp
index 09cbe298e95ca877a7b0d9bdaacb5d358b01e945..88c40804d2087d1a47959e302e15ab8cc66d99e4 100644
--- a/umbrello/dialogs/widgets/documentationwidget.cpp
+++ b/umbrello/dialogs/widgets/documentationwidget.cpp
@@ -19,13 +19,10 @@
 #include <QGroupBox>
 #include <QHBoxLayout>
 
-DocumentationWidget::DocumentationWidget(UMLObject *o, QWidget *parent) :
+DocumentationWidget::DocumentationWidget(QWidget *parent) :
     QWidget(parent),
-    m_object(o),
     m_widget(0)
 {
-    Q_ASSERT(o);
-    init(o->doc());
 }
 
 DocumentationWidget::DocumentationWidget(UMLWidget *w, QWidget *parent) :
@@ -54,6 +51,13 @@ void DocumentationWidget::apply()
         m_widget->setDocumentation(m_editField->toPlainText());
 }
 
+void DocumentationWidget::setUMLObject(UMLObject *o)
+{
+    Q_ASSERT(o);
+    m_object = o;
+    init(o->doc());
+}
+
 /**
  * initialize widget
  * @param text text to display
diff --git a/umbrello/dialogs/widgets/documentationwidget.h b/umbrello/dialogs/widgets/documentationwidget.h
index 279553ef97a398917d3578411d2d8e680b0a17eb..36234b5ed20efc0467d27bb031cf733ed3ca4fb3 100644
--- a/umbrello/dialogs/widgets/documentationwidget.h
+++ b/umbrello/dialogs/widgets/documentationwidget.h
@@ -25,11 +25,12 @@ class DocumentationWidget : public QWidget
 {
     Q_OBJECT
 public:
-    explicit DocumentationWidget(UMLObject *o, QWidget *parent = 0);
+    explicit DocumentationWidget(QWidget *parent = 0);
     explicit DocumentationWidget(UMLWidget *w, QWidget *parent = 0);
     ~DocumentationWidget();
 
     void apply();
+    void setUMLObject(UMLObject *o);
 
 protected:
     QGroupBox *m_box;
diff --git a/umbrello/dialogs/widgets/imagetypewidget.cpp b/umbrello/dialogs/widgets/imagetypewidget.cpp
index b93be606f0c574143124a7df5b380a49e0fd6778..aad70c8099b66e06556a3564ad7ecaeb418c8f3e 100644
--- a/umbrello/dialogs/widgets/imagetypewidget.cpp
+++ b/umbrello/dialogs/widgets/imagetypewidget.cpp
@@ -57,7 +57,7 @@ ImageTypeWidget::ImageTypeWidget(const QStringList &imageTypes, const QString &_
     layout->addWidget(m_comboBox, 2);
     m_comboBox->setEditable(false);
     m_label->setBuddy(m_comboBox);
-    connect(m_comboBox, static_cast<void (KComboBox::*)(const QString&)>(&KComboBox::currentIndexChanged), this, &ImageTypeWidget::slotCurrentIndexChanged);
+    connect(m_comboBox, SIGNAL(currentIndexChanged(QString)), this, SLOT(slotCurrentIndexChanged(QString)));
     setLayout(layout);
 }
 
diff --git a/umbrello/dialogs/widgets/resolutionwidget.cpp b/umbrello/dialogs/widgets/resolutionwidget.cpp
index 52ebaba17a7cb3adb3cd5a7011206508621bf4b5..8c8b8547b6c9bcf04da2f9cfe6b0c0fee4be3018 100644
--- a/umbrello/dialogs/widgets/resolutionwidget.cpp
+++ b/umbrello/dialogs/widgets/resolutionwidget.cpp
@@ -58,7 +58,7 @@ ResolutionWidget::ResolutionWidget(QWidget *parent) :
         m_comboBox->addItem(key, QVariant(key.toFloat()));
     }
     setLayout(layout);
-    connect(m_comboBox, &KComboBox::editTextChanged, this, &ResolutionWidget::slotTextChanged);
+    connect(m_comboBox, SIGNAL(editTextChanged(QString)), this, SLOT(slotTextChanged(QString)));
 }
 
 /**
diff --git a/umbrello/dialogs/widgets/umldatatypewidget.cpp b/umbrello/dialogs/widgets/umldatatypewidget.cpp
index 5cd1fbaab377f68722254d9f683b028c3b510d38..ef1ca7736f27f0c6e98e0dead5198eab2b180efb 100644
--- a/umbrello/dialogs/widgets/umldatatypewidget.cpp
+++ b/umbrello/dialogs/widgets/umldatatypewidget.cpp
@@ -30,69 +30,14 @@
 #include <QLabel>
 #include <QWidget>
 
-UMLDatatypeWidget::UMLDatatypeWidget(UMLAttribute *attribute, QWidget *parent)
-  : QWidget(parent),
-    m_attribute(attribute),
-    m_datatype(0),
-    m_entityAttribute(0),
-    m_operation(0),
-    m_template(0)
+UMLDatatypeWidget::UMLDatatypeWidget(QWidget *parent) : QWidget(parent)
+  , m_attribute(nullptr)
+  , m_datatype(nullptr)
+  , m_operation(nullptr)
+  , m_entityAttribute(nullptr)
+  , m_template(nullptr)
 {
     init();
-    m_parent = dynamic_cast<UMLClassifier*>(m_attribute->parent()->parent());
-    insertTypesSortedParameter(m_attribute->getTypeName());
-}
-
-UMLDatatypeWidget::UMLDatatypeWidget(UMLClassifierListItem *datatype, QWidget *parent)
-  : QWidget(parent),
-    m_attribute(0),
-    m_datatype(datatype),
-    m_entityAttribute(0),
-    m_operation(0),
-    m_template(0)
-{
-    init();
-    m_parent = dynamic_cast<UMLClassifier *>(m_datatype->parent());
-    insertTypesSortedAttribute(m_datatype->getTypeName());
-}
-
-UMLDatatypeWidget::UMLDatatypeWidget(UMLEntityAttribute *entityAttribute, QWidget *parent)
-   : QWidget(parent),
-     m_attribute(0),
-     m_datatype(0),
-     m_entityAttribute(entityAttribute),
-     m_operation(0),
-     m_template(0)
-{
-    init();
-    m_parent = 0;
-    insertTypesSortedEntityAttribute(m_entityAttribute->getTypeName());
-}
-
-UMLDatatypeWidget::UMLDatatypeWidget(UMLOperation *operation, QWidget *parent)
- :  QWidget(parent),
-    m_attribute(0),
-    m_datatype(0),
-    m_entityAttribute(0),
-    m_operation(operation),
-    m_template(0)
-{
-    init();
-    m_parent = dynamic_cast<UMLClassifier*>(m_operation->parent());
-    insertTypesSortedOperation(m_operation->getTypeName());
-}
-
-UMLDatatypeWidget::UMLDatatypeWidget(UMLTemplate *_template, QWidget *parent)
- :  QWidget(parent),
-    m_attribute(0),
-    m_datatype(0),
-    m_entityAttribute(0),
-    m_operation(0),
-    m_template(_template)
-{
-    init();
-    m_parent = 0;
-    insertTypesSortedTemplate(m_template->getTypeName());
 }
 
 void UMLDatatypeWidget::init()
@@ -113,12 +58,52 @@ void UMLDatatypeWidget::init()
     setLayout(layout);
 }
 
+
+
 UMLDatatypeWidget::~UMLDatatypeWidget()
 {
     delete m_comboBox;
     delete m_label;
 }
 
+void UMLDatatypeWidget::setAttribute(UMLAttribute *attribute)
+{
+    m_attribute = attribute;
+    m_parent = dynamic_cast<UMLClassifier*>(m_attribute->parent()->parent());
+    insertTypesSortedParameter(m_attribute->getTypeName());
+}
+
+void UMLDatatypeWidget::setClassifierItem(UMLClassifierListItem *datatype)
+{
+    m_datatype = datatype;
+    m_parent = dynamic_cast<UMLClassifier *>(m_datatype->parent());
+    insertTypesSortedAttribute(m_datatype->getTypeName());
+
+}
+
+void UMLDatatypeWidget::setEntityAttribute(UMLEntityAttribute *entityAttribute)
+{
+    m_entityAttribute = entityAttribute;
+    m_parent = 0;
+    insertTypesSortedEntityAttribute(m_entityAttribute->getTypeName());
+}
+
+void UMLDatatypeWidget::setOPeration(UMLOperation *operation)
+{
+    m_operation = operation;
+    m_parent = dynamic_cast<UMLClassifier*>(m_operation->parent());
+    insertTypesSortedOperation(m_operation->getTypeName());
+
+}
+
+void UMLDatatypeWidget::setTemplate(UMLTemplate *_template)
+{
+    m_template = _template;
+    m_parent = 0;
+    insertTypesSortedTemplate(m_template->getTypeName());
+
+}
+
 bool UMLDatatypeWidget::apply()
 {
     if (m_datatype)
@@ -137,16 +122,23 @@ bool UMLDatatypeWidget::apply()
 bool UMLDatatypeWidget::applyAttribute()
 {
     QString typeName = m_comboBox->currentText();
-    UMLTemplate *tmplParam = m_parent->findTemplate(typeName);
+    Uml::TypeQualifiers::Enum typeQualifier = m_datatype->qualifier();
+    Uml::TypeModifiers::Enum typeModifierEnum = m_datatype->modifier();
+    //Need to find a better way to do that
+    QString m = Uml::TypeModifiers::toString(typeModifierEnum);
+    QString q = Uml::TypeQualifiers::toString(typeQualifier);
+    QString finalString = q + typeName + m;
+
+    UMLTemplate *tmplParam = m_parent->findTemplate(finalString);
     if (tmplParam) {
         m_datatype->setType(tmplParam);
         return true;
     }
     UMLDoc * pDoc = UMLApp::app()->document();
 
-    UMLObject *obj = 0;
+    UMLObject *obj = nullptr;
     if (!typeName.isEmpty()) {
-        obj = pDoc->findUMLObject(typeName);
+        obj = pDoc->findUMLObject(finalString);
     }
 
     UMLClassifier *classifier = dynamic_cast<UMLClassifier*>(obj);
@@ -154,23 +146,22 @@ bool UMLDatatypeWidget::applyAttribute()
         Uml::ProgrammingLanguage::Enum pl = UMLApp::app()->activeLanguage();
         // Import_Utils does not handle creating a new object with empty name
         // string well. Use Object_Factory in those cases.
-        if (
-            (!typeName.isEmpty()) &&
-            ((pl == Uml::ProgrammingLanguage::Cpp) ||
-                (pl == Uml::ProgrammingLanguage::Java))
-        ) {
+        if (!typeName.isEmpty() && ((pl == Uml::ProgrammingLanguage::Cpp) || (pl == Uml::ProgrammingLanguage::Java)) )
+        {
             // Import_Utils::createUMLObject works better for C++ namespace
             // and java package than Object_Factory::createUMLObject
             Import_Utils::setRelatedClassifier(m_parent);
-            obj = Import_Utils::createUMLObject(UMLObject::ot_UMLObject, typeName);
+            obj = Import_Utils::createUMLObject(UMLObject::ot_UMLObject, finalString);
             Import_Utils::setRelatedClassifier(NULL);
         } else {
             // If it's obviously a pointer type (C++) then create a datatype.
             // Else we don't know what it is so as a compromise create a class.
+            bool contains = false;
+            if(finalString.contains(QChar::fromLatin1('*')) || finalString.contains(QChar::fromLatin1('&')))
+                contains = true;
             UMLObject::ObjectType ot =
-                (typeName.contains(QChar::fromLatin1('*')) ? UMLObject::ot_Datatype
-                                                          : UMLObject::ot_Class);
-            obj = Object_Factory::createUMLObject(ot, typeName);
+                (contains ? UMLObject::ot_Datatype : UMLObject::ot_Class);
+            obj = Object_Factory::createUMLObject(ot, finalString);
         }
         if (obj == NULL)
             return false;
diff --git a/umbrello/dialogs/widgets/umldatatypewidget.h b/umbrello/dialogs/widgets/umldatatypewidget.h
index bdac23e0c88040941a07ce6b1268b47f683d4103..75b92bd65b40c748ba15fdcee18e24656890b357 100644
--- a/umbrello/dialogs/widgets/umldatatypewidget.h
+++ b/umbrello/dialogs/widgets/umldatatypewidget.h
@@ -26,13 +26,15 @@ class UMLTemplate;
 class UMLDatatypeWidget : public QWidget
 {
 public:
-    UMLDatatypeWidget(UMLAttribute *attribute, QWidget *parent=0);
-    UMLDatatypeWidget(UMLClassifierListItem *datatype, QWidget *parent=0);
-    UMLDatatypeWidget(UMLEntityAttribute *entityAttribute, QWidget *parent=0);
-    UMLDatatypeWidget(UMLOperation *operation, QWidget *parent=0);
-    UMLDatatypeWidget(UMLTemplate *_template, QWidget *parent=0);
+    UMLDatatypeWidget(QWidget *parent = 0);
     ~UMLDatatypeWidget();
 
+    void setAttribute(UMLAttribute *attribute);
+    void setClassifierItem(UMLClassifierListItem *datatype);
+    void setEntityAttribute(UMLEntityAttribute *entityAttribute);
+    void setOPeration(UMLOperation *operation);
+    void setTemplate(UMLTemplate *_template);
+
     void addToLayout(QGridLayout *layout, int row, int startColumn = 0);
     bool apply();
     void reset();
diff --git a/umbrello/dialogs/widgets/umlstereotypewidget.cpp b/umbrello/dialogs/widgets/umlstereotypewidget.cpp
index 6d7f3e46903a83e3494889a27dabdeb832358416..1130b52120add34044f31bbe36cc385b2285df26 100644
--- a/umbrello/dialogs/widgets/umlstereotypewidget.cpp
+++ b/umbrello/dialogs/widgets/umlstereotypewidget.cpp
@@ -23,14 +23,11 @@
 #include <QLabel>
 #include <QWidget>
 
-Q_DECLARE_METATYPE(UMLStereotype*);
+Q_DECLARE_METATYPE(UMLStereotype*)
 
-UMLStereotypeWidget::UMLStereotypeWidget(UMLObject *object, QWidget *parent)
-    : QWidget(parent),
-      m_object(object)
-{
-    Q_ASSERT(m_object);
-    init();
+UMLStereotypeWidget::UMLStereotypeWidget(QWidget *parent)
+    : QWidget(parent)
+{    
 }
 
 UMLStereotypeWidget::~UMLStereotypeWidget()
@@ -39,6 +36,12 @@ UMLStereotypeWidget::~UMLStereotypeWidget()
     delete m_label;
 }
 
+void UMLStereotypeWidget::setUMLObject(UMLObject *o)
+{
+    m_object = o;
+    init();
+}
+
 /**
  * Set state if stereotypes could be edited. By default stereotypes could be edited.
  * @param state edit state
diff --git a/umbrello/dialogs/widgets/umlstereotypewidget.h b/umbrello/dialogs/widgets/umlstereotypewidget.h
index 8a936cf2640debfe19fc11ea5c81243afa2f7274..a68a28f630917921b6a3aea5e2489f492a64d0bb 100644
--- a/umbrello/dialogs/widgets/umlstereotypewidget.h
+++ b/umbrello/dialogs/widgets/umlstereotypewidget.h
@@ -24,13 +24,15 @@ class QLabel;
 class UMLStereotypeWidget : public QWidget
 {
 public:
-    explicit UMLStereotypeWidget(UMLObject *object, QWidget *parent=0);
+    explicit UMLStereotypeWidget(QWidget *parent=0);
     ~UMLStereotypeWidget();
 
+    void setUMLObject(UMLObject *o);
     void setEditable(bool state);
     void addToLayout(QGridLayout *layout, int row);
     void apply();
 
+
 protected:
     QLabel *m_label;
     KComboBox *m_comboBox;
diff --git a/umbrello/dialogs/widgets/umltypemodifierwidget.cpp b/umbrello/dialogs/widgets/umltypemodifierwidget.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..dd3c401e9ae18d20ef1c17e9e7ecd9a7c132e79a
--- /dev/null
+++ b/umbrello/dialogs/widgets/umltypemodifierwidget.cpp
@@ -0,0 +1,43 @@
+#include "umltypemodifierwidget.h"
+#include "classifierlistitem.h"
+#include "uml.h"
+
+#include <KLocalizedString>
+
+UMLTypeModifierWidget::UMLTypeModifierWidget(QWidget *parent) : QWidget(parent)
+{
+    m_texts[Uml::TypeModifiers::None] = i18nc("none", "None");
+    m_texts[Uml::TypeModifiers::Pointer] = i18nc("pointer type", "*");
+    m_texts[Uml::TypeModifiers::Reference] = i18nc("reference type", "&");
+    init(i18n("Type Modifiers:"));
+
+}
+
+void UMLTypeModifierWidget::apply()
+{
+    QString currData = m_typeCB->currentText();
+    Uml::TypeModifiers::Enum key = m_texts.key(currData);
+    if(m_typeModifier)
+        m_typeModifier->setModifier(key);
+}
+
+void UMLTypeModifierWidget::setUMLClassifierItem(UMLClassifierListItem *o)
+{
+    Q_ASSERT(o);
+    m_typeModifier = o;
+}
+
+void UMLTypeModifierWidget::init(const QString &title)
+{
+    auto layout = new QHBoxLayout;
+    auto label = new QLabel(title);
+    layout->addWidget(label);
+    m_typeCB = new QComboBox();
+
+    foreach (const auto &text, m_texts) {
+        m_typeCB->addItem(text);
+    }
+
+    layout->addWidget(m_typeCB);
+    setLayout(layout);
+}
diff --git a/umbrello/dialogs/widgets/umltypemodifierwidget.h b/umbrello/dialogs/widgets/umltypemodifierwidget.h
new file mode 100644
index 0000000000000000000000000000000000000000..85a1dc0f66fa0aba58aa4149de48c2447523593f
--- /dev/null
+++ b/umbrello/dialogs/widgets/umltypemodifierwidget.h
@@ -0,0 +1,29 @@
+#ifndef UMLTYPEMODIFIERWIDGET_H
+#define UMLTYPEMODIFIERWIDGET_H
+
+#include <QtWidgets>
+
+#include "basictypes.h"
+
+class UMLClassifierListItem;
+
+class UMLTypeModifierWidget : public QWidget
+{
+    Q_OBJECT
+public:
+    explicit UMLTypeModifierWidget(QWidget *parent = 0);
+
+    void apply();
+
+    void setUMLClassifierItem(UMLClassifierListItem *o);
+
+private:
+    void init(const QString &title);
+    typedef QMap<Uml::TypeModifiers::Enum,QString> TextMap;
+    TextMap m_texts;
+    UMLClassifierListItem *m_typeModifier;
+    QComboBox *m_typeCB;
+
+};
+
+#endif // UMLTYPEMODIFIERWIDGET_H
diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.cpp b/umbrello/dialogs/widgets/umltypequalifierswidget.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..f5e6b1d4f8e441455a94103dd3c6e5d630a21e43
--- /dev/null
+++ b/umbrello/dialogs/widgets/umltypequalifierswidget.cpp
@@ -0,0 +1,70 @@
+#include "umltypequalifierswidget.h"
+#include "classifierlistitem.h"
+#include "uml.h"
+#include "basictypes.h"
+
+#include <KLocalizedString>
+
+UmlTypeQualifiersWidget::UmlTypeQualifiersWidget(QWidget *parent)
+  : QWidget(parent)
+  ,ui(new Ui::UMLTypeQualifiersWidget)
+{
+    ui->setupUi(this);
+    //Using some connects with lambda to control the widgets
+    connect(ui->rb_none, &QRadioButton::clicked, [=]{
+        if(ui->rb_none->isChecked()){
+            ui->rb_mutable->setEnabled(true);
+            ui->ck_const->setEnabled(true);
+            ui->ck_volatile->setEnabled(true);
+        }
+    });
+
+    connect(ui->rb_mutable, &QRadioButton::clicked, [=]{
+        if(ui->rb_mutable->isChecked()){
+            ui->ck_const->setDisabled(true);
+            ui->ck_volatile->setDisabled(true);
+        }
+    });
+    connect(ui->ck_const, &QCheckBox::clicked, [=]{
+        if(ui->ck_const->isChecked() || ui->ck_volatile->isChecked()){
+            ui->rb_mutable->setDisabled(true);
+            ui->rb_none->setDisabled(true);
+            ui->rb_none->setChecked(false);
+        }
+        else{
+            ui->rb_mutable->setDisabled(false);
+            ui->rb_none->setDisabled(false);
+        }
+    });
+    connect(ui->ck_volatile, &QCheckBox::clicked, [=]{
+       if(ui->ck_volatile->isChecked() || ui->ck_const->isChecked()){
+           ui->rb_mutable->setDisabled(true);
+           ui->rb_none->setDisabled(true);
+           ui->rb_none->setChecked(false);
+       }
+       else{
+           ui->rb_mutable->setDisabled(false);
+           ui->rb_none->setDisabled(false);
+       }
+    });
+}
+
+void UmlTypeQualifiersWidget::apply()
+{
+    if(ui->ck_const->isChecked() && ui->ck_volatile->isChecked())
+        m_qualifier->setQualifier(Uml::TypeQualifiers::ConstVolatile);
+    else if(ui->rb_none->isChecked())
+        m_qualifier->setQualifier(Uml::TypeQualifiers::None);
+    else if(ui->ck_const->isChecked())
+        m_qualifier->setQualifier(Uml::TypeQualifiers::Const);
+    else if(ui->rb_mutable->isChecked())
+        m_qualifier->setQualifier(Uml::TypeQualifiers::Mutable);
+    else if(ui->ck_volatile->isChecked())
+        m_qualifier->setQualifier(Uml::TypeQualifiers::Volatile);
+}
+
+void UmlTypeQualifiersWidget::setUMLClassifierItem(UMLClassifierListItem *o)
+{
+    Q_ASSERT(o);
+    m_qualifier = o;
+}
diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.h b/umbrello/dialogs/widgets/umltypequalifierswidget.h
new file mode 100644
index 0000000000000000000000000000000000000000..8d36d3386c0d092c531f53a5e8a2a9c658d5ef39
--- /dev/null
+++ b/umbrello/dialogs/widgets/umltypequalifierswidget.h
@@ -0,0 +1,27 @@
+#ifndef UMLTYPEQUALIFIERSWIDGET_H
+#define UMLTYPEQUALIFIERSWIDGET_H
+
+#include "ui_umltypequalifierswidget.h"
+#include <QtWidgets>
+#include <QMap>
+
+class UMLClassifierListItem;
+
+class UmlTypeQualifiersWidget : public QWidget
+{
+    Q_OBJECT
+
+public:
+    explicit UmlTypeQualifiersWidget(QWidget *parent = 0);
+
+    void apply();
+    void setUMLClassifierItem(UMLClassifierListItem *o);
+
+private:
+
+    Ui::UMLTypeQualifiersWidget *ui;
+    UMLClassifierListItem *m_qualifier;
+
+};
+
+#endif // UMLTYPEQUALIFIERSWIDGET_H
diff --git a/umbrello/dialogs/widgets/umltypequalifierswidget.ui b/umbrello/dialogs/widgets/umltypequalifierswidget.ui
new file mode 100644
index 0000000000000000000000000000000000000000..cb41c5b55b774dad7b5d7af435a015d676855f3f
--- /dev/null
+++ b/umbrello/dialogs/widgets/umltypequalifierswidget.ui
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>UMLTypeQualifiersWidget</class>
+ <widget class="QWidget" name="UMLTypeQualifiersWidget">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>316</width>
+    <height>97</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QVBoxLayout" name="verticalLayout">
+   <item>
+    <widget class="QGroupBox" name="groupBox">
+     <property name="title">
+      <string>Type Qualifiers</string>
+     </property>
+     <layout class="QGridLayout" name="gridLayout">
+      <item row="0" column="0">
+       <widget class="QRadioButton" name="rb_none">
+        <property name="text">
+         <string>None</string>
+        </property>
+       </widget>
+      </item>
+      <item row="1" column="0">
+       <widget class="QRadioButton" name="rb_mutable">
+        <property name="text">
+         <string>&amp;Mutable</string>
+        </property>
+       </widget>
+      </item>
+      <item row="0" column="1">
+       <widget class="QCheckBox" name="ck_const">
+        <property name="text">
+         <string>Const</string>
+        </property>
+       </widget>
+      </item>
+      <item row="1" column="1">
+       <widget class="QCheckBox" name="ck_volatile">
+        <property name="text">
+         <string>Volatile</string>
+        </property>
+       </widget>
+      </item>
+     </layout>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.cpp b/umbrello/dialogs/widgets/visibilityenumwidget.cpp
index b453808edb2d6f0999126ab2327d6d9a90c5b2e7..3ab17348c6b3e3fc46feb43093bb9e52c8b5ba6d 100644
--- a/umbrello/dialogs/widgets/visibilityenumwidget.cpp
+++ b/umbrello/dialogs/widgets/visibilityenumwidget.cpp
@@ -20,20 +20,14 @@
 #include <QGroupBox>
 #include <QRadioButton>
 
-VisibilityEnumWidget::VisibilityEnumWidget(UMLObject *o, QWidget *parent)
-    : QWidget(parent),
-      m_object(o),
-      m_widget(0),
-      m_role(Uml::RoleType::A)
+VisibilityEnumWidget::VisibilityEnumWidget(QWidget *parent)
+    : QWidget(parent)
+    , m_widget(0)
+    , ui(new Ui::visibilityEnumWidget)
+    , m_role(Uml::RoleType::A)
 {
-    Q_ASSERT(o);
-
-    m_texts[Uml::Visibility::Public] = i18nc("public visibility", "P&ublic");
-    m_texts[Uml::Visibility::Protected] = i18nc("protected visibility", "Pro&tected");
-    m_texts[Uml::Visibility::Private] = i18nc("private visibility", "P&rivate");
-    m_texts[Uml::Visibility::Implementation] = i18n("Imple&mentation");
-    init(i18n("Visibility"));
-    m_buttons[m_object->visibility()]->setChecked(true);
+    ui->setupUi(this);
+    initMaps();
 }
 
 VisibilityEnumWidget::VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::Enum role, QWidget *parent)
@@ -47,15 +41,15 @@ VisibilityEnumWidget::VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::
         m_texts[Uml::Visibility::Protected] = i18nc("scope for A is protected", "Protected");
         m_texts[Uml::Visibility::Private] = i18nc("scope for A is private", "Private");
         m_texts[Uml::Visibility::Implementation] = i18nc("scope for A is implementation", "Implementation");
-        init(i18n("Role A Visibility"));
+        ui->groupBox->setTitle(i18n("Role A Visibility"));
     } else {
         m_texts[Uml::Visibility::Public] = i18nc("scope for B is public", "Public");
         m_texts[Uml::Visibility::Protected] = i18nc("scope for B is protected", "Protected");
         m_texts[Uml::Visibility::Private] = i18nc("scope for B is private", "Private");
         m_texts[Uml::Visibility::Implementation] = i18nc("scope for B is implementation", "Implementation");
-        init(i18n("Role B Visibility"));
+        ui->groupBox->setTitle(i18n("Role B Visibility"));
     }
-    m_buttons[a->visibility(role)]->setChecked(true);
+    m_widgets[a->visibility(role)]->setChecked(true);
 }
 
 VisibilityEnumWidget::~VisibilityEnumWidget()
@@ -63,13 +57,32 @@ VisibilityEnumWidget::~VisibilityEnumWidget()
     // nothing here, parenting makes sure that all objects are destroyed
 }
 
+void VisibilityEnumWidget::setUMLObject(UMLObject *o)
+{
+    m_object = o;
+    switch (m_object->visibility()) {
+    case Uml::Visibility::Public:
+            ui->rb_public->setChecked(true);
+        break;
+    case Uml::Visibility::Protected:
+        ui->rb_protected->setChecked(true);
+        break;
+    case Uml::Visibility::Private:
+        ui->rb_protected->setChecked(true);
+        break;
+    case Uml::Visibility::Implementation:
+        ui->rb_implementation->setChecked(true);
+        break;
+    }
+}
+
 /**
  * Add this widget to a given layout.
  * @param layout The layout to which the widget should be added
  */
 void VisibilityEnumWidget::addToLayout(QVBoxLayout *layout)
 {
-    layout->addWidget(m_box);
+    layout->addWidget(this);
 }
 
 /**
@@ -77,34 +90,27 @@ void VisibilityEnumWidget::addToLayout(QVBoxLayout *layout)
  */
 void VisibilityEnumWidget::apply()
 {
-    for(ButtonMap::const_iterator i = m_buttons.constBegin(); i != m_buttons.constEnd(); ++i) {
-        if (i.value()->isChecked()) {
-            if (m_object)
-                m_object->setVisibility(i.key());
-            else
-                m_widget->setVisibility(i.key(), m_role);
-        }
-    }
+    if(ui->rb_public->isChecked())
+        m_object->setVisibility(Uml::Visibility::Public);
+    else if(ui->rb_protected->isChecked())
+        m_object->setVisibility(Uml::Visibility::Protected);
+    else if(ui->rb_private->isChecked())
+        m_object->setVisibility(Uml::Visibility::Private);
+    else
+        m_object->setVisibility(Uml::Visibility::Implementation);
 }
 
-void VisibilityEnumWidget::init(const QString &title)
+void VisibilityEnumWidget::initMaps()
 {
-    QHBoxLayout *layout = new QHBoxLayout;
-    layout->setContentsMargins(0,0,0,0);
+    m_texts[Uml::Visibility::Public] = i18nc("public visibility", "P&ublic");
+    m_texts[Uml::Visibility::Protected] = i18nc("protected visibility", "Pro&tected");
+    m_texts[Uml::Visibility::Private] = i18nc("private visibility", "P&rivate");
+    m_texts[Uml::Visibility::Implementation] = i18n("Imple&mentation");
 
-    m_box = new QGroupBox(title, this);
-    QHBoxLayout* boxlayout = new QHBoxLayout(m_box);
-    int margin = fontMetrics().height();
-    boxlayout->setMargin(margin);
-    QList<Uml::Visibility::Enum> orders;
-    orders << Uml::Visibility::Public << Uml::Visibility::Protected << Uml::Visibility::Private << Uml::Visibility::Implementation;
+    m_widgets[Uml::Visibility::Public]= ui->rb_public;
+    m_widgets[Uml::Visibility::Protected]= ui->rb_protected;
+    m_widgets[Uml::Visibility::Private]= ui->rb_private;
+    m_widgets[Uml::Visibility::Implementation]= ui->rb_implementation;
 
-    for(QList<Uml::Visibility::Enum>::const_iterator i = orders.constBegin(); i != orders.constEnd(); ++i) {
-        Uml::Visibility::Enum key = *i;
-        QRadioButton *button = new QRadioButton(m_texts[key], m_box);
-        m_buttons[key] = button;
-        boxlayout->addWidget(button);
-    }
-    layout->addWidget(m_box);
-    setLayout(layout);
 }
+
diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.h b/umbrello/dialogs/widgets/visibilityenumwidget.h
index 477b81eea96496a498789f5a64629941253671a9..e34acd0844e93d8e182e2a037f898c73416bbe8f 100644
--- a/umbrello/dialogs/widgets/visibilityenumwidget.h
+++ b/umbrello/dialogs/widgets/visibilityenumwidget.h
@@ -12,7 +12,7 @@
 #define VISIBILITYENUMWIDGET_H
 
 #include "basictypes.h"
-
+#include "ui_visibilityenumwidget.h"
 #include <QMap>
 #include <QWidget>
 
@@ -28,24 +28,27 @@ class VisibilityEnumWidget : public QWidget
     Q_OBJECT
 public:
     typedef QMap<Uml::Visibility::Enum,QString> TextMap;
-    typedef QMap<Uml::Visibility::Enum,QRadioButton*> ButtonMap;
+    typedef QMap<Uml::Visibility::Enum,QRadioButton*> WidgetsMap;
 
-    explicit VisibilityEnumWidget(UMLObject *o, QWidget *parent=0);
+    explicit VisibilityEnumWidget(QWidget *parent=0);
     VisibilityEnumWidget(AssociationWidget *a, Uml::RoleType::Enum role, QWidget *parent=0);
     ~VisibilityEnumWidget();
 
+    void setUMLObject(UMLObject *o);
     void addToLayout(QVBoxLayout *layout);
     void apply();
 
+private:
+    Ui::visibilityEnumWidget *ui;
+    void initMaps();
+
+
 protected:
     TextMap m_texts;
-    QGroupBox *m_box;
-    ButtonMap m_buttons;
+    WidgetsMap m_widgets;
     UMLObject *m_object;
     AssociationWidget *m_widget;
     Uml::RoleType::Enum m_role;
-
-    void init(const QString &title);
 };
 
 #endif // VISIBILITYENUMWIDGET_H
diff --git a/umbrello/dialogs/widgets/visibilityenumwidget.ui b/umbrello/dialogs/widgets/visibilityenumwidget.ui
new file mode 100644
index 0000000000000000000000000000000000000000..5a42fb6f0fa148fef6f7afa02bdbd126f0d78d8a
--- /dev/null
+++ b/umbrello/dialogs/widgets/visibilityenumwidget.ui
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>visibilityEnumWidget</class>
+ <widget class="QWidget" name="visibilityEnumWidget">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>252</width>
+    <height>97</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QVBoxLayout" name="verticalLayout">
+   <item>
+    <widget class="QGroupBox" name="groupBox">
+     <property name="title">
+      <string>Visibility</string>
+     </property>
+     <layout class="QGridLayout" name="gridLayout">
+      <item row="0" column="0">
+       <widget class="QRadioButton" name="rb_public">
+        <property name="text">
+         <string>Pub&amp;lic</string>
+        </property>
+       </widget>
+      </item>
+      <item row="0" column="1">
+       <widget class="QRadioButton" name="rb_private">
+        <property name="text">
+         <string>Pri&amp;vate</string>
+        </property>
+       </widget>
+      </item>
+      <item row="1" column="0">
+       <widget class="QRadioButton" name="rb_protected">
+        <property name="text">
+         <string>Protected</string>
+        </property>
+       </widget>
+      </item>
+      <item row="1" column="1">
+       <widget class="QRadioButton" name="rb_implementation">
+        <property name="text">
+         <string>I&amp;mplementation</string>
+        </property>
+       </widget>
+      </item>
+     </layout>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/umbrello/docgenerators/docbookgenerator.cpp b/umbrello/docgenerators/docbookgenerator.cpp
index 55f759402bd50bb62e51bbaeac65615caa28b194..d71a9663019d7671de88cb90e0791a24f72b79db 100644
--- a/umbrello/docgenerators/docbookgenerator.cpp
+++ b/umbrello/docgenerators/docbookgenerator.cpp
@@ -105,8 +105,8 @@ void DocbookGenerator::generateDocbookForProjectInto(const KUrl& destDir)
     umlDoc->writeToStatusBar(i18n("Generating Docbook..."));
 
     docbookGeneratorJob = new DocbookGeneratorJob(this);
-    connect(docbookGeneratorJob, &DocbookGeneratorJob::docbookGenerated, this, &DocbookGenerator::slotDocbookGenerationFinished);
-    connect(docbookGeneratorJob, &DocbookGeneratorJob::finished, this, &DocbookGenerator::threadFinished);
+    connect(docbookGeneratorJob, SIGNAL(docbookGenerated(QString)), this, SLOT(slotDocbookGenerationFinished(QString)));
+    connect(docbookGeneratorJob, SIGNAL(finished()), this, SLOT(threadFinished()));
     uDebug()<<"Threading";
     docbookGeneratorJob->start();
 }
diff --git a/umbrello/docgenerators/xhtmlgenerator.cpp b/umbrello/docgenerators/xhtmlgenerator.cpp
index c5851f28dcc902329e127e868e11c70470fc80de..4a4dc2af1ed9557ff657e1954931d173f7d01969 100644
--- a/umbrello/docgenerators/xhtmlgenerator.cpp
+++ b/umbrello/docgenerators/xhtmlgenerator.cpp
@@ -102,7 +102,7 @@ bool XhtmlGenerator::generateXhtmlForProjectInto(const KUrl& destDir)
     docbookGenerator->generateDocbookForProjectInto(destDir);
 
     uDebug() << "Connecting...";
-    connect(docbookGenerator, &DocbookGenerator::finished, this, &XhtmlGenerator::slotDocbookToXhtml);
+    connect(docbookGenerator, SIGNAL(finished(bool)), this, SLOT(slotDocbookToXhtml(bool)));
     return true;
 }
 
@@ -134,8 +134,9 @@ void XhtmlGenerator::slotDocbookToXhtml(bool status)
 #endif
         m_umlDoc->writeToStatusBar(i18n("Generating XHTML..."));
         m_d2xg  = new Docbook2XhtmlGeneratorJob(url, this);
-        connect(m_d2xg, &Docbook2XhtmlGeneratorJob::xhtmlGenerated, this, &XhtmlGenerator::slotHtmlGenerated);
-        connect(m_d2xg, &Docbook2XhtmlGeneratorJob::finished, this, &XhtmlGenerator::threadFinished);
+        connect(m_d2xg, SIGNAL(xhtmlGenerated(QString)),
+                this, SLOT(slotHtmlGenerated(QString)));
+        connect(m_d2xg, SIGNAL(finished()), this, SLOT(threadFinished()));
         uDebug() << "Threading";
         m_d2xg->start();
     }
diff --git a/umbrello/docwindow.cpp b/umbrello/docwindow.cpp
index 055ada6edba0d092b16be1cddc1dd1493bc01fff..2b7300270a80a13f0d87ff8f130169e113d88208 100644
--- a/umbrello/docwindow.cpp
+++ b/umbrello/docwindow.cpp
@@ -91,7 +91,7 @@ DocWindow::DocWindow(UMLDoc * doc, QWidget *parent)
     statusLayout->addWidget(m_nameLabel, 0, 1, 1, 4);
     QCheckBox *box = new QCheckBox();
     box->setToolTip(i18n("Activate documentation edit after focus change."));
-    connect(box, &QCheckBox::stateChanged, this, &DocWindow::slotFocusEnabledChanged);
+    connect(box, SIGNAL(stateChanged(int)), this, SLOT(slotFocusEnabledChanged(int)));
     statusLayout->addWidget(box, 0, 5, 1, 1);
     m_modifiedWidget = new ModifiedWidget(this);
     statusLayout->addWidget(m_modifiedWidget, 0, 6, 1, 1);
@@ -104,7 +104,7 @@ DocWindow::DocWindow(UMLDoc * doc, QWidget *parent)
     docLayout->addWidget(m_docTE);
     docLayout->setMargin(0);
 
-    connect(m_docTE, &KTextEdit::textChanged, this, &DocWindow::slotTextChanged);
+    connect(m_docTE, SIGNAL(textChanged()), this, SLOT(slotTextChanged()));
 }
 
 /**
diff --git a/umbrello/layouts/activity-export.desktop b/umbrello/layouts/activity-export.desktop
index 3e3b1d74a04cc1c5146f66d3501c8b0aa57ff1f6..ca27eced94c6ef5221d85a5ffa768dfa2320743d 100644
--- a/umbrello/layouts/activity-export.desktop
+++ b/umbrello/layouts/activity-export.desktop
@@ -47,7 +47,7 @@ Comment[da]=Eksportér layout for aktivitetsdiagrammer
 Comment[de]=Layout für Aktivitätsdiagramme exportieren
 Comment[el]=Εξαγωγή διάταξης για διαγράμματα δραστηριοτήτων
 Comment[en_GB]=Export Layout for Activity Diagrams
-Comment[es]=Exportar diseño de diagramas de actividades
+Comment[es]=Exportar disposición de diagramas de actividad
 Comment[et]=Tegevusskeemide paigutuse eksport
 Comment[fi]=Aktiviteettikaavioiden vientiasettelu
 Comment[fr]=Disposition de l'exportation pour les diagrammes d'activités
diff --git a/umbrello/layouts/class-export.desktop b/umbrello/layouts/class-export.desktop
index a0e7dbe9e46fdfc117cf9c6ce265eb20fc9d80fc..999a4657568a742c17961449a8679de610bda774 100644
--- a/umbrello/layouts/class-export.desktop
+++ b/umbrello/layouts/class-export.desktop
@@ -47,7 +47,7 @@ Comment[da]=Eksportér layout for klassediagrammer
 Comment[de]=Layout für Klassendiagramme exportieren
 Comment[el]=Εξαγωγή διάταξης για Class διαγράμματα
 Comment[en_GB]=Export Layout for Class Diagrams
-Comment[es]=Exportar diseño de diagramas de clases
+Comment[es]=Exportar disposición de diagramas de clase
 Comment[et]=Klassiskeemide paigutuse eksport
 Comment[fi]=Luokkakaavioiden vientiasettelu
 Comment[fr]=Disposition de l'exportation pour les diagrammes de classes
diff --git a/umbrello/layouts/state-export.desktop b/umbrello/layouts/state-export.desktop
index d86798e3f669bd28cab2b5700172f1200b7f98d6..45c8ec48925cc2790838e0210819b6ad1c05b0fa 100644
--- a/umbrello/layouts/state-export.desktop
+++ b/umbrello/layouts/state-export.desktop
@@ -47,7 +47,7 @@ Comment[da]=Eksportér layout for tilstandsdiagrammer
 Comment[de]=Layout für Zustandsübergangsdiagramme exportieren
 Comment[el]=Εξαγωγή διάταξης για διαγράμματα καταστάσεων
 Comment[en_GB]=Export Layout for State Diagrams
-Comment[es]=Exportar diseño de diagramas de estados
+Comment[es]=Exportar disposición de diagramas de estado
 Comment[et]=Olekuskeemide paigutuse eksport
 Comment[fi]=Tilakaavioiden vientiasettelu
 Comment[fr]=Disposition d'exportation pour les diagrammes d'états
diff --git a/umbrello/org.kde.umbrello.appdata.xml b/umbrello/org.kde.umbrello.appdata.xml
index c268937952b52b26662e5658bc8464553781bd94..687a07840acbd6d45796c8e9a49db9051ee6b2f4 100644
--- a/umbrello/org.kde.umbrello.appdata.xml
+++ b/umbrello/org.kde.umbrello.appdata.xml
@@ -4,13 +4,13 @@
   <metadata_license>CC0-1.0</metadata_license>
   <project_license>GPL-2.0+</project_license>
   <name>Umbrello</name>
-  <name xml:lang="ast">Umbrello</name>
   <name xml:lang="ca">Umbrello</name>
   <name xml:lang="ca-valencia">Umbrello</name>
   <name xml:lang="cs">Umbrello</name>
   <name xml:lang="de">Umbrello</name>
   <name xml:lang="en-GB">Umbrello</name>
   <name xml:lang="es">Umbrello</name>
+  <name xml:lang="et">Umbrello</name>
   <name xml:lang="fi">Umbrello</name>
   <name xml:lang="gl">Umbrello</name>
   <name xml:lang="it">Umbrello</name>
@@ -23,7 +23,6 @@
   <name xml:lang="sv">Umbrello</name>
   <name xml:lang="uk">Umbrello</name>
   <name xml:lang="x-test">xxUmbrelloxx</name>
-  <name xml:lang="zh-CN">Umbrello</name>
   <summary>UML Modeller</summary>
   <summary xml:lang="ca">Modelador UML</summary>
   <summary xml:lang="ca-valencia">Modelador UML</summary>
@@ -31,6 +30,7 @@
   <summary xml:lang="de">UML-Modeller</summary>
   <summary xml:lang="en-GB">UML Modeller</summary>
   <summary xml:lang="es">Modelador UML</summary>
+  <summary xml:lang="et">UML-i modelleerimise rakendus</summary>
   <summary xml:lang="fi">UML-mallinnusohjelma</summary>
   <summary xml:lang="gl">Modelador de UML</summary>
   <summary xml:lang="it">Modellatore UML</summary>
@@ -43,7 +43,6 @@
   <summary xml:lang="sv">UML-modellering</summary>
   <summary xml:lang="uk">Засіб моделювання UML</summary>
   <summary xml:lang="x-test">xxUML Modellerxx</summary>
-  <summary xml:lang="zh-CN">UML 建模工具</summary>
   <description>
     <p>
       Umbrello is a Unified Modelling Language (UML) modelling tool and code generator.
@@ -55,6 +54,7 @@
     <p xml:lang="de">Umbrello ist ein Modellierungswerkzeug und Quelltextgenerator für die vereinheitlichte Modellierungssprache (UML). Es können Diagramme von Software und anderen System im Industriestandard UML sowie Quelltext für verschiedene Sprachen erstellt werden.</p>
     <p xml:lang="en-GB">Umbrello is a Unified Modelling Language (UML) modelling tool and code generator. It can create diagrams of software and other systems in the industry-standard UML format, and can also generate code from UML diagrams in a variety of programming languages.</p>
     <p xml:lang="es">Umbrello es una herramienta de modelado y de generación de código para el lenguaje unificado de modelado (UML). Puede crear diagramas de software y de otros sistemas en el formato estándar de la industria UML, además de generar código a partir de diagramas UML en diversos lenguajes de programación.</p>
+    <p xml:lang="et">Umbrello on unifitseeritud modelleerimiskeele UML modelleerimistööriist ja koodi genereerija. See võib luua tarkvara ja muude süsteemide skeeme standardses UML-vormingus, samuti genereerida UML-skeemide põhjal koodi mitmes programmeerimiskeeles.</p>
     <p xml:lang="fi">Umbrello on UML-mallinnusohjelma. Umbrellolla voi luoda kaavioita ohjelmistoista ja muista järjestelmistä käyttäen standardia UML-muotoa. Sillä voi myös luoda koodin UML-kaavioiden perusteella useille ohjelmointikielille.</p>
     <p xml:lang="gl">Umbrello é unha ferramenta de modelaxe e xerador de código baseado na linguaxe de modelaxe UML. Pode crear diagramas de software e doutros sistemas usando o formato estándar da industria, UML, e pode tamén xerar código a partir de diagramas UML en varios linguaxes de programación.</p>
     <p xml:lang="it">Umbrello è uno strumento per diagrammi UML e un generatore di codice. Può creare diagrammi di software e altri sistemi nello standard industriale UML, e può anche generare codice partendo dai diagrammi UML in diversi linguaggi di programmazione.</p>
@@ -74,6 +74,7 @@
     <p xml:lang="de">Funktionen:</p>
     <p xml:lang="en-GB">Features:</p>
     <p xml:lang="es">Funciones:</p>
+    <p xml:lang="et">Omadused:</p>
     <p xml:lang="fi">Ominaisuuksia:</p>
     <p xml:lang="gl">Funcionalidades:</p>
     <p xml:lang="it">Funzionalità:</p>
@@ -86,7 +87,6 @@
     <p xml:lang="sv">Funktioner:</p>
     <p xml:lang="uk">Можливості:</p>
     <p xml:lang="x-test">xxFeatures:xx</p>
-    <p xml:lang="zh-CN">功能：</p>
     <ul>
       <li>Supported formats: XMI</li>
       <li xml:lang="ca">Formats acceptats: XMI</li>
@@ -95,6 +95,7 @@
       <li xml:lang="de">Unterstützte Formate: XMI</li>
       <li xml:lang="en-GB">Supported formats: XMI</li>
       <li xml:lang="es">Formatos permitidos: XMI</li>
+      <li xml:lang="et">Toetatud vormingud: XMI</li>
       <li xml:lang="fi">Tukee XMI-tiedostomuotoa</li>
       <li xml:lang="gl">Formatos compatíbeis: XMI.</li>
       <li xml:lang="it">Formati supportati: XMI</li>
@@ -103,11 +104,10 @@
       <li xml:lang="pt">Formatos suportados: XMI</li>
       <li xml:lang="pt-BR">Formatos suportados: XMI</li>
       <li xml:lang="sk">Podporované formáty: XMI</li>
-      <li xml:lang="sl">Podprte vrste: XMI</li>
+      <li xml:lang="sl">Podprte oblike: XMI</li>
       <li xml:lang="sv">Format som stöds: XMI</li>
       <li xml:lang="uk">Підтримувані формати: XMI</li>
       <li xml:lang="x-test">xxSupported formats: XMIxx</li>
-      <li xml:lang="zh-CN">支持格式：XMI</li>
       <li>Several type of diagrams supported: use case, class, sequence, communication, state, activity, component, deployment, entity relationship</li>
       <li xml:lang="ca">Es permeten diversos tipus de diagrames: cas d'ús, classe, seqüència, comunicació, estat, activitat, component, desplegament, entitat relació</li>
       <li xml:lang="ca-valencia">Es permeten diversos tipus de diagrames: cas d'ús, classe, seqüència, comunicació, estat, activitat, component, desplegament, entitat relació</li>
diff --git a/umbrello/refactoring/refactoringassistant.cpp b/umbrello/refactoring/refactoringassistant.cpp
index 9487e0308a953c72d0c192cd1f3e5e29ca1f1e38..127bd939481c091c016cdb14040f844606b6d58a 100644
--- a/umbrello/refactoring/refactoringassistant.cpp
+++ b/umbrello/refactoring/refactoringassistant.cpp
@@ -53,8 +53,10 @@ RefactoringAssistant::RefactoringAssistant(UMLDoc *doc, UMLClassifier *obj, QWid
 
     m_menu = new QMenu(this);
 
-    connect(this, &RefactoringAssistant::itemDoubleClicked, this, &RefactoringAssistant::itemExecuted);
-    connect(this, &RefactoringAssistant::customContextMenuRequested, this, &RefactoringAssistant::showContextMenu);
+    connect(this, SIGNAL(itemDoubleClicked(QTreeWidgetItem*,int)),
+            this, SLOT(itemExecuted(QTreeWidgetItem*,int)));
+    connect(this, SIGNAL(customContextMenuRequested(QPoint)),
+            this, SLOT(showContextMenu(QPoint)));
 
     resize(300, 400);
     refactor(obj);
@@ -231,7 +233,7 @@ void RefactoringAssistant::operationAdded(UMLClassifierListItem *listItem)
         if (folder->text(1) == QLatin1String("operations")) {
             item = new QTreeWidgetItem(folder, QStringList(op->name()));
             m_umlObjectMap[item] = op;
-            connect(op, &UMLOperation::modified, this, &RefactoringAssistant::objectModified);
+            connect(op, SIGNAL(modified()), this, SLOT(objectModified()));
             setVisibilityIcon(item, op);
             DEBUG(DBG_SRC) << "operation = " << op->name() << " added!";  //:TODO:
             break;
@@ -250,7 +252,7 @@ void RefactoringAssistant::operationRemoved(UMLClassifierListItem *listItem)
     if (!item) {
         return;
     }
-    disconnect(op, &UMLOperation::modified, this, &RefactoringAssistant::objectModified);
+    disconnect(op, SIGNAL(modified()), this, SLOT(objectModified()));
     m_umlObjectMap.remove(item);
     delete item;
 }
@@ -278,7 +280,7 @@ void RefactoringAssistant::attributeAdded(UMLClassifierListItem *listItem)
         if (folder->text(1) == QLatin1String("attributes")) {
             item = new QTreeWidgetItem(folder, QStringList(att->name()));
             m_umlObjectMap[item] = att;
-            connect(att, &UMLAttribute::modified, this, &RefactoringAssistant::objectModified);
+            connect(att, SIGNAL(modified()), this, SLOT(objectModified()));
             setVisibilityIcon(item, att);
             DEBUG(DBG_SRC) << "attribute = " << att->name() << " added!";  //:TODO:
             break;
@@ -299,7 +301,7 @@ void RefactoringAssistant::attributeRemoved(UMLClassifierListItem *listItem)
         uWarning() << "Attribute is not in tree!";
         return;
     }
-    disconnect(att, &UMLAttribute::modified, this, &RefactoringAssistant::objectModified);
+    disconnect(att, SIGNAL(modified()), this, SLOT(objectModified()));
     m_umlObjectMap.remove(item);
     delete item;
     DEBUG(DBG_SRC) << "attribute = " << att->name() << " deleted!";  //:TODO:
@@ -655,11 +657,15 @@ void RefactoringAssistant::addClassifier(UMLClassifier *classifier, QTreeWidgetI
     }
     m_alreadySeen << classifier;
 
-    connect(classifier, &UMLClassifier::modified, this, &RefactoringAssistant::objectModified);
+    connect(classifier, SIGNAL(modified()),
+            this, SLOT(objectModified()));
 
     // add attributes
-    connect(classifier, &UMLClassifier::attributeAdded, this, &RefactoringAssistant::attributeAdded);
-    connect(classifier, &UMLClassifier::attributeRemoved, this, &RefactoringAssistant::attributeRemoved);
+    connect(classifier, SIGNAL(attributeAdded(UMLClassifierListItem*)),
+            this, SLOT(attributeAdded(UMLClassifierListItem*)));
+    connect(classifier, SIGNAL(attributeRemoved(UMLClassifierListItem*)),
+            this, SLOT(attributeRemoved(UMLClassifierListItem*)));
+
     QStringList itemTextAt;
     itemTextAt << i18n("Attributes") << QLatin1String("attributes");
     QTreeWidgetItem *attsFolder = new QTreeWidgetItem(classifierItem, itemTextAt);
@@ -671,8 +677,10 @@ void RefactoringAssistant::addClassifier(UMLClassifier *classifier, QTreeWidgetI
     }
 
     // add operations
-    connect(classifier, &UMLClassifier::operationAdded, this, &RefactoringAssistant::operationAdded);
-    connect(classifier, &UMLClassifier::operationRemoved, this, &RefactoringAssistant::operationRemoved);
+    connect(classifier, SIGNAL(operationAdded(UMLClassifierListItem*)),
+            this, SLOT(operationAdded(UMLClassifierListItem*)));
+    connect(classifier, SIGNAL(operationRemoved(UMLClassifierListItem*)),
+            this, SLOT(operationRemoved(UMLClassifierListItem*)));
 
     QStringList itemTextOp;
     itemTextOp << i18n("Operations") << QLatin1String("operations");
diff --git a/umbrello/stereotypeswindow.cpp b/umbrello/stereotypeswindow.cpp
index f7e181c04e05b64caa765fad915d23c2cbb3293e..803547742015a8a3c15c7efb1ec3b4d466081eb2 100644
--- a/umbrello/stereotypeswindow.cpp
+++ b/umbrello/stereotypeswindow.cpp
@@ -45,7 +45,7 @@ StereotypesWindow::StereotypesWindow(QWidget *parent)
 #endif
     setWidget(m_stereotypesTree);
 
-    connect(m_stereotypesTree, &QTableView::doubleClicked, this, &StereotypesWindow::slotStereotypesDoubleClicked);
+    connect(m_stereotypesTree, SIGNAL(doubleClicked(QModelIndex)), this, SLOT(slotStereotypesDoubleClicked(QModelIndex)));
 }
 
 StereotypesWindow::~StereotypesWindow()
diff --git a/umbrello/toolbarstate.cpp b/umbrello/toolbarstate.cpp
index aa27f1bbdc814b1fd9f46a936bae5c5c843f60f2..702b07acfa2f2d44d74ef4af61cbcb267f805afb 100644
--- a/umbrello/toolbarstate.cpp
+++ b/umbrello/toolbarstate.cpp
@@ -45,8 +45,10 @@ void ToolBarState::init()
     m_currentWidget = 0;
     m_currentAssociation = 0;
 
-    connect(m_pUMLScene, &UMLScene::sigAssociationRemoved, this, &ToolBarState::slotAssociationRemoved);
-    connect(m_pUMLScene, &UMLScene::sigWidgetRemoved, this, &ToolBarState::slotWidgetRemoved);
+    connect(m_pUMLScene, SIGNAL(sigAssociationRemoved(AssociationWidget*)),
+            this, SLOT(slotAssociationRemoved(AssociationWidget*)));
+    connect(m_pUMLScene, SIGNAL(sigWidgetRemoved(UMLWidget*)),
+            this, SLOT(slotWidgetRemoved(UMLWidget*)));
 }
 
 /**
@@ -56,9 +58,10 @@ void ToolBarState::init()
  */
 void ToolBarState::cleanBeforeChange()
 {
-
-    disconnect(m_pUMLScene, &UMLScene::sigAssociationRemoved, this, &ToolBarState::slotAssociationRemoved);
-    disconnect(m_pUMLScene, &UMLScene::sigWidgetRemoved, this, &ToolBarState::slotWidgetRemoved);
+    disconnect(m_pUMLScene, SIGNAL(sigAssociationRemoved(AssociationWidget*)),
+               this, SLOT(slotAssociationRemoved(AssociationWidget*)));
+    disconnect(m_pUMLScene, SIGNAL(sigWidgetRemoved(UMLWidget*)),
+               this, SLOT(slotWidgetRemoved(UMLWidget*)));
 }
 
 /**
diff --git a/umbrello/uml.cpp b/umbrello/uml.cpp
index 9dfaba2052992b255b95e2a85b0220116be68496..72f3018d04cd06f6dac3cc3d3c0de737fb29a00c 100644
--- a/umbrello/uml.cpp
+++ b/umbrello/uml.cpp
@@ -221,8 +221,8 @@ UMLApp::UMLApp(QWidget* parent)
     }
 
     //connect zoomSelect menu
-    connect(m_zoomSelect, &QMenu::aboutToShow, this, &UMLApp::setupZoomMenu);
-    connect(m_zoomSelect, &QMenu::triggered, this, &UMLApp::slotSetZoom);
+    connect(m_zoomSelect, SIGNAL(aboutToShow()), this, SLOT(setupZoomMenu()));
+    connect(m_zoomSelect, SIGNAL(triggered(QAction*)), this, SLOT(slotSetZoom(QAction*)));
 
     setAutoSaveSettings();
     m_toolsbar->setToolButtonStyle(Qt::ToolButtonIconOnly);  // too many items for text, really we want a toolbox widget
@@ -233,8 +233,8 @@ UMLApp::UMLApp(QWidget* parent)
  */
 UMLApp::~UMLApp()
 {
-    disconnect(m_pZoomInPB, &QPushButton::clicked, this, &UMLApp::slotZoomIn);
-    disconnect(m_pZoomSlider, &QSlider::valueChanged, this, &UMLApp::slotZoomSliderMoved);
+    disconnect(m_pZoomInPB, SIGNAL(clicked()), this, SLOT(slotZoomIn()));
+    disconnect(m_pZoomSlider, SIGNAL(valueChanged(int)), this, SLOT(slotZoomSliderMoved(int)));
 
     delete m_birdView;
     delete m_clipTimer;
@@ -305,8 +305,9 @@ void UMLApp::initActions()
     editRedo->setPriority(QAction::LowPriority);   // icon only
 #endif
 
-    disconnect(m_pUndoStack, &QUndoStack::undoTextChanged, editUndo, 0);
-    disconnect(m_pUndoStack, &QUndoStack::redoTextChanged, editRedo, 0);
+    disconnect(m_pUndoStack, SIGNAL(undoTextChanged(QString)), editUndo, 0);
+    disconnect(m_pUndoStack, SIGNAL(redoTextChanged(QString)), editRedo, 0);
+
     editCut = KStandardAction::cut(this, SLOT(slotEditCut()), actionCollection());
     editCopy = KStandardAction::copy(this, SLOT(slotEditCopy()), actionCollection());
     editPaste = KStandardAction::paste(this, SLOT(slotEditPaste()), actionCollection());
@@ -318,42 +319,41 @@ void UMLApp::initActions()
 
     QAction* fileExportDocbook = actionCollection()->addAction(QLatin1String("file_export_docbook"));
     fileExportDocbook->setText(i18n("&Export model to DocBook"));
-    connect(fileExportDocbook, &QAction::triggered, this, &UMLApp::slotFileExportDocbook);
+    connect(fileExportDocbook, SIGNAL(triggered(bool)), this, SLOT(slotFileExportDocbook()));
 
     QAction* fileExportXhtml = actionCollection()->addAction(QLatin1String("file_export_xhtml"));
     fileExportXhtml->setText(i18n("&Export model to XHTML"));
-    connect(fileExportXhtml, &QAction::triggered, this, &UMLApp::slotFileExportXhtml);
+    connect(fileExportXhtml, SIGNAL(triggered(bool)), this, SLOT(slotFileExportXhtml()));
 
     QAction* classWizard = actionCollection()->addAction(QLatin1String("class_wizard"));
     classWizard->setText(i18n("&New Class Wizard..."));
-    connect(classWizard, &QAction::triggered, this, &UMLApp::slotClassWizard);
+    connect(classWizard, SIGNAL(triggered(bool)), this, SLOT(slotClassWizard()));
 
     QAction* addDefDatatypes = actionCollection()->addAction(QLatin1String("create_default_datatypes"));
     addDefDatatypes->setText(i18n("&Add Default Datatypes for Active Language"));
-    connect(addDefDatatypes, &QAction::triggered, this, &UMLApp::slotAddDefaultDatatypes);
+    connect(addDefDatatypes, SIGNAL(triggered(bool)), this, SLOT(slotAddDefaultDatatypes()));
 
     QAction* preferences = KStandardAction::preferences(this, SLOT(slotPrefs()), actionCollection());
 
     QAction* impWizard = actionCollection()->addAction(QLatin1String("importing_wizard"));
     impWizard->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Import_Files));
     impWizard->setText(i18n("Code &Importing Wizard..."));
-    connect(impWizard, &QAction::triggered, this, &UMLApp::slotImportingWizard);
+    connect(impWizard, SIGNAL(triggered(bool)), this, SLOT(slotImportingWizard()));
 
     QAction* importProject = actionCollection()->addAction(QLatin1String("import_project"));
     importProject->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Import_Project));
-
     importProject->setText(i18n("Import from Directory..."));
     connect(importProject, SIGNAL(triggered(bool)), this, SLOT(slotImportProject()));
 
     QAction* genWizard = actionCollection()->addAction(QLatin1String("generation_wizard"));
     genWizard->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Export_Files));
     genWizard->setText(i18n("&Code Generation Wizard..."));
-    connect(genWizard, &QAction::triggered, this, &UMLApp::slotExecGenerationWizard);
+    connect(genWizard, SIGNAL(triggered(bool)), this, SLOT(slotExecGenerationWizard()));
 
     QAction* genAll = actionCollection()->addAction(QLatin1String("generate_all"));
     genAll->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Export_Files));
     genAll->setText(i18n("&Generate All Code"));
-    connect(genAll, &QAction::triggered, this, &UMLApp::slotGenerateAllCode);
+    connect(genAll, SIGNAL(triggered(bool)), this, SLOT(slotGenerateAllCode()));
 
     setProgLangAction(Uml::ProgrammingLanguage::ActionScript, "ActionScript",    "setLang_actionscript");
     setProgLangAction(Uml::ProgrammingLanguage::Ada,          "Ada",             "setLang_ada");
@@ -376,26 +376,26 @@ void UMLApp::initActions()
     setProgLangAction(Uml::ProgrammingLanguage::Vala,         "Vala",            "setLang_vala");
     setProgLangAction(Uml::ProgrammingLanguage::XMLSchema,    "XMLSchema",       "setLang_xmlschema");
 
-    connect(m_langAct[Uml::ProgrammingLanguage::ActionScript],  &QAction::triggered, this, &UMLApp::setLang_actionscript);
-    connect(m_langAct[Uml::ProgrammingLanguage::Ada] ,          &QAction::triggered, this, &UMLApp::setLang_ada);
-    connect(m_langAct[Uml::ProgrammingLanguage::Cpp],           &QAction::triggered, this, &UMLApp::setLang_cpp);
-    connect(m_langAct[Uml::ProgrammingLanguage::CSharp],        &QAction::triggered, this, &UMLApp::setLang_csharp);
-    connect(m_langAct[Uml::ProgrammingLanguage::D],             &QAction::triggered, this, &UMLApp::setLang_d);
-    connect(m_langAct[Uml::ProgrammingLanguage::IDL],           &QAction::triggered, this, &UMLApp::setLang_idl);
-    connect(m_langAct[Uml::ProgrammingLanguage::Java],          &QAction::triggered, this, &UMLApp::setLang_java);
-    connect(m_langAct[Uml::ProgrammingLanguage::JavaScript],    &QAction::triggered, this, &UMLApp::setLang_javascript);
-    connect(m_langAct[Uml::ProgrammingLanguage::MySQL],         &QAction::triggered, this, &UMLApp::setLang_mysql);
-    connect(m_langAct[Uml::ProgrammingLanguage::Pascal],        &QAction::triggered, this, &UMLApp::setLang_pascal);
-    connect(m_langAct[Uml::ProgrammingLanguage::Perl],          &QAction::triggered, this, &UMLApp::setLang_perl);
-    connect(m_langAct[Uml::ProgrammingLanguage::PHP],           &QAction::triggered, this, &UMLApp::setLang_php);
-    connect(m_langAct[Uml::ProgrammingLanguage::PHP5],          &QAction::triggered, this, &UMLApp::setLang_php5);
-    connect(m_langAct[Uml::ProgrammingLanguage::PostgreSQL],    &QAction::triggered, this, &UMLApp::setLang_postgresql);
-    connect(m_langAct[Uml::ProgrammingLanguage::Python],        &QAction::triggered, this, &UMLApp::setLang_python);
-    connect(m_langAct[Uml::ProgrammingLanguage::Ruby],          &QAction::triggered, this, &UMLApp::setLang_ruby);
-    connect(m_langAct[Uml::ProgrammingLanguage::SQL],           &QAction::triggered, this, &UMLApp::setLang_sql);
-    connect(m_langAct[Uml::ProgrammingLanguage::Tcl],           &QAction::triggered, this, &UMLApp::setLang_tcl);
-    connect(m_langAct[Uml::ProgrammingLanguage::Vala],          &QAction::triggered, this, &UMLApp::setLang_vala);
-    connect(m_langAct[Uml::ProgrammingLanguage::XMLSchema],     &QAction::triggered, this, &UMLApp::setLang_xmlschema);
+    connect(m_langAct[Uml::ProgrammingLanguage::ActionScript], SIGNAL(triggered()), this, SLOT(setLang_actionscript()));
+    connect(m_langAct[Uml::ProgrammingLanguage::Ada],          SIGNAL(triggered()), this, SLOT(setLang_ada()));
+    connect(m_langAct[Uml::ProgrammingLanguage::Cpp],          SIGNAL(triggered()), this, SLOT(setLang_cpp()));
+    connect(m_langAct[Uml::ProgrammingLanguage::CSharp],       SIGNAL(triggered()), this, SLOT(setLang_csharp()));
+    connect(m_langAct[Uml::ProgrammingLanguage::D],            SIGNAL(triggered()), this, SLOT(setLang_d()));
+    connect(m_langAct[Uml::ProgrammingLanguage::IDL],          SIGNAL(triggered()), this, SLOT(setLang_idl()));
+    connect(m_langAct[Uml::ProgrammingLanguage::Java],         SIGNAL(triggered()), this, SLOT(setLang_java()));
+    connect(m_langAct[Uml::ProgrammingLanguage::JavaScript],   SIGNAL(triggered()), this, SLOT(setLang_javascript()));
+    connect(m_langAct[Uml::ProgrammingLanguage::MySQL],        SIGNAL(triggered()), this, SLOT(setLang_mysql()));
+    connect(m_langAct[Uml::ProgrammingLanguage::Pascal],       SIGNAL(triggered()), this, SLOT(setLang_pascal()));
+    connect(m_langAct[Uml::ProgrammingLanguage::Perl],         SIGNAL(triggered()), this, SLOT(setLang_perl()));
+    connect(m_langAct[Uml::ProgrammingLanguage::PHP],          SIGNAL(triggered()), this, SLOT(setLang_php()));
+    connect(m_langAct[Uml::ProgrammingLanguage::PHP5],         SIGNAL(triggered()), this, SLOT(setLang_php5()));
+    connect(m_langAct[Uml::ProgrammingLanguage::PostgreSQL],   SIGNAL(triggered()), this, SLOT(setLang_postgresql()));
+    connect(m_langAct[Uml::ProgrammingLanguage::Python],       SIGNAL(triggered()), this, SLOT(setLang_python()));
+    connect(m_langAct[Uml::ProgrammingLanguage::Ruby],         SIGNAL(triggered()), this, SLOT(setLang_ruby()));
+    connect(m_langAct[Uml::ProgrammingLanguage::SQL],          SIGNAL(triggered()), this, SLOT(setLang_sql()));
+    connect(m_langAct[Uml::ProgrammingLanguage::Tcl],          SIGNAL(triggered()), this, SLOT(setLang_tcl()));
+    connect(m_langAct[Uml::ProgrammingLanguage::Vala],         SIGNAL(triggered()), this, SLOT(setLang_vala()));
+    connect(m_langAct[Uml::ProgrammingLanguage::XMLSchema],    SIGNAL(triggered()), this, SLOT(setLang_xmlschema()));
 
     fileNew->setToolTip(i18n("Creates a new document"));
     fileOpen->setToolTip(i18n("Opens an existing document"));
@@ -417,7 +417,7 @@ void UMLApp::initActions()
     deleteSelectedWidget->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Delete));
     deleteSelectedWidget->setText(i18nc("delete selected widget", "Delete &Selected"));
     deleteSelectedWidget->setShortcut(QKeySequence(Qt::Key_Delete));
-    connect(deleteSelectedWidget, &QAction::triggered, this, &UMLApp::slotDeleteSelected);
+    connect(deleteSelectedWidget, SIGNAL(triggered(bool)), this, SLOT(slotDeleteSelected()));
 
     // The different views
     newDiagram = actionCollection()->add<KActionMenu>(QLatin1String("new_view"));
@@ -427,113 +427,113 @@ void UMLApp::initActions()
     QAction* classDiagram = actionCollection()->addAction(QLatin1String("new_class_diagram"));
     classDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Diagram_Class));
     classDiagram->setText(i18n("&Class Diagram..."));
-    connect(classDiagram, &QAction::triggered, this, &UMLApp::slotClassDiagram);
+    connect(classDiagram, SIGNAL(triggered(bool)), this, SLOT(slotClassDiagram()));
     newDiagram->addAction(classDiagram);
 
     QAction* sequenceDiagram= actionCollection()->addAction(QLatin1String("new_sequence_diagram"));
     sequenceDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Diagram_Sequence));
     sequenceDiagram->setText(i18n("&Sequence Diagram..."));
-    connect(sequenceDiagram, &QAction::triggered, this, &UMLApp::slotSequenceDiagram);
+    connect(sequenceDiagram, SIGNAL(triggered(bool)), this, SLOT(slotSequenceDiagram()));
     newDiagram->addAction(sequenceDiagram);
 
     QAction* collaborationDiagram = actionCollection()->addAction(QLatin1String("new_collaboration_diagram"));
     collaborationDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Diagram_Collaboration));
     collaborationDiagram->setText(i18n("C&ommunication Diagram..."));
-    connect(collaborationDiagram, &QAction::triggered, this, &UMLApp::slotCollaborationDiagram);
+    connect(collaborationDiagram, SIGNAL(triggered(bool)), this, SLOT(slotCollaborationDiagram()));
     newDiagram->addAction(collaborationDiagram);
 
     QAction* useCaseDiagram = actionCollection()->addAction(QLatin1String("new_use_case_diagram"));
     useCaseDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Diagram_Usecase));
     useCaseDiagram->setText(i18n("&Use Case Diagram..."));
-    connect(useCaseDiagram, &QAction::triggered, this, &UMLApp::slotUseCaseDiagram);
+    connect(useCaseDiagram, SIGNAL(triggered(bool)), this, SLOT(slotUseCaseDiagram()));
     newDiagram->addAction(useCaseDiagram);
 
     QAction* stateDiagram = actionCollection()->addAction(QLatin1String("new_state_diagram"));
     stateDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Diagram_State));
     stateDiagram->setText(i18n("S&tate Diagram..."));
-    connect(stateDiagram, &QAction::triggered, this, &UMLApp::slotStateDiagram);
+    connect(stateDiagram, SIGNAL(triggered(bool)), this, SLOT(slotStateDiagram()));
     newDiagram->addAction(stateDiagram);
 
     QAction* activityDiagram = actionCollection()->addAction(QLatin1String("new_activity_diagram"));
     activityDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Diagram_Activity));
     activityDiagram->setText(i18n("&Activity Diagram..."));
-    connect(activityDiagram, &QAction::triggered, this, &UMLApp::slotActivityDiagram);
+    connect(activityDiagram, SIGNAL(triggered(bool)), this, SLOT(slotActivityDiagram()));
     newDiagram->addAction(activityDiagram);
 
     QAction* componentDiagram = actionCollection()->addAction(QLatin1String("new_component_diagram"));
     componentDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Diagram_Component));
     componentDiagram->setText(i18n("Co&mponent Diagram..."));
-    connect(componentDiagram, &QAction::triggered, this, &UMLApp::slotComponentDiagram);
+    connect(componentDiagram, SIGNAL(triggered(bool)), this, SLOT(slotComponentDiagram()));
     newDiagram->addAction(componentDiagram);
 
     QAction* deploymentDiagram = actionCollection()->addAction(QLatin1String("new_deployment_diagram"));
     deploymentDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Diagram_Deployment));
     deploymentDiagram->setText(i18n("&Deployment Diagram..."));
-    connect(deploymentDiagram, &QAction::triggered, this, &UMLApp::slotDeploymentDiagram);
+    connect(deploymentDiagram, SIGNAL(triggered(bool)), this, SLOT(slotDeploymentDiagram()));
     newDiagram->addAction(deploymentDiagram);
 
     QAction* entityRelationshipDiagram = actionCollection()->addAction(QLatin1String("new_entityrelationship_diagram"));
     entityRelationshipDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Diagram_EntityRelationship));
     entityRelationshipDiagram->setText(i18n("&Entity Relationship Diagram..."));
-    connect(entityRelationshipDiagram, &QAction::triggered, this, &UMLApp::slotEntityRelationshipDiagram);
+    connect(entityRelationshipDiagram, SIGNAL(triggered(bool)), this, SLOT(slotEntityRelationshipDiagram()));
     newDiagram->addAction(entityRelationshipDiagram);
 
     viewShowTree = actionCollection()->add<KToggleAction>(QLatin1String("view_show_tree"));
     viewShowTree->setText(i18n("&Tree View"));
-    connect(viewShowTree, &QAction::triggered, this, &UMLApp::slotShowTreeView);
+    connect(viewShowTree, SIGNAL(triggered(bool)), this, SLOT(slotShowTreeView(bool)));
 
     viewShowDebug = actionCollection()->add<KToggleAction>(QLatin1String("view_show_debug"));
     viewShowDebug->setText(i18n("&Debugging"));
-    connect(viewShowDebug, &QAction::triggered, this, &UMLApp::slotShowDebugView);
+    connect(viewShowDebug, SIGNAL(triggered(bool)), this, SLOT(slotShowDebugView(bool)));
 
     viewShowDoc = actionCollection()->add<KToggleAction>(QLatin1String("view_show_doc"));
     viewShowDoc->setText(i18n("&Documentation"));
-    connect(viewShowDebug, &QAction::triggered, this, &UMLApp::slotShowDocumentationView);
+    connect(viewShowDoc, SIGNAL(triggered(bool)), this, SLOT(slotShowDocumentationView(bool)));
 
     viewShowLog = actionCollection()->add<KToggleAction>(QLatin1String("view_show_log"));
     viewShowLog->setText(i18n("&Logging"));
-    connect(viewShowLog, &QAction::triggered, this, &UMLApp::slotShowLogView);
+    connect(viewShowLog, SIGNAL(triggered(bool)), this, SLOT(slotShowLogView(bool)));
 
     viewShowCmdHistory = actionCollection()->add<KToggleAction>(QLatin1String("view_show_undo"));
     viewShowCmdHistory->setText(i18n("&Command history"));
-    connect(viewShowCmdHistory, &QAction::triggered, this, &UMLApp::slotShowCmdHistoryView);
+    connect(viewShowCmdHistory, SIGNAL(triggered(bool)), this, SLOT(slotShowCmdHistoryView(bool)));
 
     viewShowBirdView = actionCollection()->add<KToggleAction>(QLatin1String("view_show_bird"));
     viewShowBirdView->setText(i18n("&Bird's eye view"));
-    connect(viewShowBirdView, &QAction::triggered, this, &UMLApp::slotShowBirdView);
+    connect(viewShowBirdView, SIGNAL(triggered(bool)), this, SLOT(slotShowBirdView(bool)));
 
     viewClearDiagram = actionCollection()->addAction(QLatin1String("view_clear_diagram"));
     viewClearDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Clear));
     viewClearDiagram->setText(i18n("&Clear Diagram"));
-    connect(viewClearDiagram, &QAction::triggered, this, &UMLApp::slotCurrentViewClearDiagram);
+    connect(viewClearDiagram, SIGNAL(triggered(bool)), this, SLOT(slotCurrentViewClearDiagram()));
 
     viewSnapToGrid = actionCollection()->add<KToggleAction>(QLatin1String("view_snap_to_grid"));
     viewSnapToGrid->setText(i18n("&Snap to Grid"));
-    connect(viewSnapToGrid, &KToggleAction::triggered, this, &UMLApp::slotCurrentViewToggleSnapToGrid);
+    connect(viewSnapToGrid, SIGNAL(triggered(bool)), this, SLOT(slotCurrentViewToggleSnapToGrid()));
 
     viewShowGrid = actionCollection()->add<KToggleAction>(QLatin1String("view_show_grid"));
     viewShowGrid->setText(i18n("S&how Grid"));
-    connect(viewShowGrid, &KToggleAction::triggered, this, &UMLApp::slotCurrentViewToggleShowGrid);
+    connect(viewShowGrid, SIGNAL(triggered(bool)), this, SLOT(slotCurrentViewToggleShowGrid()));
 
     deleteDiagram = actionCollection()->addAction(QLatin1String("view_delete"));
     deleteDiagram->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Delete));
     deleteDiagram->setText(i18n("&Delete Diagram"));
-    connect(deleteDiagram, &QAction::triggered, this, &UMLApp::slotDeleteDiagram);
+    connect(deleteDiagram, SIGNAL(triggered(bool)), this, SLOT(slotDeleteDiagram()));
 
     viewExportImage = actionCollection()->addAction(QLatin1String("view_export_image"));
     viewExportImage->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Export_Picture));
     viewExportImage->setText(i18n("&Export as Picture..."));
-    connect(viewExportImage, &QAction::triggered, this, &UMLApp::slotCurrentViewExportImage);
+    connect(viewExportImage, SIGNAL(triggered(bool)), this, SLOT(slotCurrentViewExportImage()));
 
     QAction* viewExportImageAll = actionCollection()->addAction(QLatin1String("view_export_images"));
     viewExportImageAll->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Export_Picture));
     viewExportImageAll->setText(i18n("Export &Diagrams as Pictures..."));
-    connect(viewExportImageAll, &QAction::triggered, this, &UMLApp::slotViewsExportImages);
+    connect(viewExportImageAll, SIGNAL(triggered(bool)), this, SLOT(slotViewsExportImages()));
 
     viewProperties = actionCollection()->addAction(QLatin1String("view_properties"));
     viewProperties->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Properties));
     viewProperties->setText(i18n("&Properties"));
-    connect(viewProperties, &QAction::triggered, this, &UMLApp::slotCurrentProperties);
+    connect(viewProperties, SIGNAL(triggered(bool)), this, SLOT(slotCurrentProperties()));
 
     viewSnapToGrid->setChecked(false);
     viewShowGrid->setChecked(false);
@@ -548,47 +548,47 @@ void UMLApp::initActions()
     zoom100Action = actionCollection()->addAction(QLatin1String("zoom100"));
     zoom100Action->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Zoom_100));
     zoom100Action->setText(i18n("Z&oom to 100%"));
-    connect(zoom100Action, &QAction::triggered, this, &UMLApp::slotZoom100);
+    connect(zoom100Action, SIGNAL(triggered(bool)), this, SLOT(slotZoom100()));
 
     QAction* alignRight = actionCollection()->addAction(QLatin1String("align_right"));
     alignRight->setText(i18n("Align Right"));
     alignRight->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Align_Right));
-    connect(alignRight, &QAction::triggered, this, &UMLApp::slotAlignRight);
+    connect(alignRight, SIGNAL(triggered(bool)), this, SLOT(slotAlignRight()));
 
     QAction* alignLeft = actionCollection()->addAction(QLatin1String("align_left"));
     alignLeft->setText(i18n("Align Left"));
     alignLeft->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Align_Left));
-    connect(alignLeft, &QAction::triggered, this, &UMLApp::slotAlignLeft);
+    connect(alignLeft, SIGNAL(triggered(bool)), this, SLOT(slotAlignLeft()));
 
     QAction* alignTop = actionCollection()->addAction(QLatin1String("align_top"));
     alignTop->setText(i18n("Align Top"));
     alignTop->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Align_Top));
-    connect(alignTop, &QAction::triggered, this, &UMLApp::slotAlignTop);
+    connect(alignTop, SIGNAL(triggered(bool)), this, SLOT(slotAlignTop()));
 
     QAction* alignBottom = actionCollection()->addAction(QLatin1String("align_bottom"));
     alignBottom->setText(i18n("Align Bottom"));
     alignBottom->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Align_Bottom));
-    connect(alignBottom, &QAction::triggered, this, &UMLApp::slotAlignBottom);
+    connect(alignBottom, SIGNAL(triggered(bool)), this, SLOT(slotAlignBottom()));
 
     QAction* alignVerticalMiddle = actionCollection()->addAction(QLatin1String("align_vertical_middle"));
     alignVerticalMiddle->setText(i18n("Align Vertical Middle"));
     alignVerticalMiddle->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Align_VerticalMiddle));
-    connect(alignVerticalMiddle, &QAction::triggered, this, &UMLApp::slotAlignVerticalMiddle);
+    connect(alignVerticalMiddle, SIGNAL(triggered(bool)), this, SLOT(slotAlignVerticalMiddle()));
 
     QAction* alignHorizontalMiddle = actionCollection()->addAction(QLatin1String("align_horizontal_middle"));
     alignHorizontalMiddle->setText(i18n("Align Horizontal Middle"));
     alignHorizontalMiddle->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Align_HorizontalMiddle));
-    connect(alignHorizontalMiddle, &QAction::triggered, this, &UMLApp::slotAlignHorizontalMiddle);
+    connect(alignHorizontalMiddle, SIGNAL(triggered(bool)), this, SLOT(slotAlignHorizontalMiddle()));
 
     QAction* alignVerticalDistribute = actionCollection()->addAction(QLatin1String("align_vertical_distribute"));
     alignVerticalDistribute->setText(i18n("Align Vertical Distribute"));
     alignVerticalDistribute->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Align_VerticalDistribute));
-    connect(alignVerticalDistribute, &QAction::triggered, this, &UMLApp::slotAlignVerticalDistribute);
+    connect(alignVerticalDistribute, SIGNAL(triggered(bool)), this, SLOT(slotAlignVerticalDistribute()));
 
     QAction* alignHorizontalDistribute = actionCollection()->addAction(QLatin1String("align_horizontal_distribute"));
     alignHorizontalDistribute->setText(i18n("Align Horizontal Distribute"));
     alignHorizontalDistribute->setIcon(Icon_Utils::SmallIcon(Icon_Utils::it_Align_HorizontalDistribute));
-    connect(alignHorizontalDistribute, &QAction::triggered, this, &UMLApp::slotAlignHorizontalDistribute);
+    connect(alignHorizontalDistribute, SIGNAL(triggered(bool)), this, SLOT(slotAlignHorizontalDistribute()));
 
     QString moveTabLeftString = i18n("&Move Tab Left");
     QString moveTabRightString = i18n("&Move Tab Right");
@@ -601,7 +601,7 @@ void UMLApp::initActions()
     moveTabLeft->setText(QApplication::layoutDirection() ? moveTabRightString : moveTabLeftString);
     moveTabLeft->setShortcut(QApplication::layoutDirection() ?
                  QKeySequence(Qt::CTRL+Qt::SHIFT+Qt::Key_Right) : QKeySequence(Qt::CTRL+Qt::SHIFT+Qt::Key_Left));
-    connect(moveTabLeft, &QAction::triggered, this, &UMLApp::slotMoveTabLeft);
+    connect(moveTabLeft, SIGNAL(triggered(bool)), this, SLOT(slotMoveTabLeft()));
 
 #if QT_VERSION >= 0x050000
     QAction* moveTabRight = actionCollection()->addAction(QLatin1String("move_tab_right"));
@@ -612,7 +612,7 @@ void UMLApp::initActions()
     moveTabRight->setText(QApplication::layoutDirection() ? moveTabLeftString : moveTabRightString);
     moveTabRight->setShortcut(QApplication::layoutDirection() ?
                   QKeySequence(Qt::CTRL+Qt::SHIFT+Qt::Key_Left) : QKeySequence(Qt::CTRL+Qt::SHIFT+Qt::Key_Right));
-    connect(moveTabRight, &QAction::triggered, this, &UMLApp::slotMoveTabRight);
+    connect(moveTabRight, SIGNAL(triggered(bool)), this, SLOT(slotMoveTabRight()));
 
     QString selectTabLeftString = i18n("Select Diagram on Left");
     QString selectTabRightString = i18n("Select Diagram on Right");
@@ -624,7 +624,7 @@ void UMLApp::initActions()
     changeTabLeft->setText(QApplication::layoutDirection() ? selectTabRightString : selectTabLeftString);
     changeTabLeft->setShortcut(QApplication::layoutDirection() ?
                    QKeySequence(Qt::SHIFT+Qt::Key_Right) : QKeySequence(Qt::SHIFT+Qt::Key_Left));
-    connect(changeTabLeft, &QAction::triggered, this, &UMLApp::slotChangeTabLeft);
+    connect(changeTabLeft, SIGNAL(triggered(bool)), this, SLOT(slotChangeTabLeft()));
 
 #if QT_VERSION >= 0x050000
     QAction* changeTabRight = actionCollection()->addAction(QLatin1String("next_tab"));
@@ -634,7 +634,7 @@ void UMLApp::initActions()
     changeTabRight->setText(QApplication::layoutDirection() ? selectTabLeftString : selectTabRightString);
     changeTabRight->setShortcut(QApplication::layoutDirection() ?
                     QKeySequence(Qt::SHIFT+Qt::Key_Left) : QKeySequence(Qt::SHIFT+Qt::Key_Right));
-    connect(changeTabRight, &QAction::triggered, this, &UMLApp::slotChangeTabRight);
+    connect(changeTabRight, SIGNAL(triggered(bool)), this, SLOT(slotChangeTabRight()));
 
 // @todo Check if this should be ported
 //     QMenu* menu = findMenu(QLatin1String("settings"));
@@ -802,7 +802,8 @@ void UMLApp::setupZoomMenu()
  */
 void UMLApp::initStatusBar()
 {
-    connect(m_doc, &UMLDoc::sigWriteToStatusBar, this, &UMLApp::slotStatusMsg);
+    connect(m_doc, SIGNAL(sigWriteToStatusBar(QString)), this, SLOT(slotStatusMsg(QString)));
+
     m_statusBarMessage = new QLabel(i18nc("init status bar", "Ready"));
     statusBar()->addWidget(m_statusBarMessage);
 
@@ -822,14 +823,14 @@ void UMLApp::initStatusBar()
     zoomLayout->addWidget(m_pZoomFitSBTB);
     m_pZoomFitSBTB->setContentsMargins(0, 0, 0, 0);
     //m_pZoomFitSBTB->setDisabled(true);
-    connect(m_pZoomFitSBTB, &StatusBarToolButton::clicked, this, &UMLApp::slotZoomFit);
+    connect(m_pZoomFitSBTB, SIGNAL(clicked()), this, SLOT(slotZoomFit()));
 
     m_pZoomFullSBTB = new StatusBarToolButton(this);
     m_pZoomFullSBTB->setText(i18n("100%"));
     m_pZoomFullSBTB->setGroupPosition(StatusBarToolButton::GroupRight);
     m_pZoomFullSBTB->setContentsMargins(0, 0, 0, 0);
     zoomLayout->addWidget(m_pZoomFullSBTB);
-    connect(m_pZoomFullSBTB, &StatusBarToolButton::clicked, this, &UMLApp::slotZoom100);
+    connect(m_pZoomFullSBTB, SIGNAL(clicked()), this, SLOT(slotZoom100()));
 
     statusBar()->addPermanentWidget(defaultZoomWdg);
 
@@ -842,7 +843,7 @@ void UMLApp::initStatusBar()
     m_pZoomOutPB->setFlat(true);
     m_pZoomOutPB->setMaximumSize(30, 30);
     statusBar()->addPermanentWidget(m_pZoomOutPB);
-    connect(m_pZoomOutPB, &QPushButton::clicked, this, &UMLApp::slotZoomOut);
+    connect(m_pZoomOutPB, SIGNAL(clicked()), this, SLOT(slotZoomOut()));
 
     m_pZoomSlider = new QSlider(Qt::Horizontal, this);
     m_pZoomSlider->setMaximumSize(100, 50);
@@ -851,7 +852,7 @@ void UMLApp::initStatusBar()
     //m_pZoomSlider->setPageStep (1000);
     m_pZoomSlider->setValue (100);
     m_pZoomSlider->setContentsMargins(0, 0, 0, 0);
-    connect(m_pZoomSlider, &QSlider::valueChanged, this, &UMLApp::slotZoomSliderMoved);
+    connect(m_pZoomSlider, SIGNAL(valueChanged(int)), this, SLOT(slotZoomSliderMoved(int)));
 
     statusBar()->addPermanentWidget(m_pZoomSlider);
 
@@ -864,7 +865,7 @@ void UMLApp::initStatusBar()
     m_pZoomInPB->setFlat(true);
     m_pZoomInPB->setMaximumSize(30, 30);
     statusBar()->addPermanentWidget(m_pZoomInPB);
-    connect(m_pZoomInPB, &QPushButton::clicked, this, &UMLApp::slotZoomIn);
+    connect(m_pZoomInPB, SIGNAL(clicked()), this, SLOT(slotZoomIn()));
 }
 
 /**
@@ -891,15 +892,15 @@ void UMLApp::initView()
 #if QT_VERSION >= 0x050000
     m_tabWidget = new QTabWidget(this);
     m_tabWidget->setMovable(true);
-    connect(m_tabWidget, &QTabWidget::tabCloseRequested, this, &UMLApp::slotCloseDiagram);
-    connect(m_tabWidget, &QTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
-    connect(m_tabWidget, &QTabWidget::customContextMenuRequested, this, &UMLApp::slotDiagramPopupMenu);
+    connect(m_tabWidget, SIGNAL(tabCloseRequested(int)), SLOT(slotCloseDiagram(int)));
+    connect(m_tabWidget, SIGNAL(currentChanged(int)), SLOT(slotTabChanged(int)));
+    connect(m_tabWidget, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(slotDiagramPopupMenu(QPoint)));
 #else
     m_tabWidget = new KTabWidget(this);
     m_tabWidget->setAutomaticResizeTabs(true);
-    connect(m_tabWidget, &KTabWidget::closeRequest, this, &UMLApp::slotCloseDiagram);
-    connect(m_tabWidget, &KTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
-    connect(m_tabWidget, &KTabWidget::contextMenu, m_doc, &UMLDoc::slotDiagramPopupMenu);
+    connect(m_tabWidget, SIGNAL(closeRequest(QWidget*)), SLOT(slotCloseDiagram(QWidget*)));
+    connect(m_tabWidget, SIGNAL(currentChanged(QWidget*)), SLOT(slotTabChanged(QWidget*)));
+    connect(m_tabWidget, SIGNAL(contextMenu(QWidget*,QPoint)), m_doc, SLOT(slotDiagramPopupMenu(QWidget*,QPoint)));
 #endif
     m_tabWidget->setTabsClosable(true);
 
@@ -942,13 +943,13 @@ void UMLApp::initView()
     m_listView->setDocument(m_doc);
     m_listView->init();
     m_listDock->setWidget(m_listView);
-    connect(m_listDock, &QDockWidget::visibilityChanged, viewShowTree, &QAction::setChecked);
+    connect(m_listDock, SIGNAL(visibilityChanged(bool)), viewShowTree, SLOT(setChecked(bool)));
 
     m_debugDock = new QDockWidget(i18n("&Debug"), this);
     m_debugDock->setObjectName(QLatin1String("DebugDock"));
     addDockWidget(Qt::LeftDockWidgetArea, m_debugDock);
     m_debugDock->setWidget(Tracer::instance());
-    connect(m_debugDock, &QDockWidget::visibilityChanged, viewShowLog, &QAction::setChecked);
+    connect(m_debugDock, SIGNAL(visibilityChanged(bool)), viewShowLog, SLOT(setChecked(bool)));
 
     // create the documentation viewer
     m_documentationDock = new QDockWidget(i18n("Doc&umentation"), this);
@@ -957,7 +958,7 @@ void UMLApp::initView()
     m_docWindow = new DocWindow(m_doc, m_documentationDock);
     m_docWindow->setObjectName(QLatin1String("DOCWINDOW"));
     m_documentationDock->setWidget(m_docWindow);
-    connect(m_documentationDock, &QDockWidget::visibilityChanged, viewShowDoc, &QAction::setChecked);
+    connect(m_documentationDock, SIGNAL(visibilityChanged(bool)), viewShowDoc, SLOT(setChecked(bool)));
 
     m_doc->setupSignals(); // make sure gets signal from list view
 
@@ -969,14 +970,14 @@ void UMLApp::initView()
     m_pQUndoView->setCleanIcon(Icon_Utils::SmallIcon(Icon_Utils::it_UndoView));
     m_pQUndoView->setStack(m_pUndoStack);
     m_cmdHistoryDock->setWidget(m_pQUndoView);
-    connect(m_cmdHistoryDock, &QDockWidget::visibilityChanged, viewShowCmdHistory, &QAction::setChecked);
+    connect(m_cmdHistoryDock, SIGNAL(visibilityChanged(bool)), viewShowCmdHistory, SLOT(setChecked(bool)));
 
     // create the log viewer
     m_logDock = new QDockWidget(i18n("&Log"), this);
     m_logDock->setObjectName(QLatin1String("LogDock"));
     addDockWidget(Qt::LeftDockWidgetArea, m_logDock);
     m_logDock->setWidget(m_d->logWindow);
-    connect(m_logDock, &QDockWidget::visibilityChanged, viewShowLog, &QAction::setChecked);
+    connect(m_logDock, SIGNAL(visibilityChanged(bool)), viewShowLog, SLOT(setChecked(bool)));
 
     // create the property viewer
     //m_propertyDock = new QDockWidget(i18n("&Properties"), this);
@@ -987,7 +988,7 @@ void UMLApp::initView()
     m_birdViewDock = new BirdViewDockWidget(i18n("&Bird's eye view"), this);
     m_birdViewDock->setObjectName(QLatin1String("BirdViewDock"));
     addDockWidget(Qt::RightDockWidgetArea, m_birdViewDock);
-    connect(m_birdViewDock, &BirdViewDockWidget::visibilityChanged, viewShowBirdView, &QAction::setChecked);
+    connect(m_birdViewDock, SIGNAL(visibilityChanged(bool)), viewShowBirdView, SLOT(setChecked(bool)));
 
     tabifyDockWidget(m_documentationDock, m_cmdHistoryDock);
     tabifyDockWidget(m_cmdHistoryDock, m_logDock);
@@ -1524,14 +1525,14 @@ bool UMLApp::slotPrintSettings()
     }
     m_printSettings = new DiagramPrintPage(0, m_doc);
 #if QT_VERSION >= 0x050000
-    QDialog* dlg = new QDialog();
+    QPointer<QDialog> dlg = new QDialog();
     QVBoxLayout *layout = new QVBoxLayout();
     layout->addWidget(m_printSettings);
 
     QDialogButtonBox *buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok |
                                                        QDialogButtonBox::Cancel);
-    connect(buttonBox, &QDialogButtonBox::accepted, dlg, &QDialog::accept);
-    connect(buttonBox, &QDialogButtonBox::rejected, dlg, &QDialog::rejected);
+    connect(buttonBox, SIGNAL(accepted()), dlg, SLOT(accept()));
+    connect(buttonBox, SIGNAL(rejected()), dlg, SLOT(reject()));
     layout->addWidget(buttonBox);
 
     dlg->setLayout(layout);
@@ -1561,8 +1562,8 @@ void UMLApp::slotPrintPreview()
     if (!slotPrintSettings())
         return;
 
-    QPrintPreviewDialog *preview = new QPrintPreviewDialog(m_printer, this);
-    connect(preview, &QPrintPreviewDialog::paintRequested, this, &UMLApp::slotPrintPreviewPaintRequested);
+    QPointer<QPrintPreviewDialog> preview = new QPrintPreviewDialog(m_printer, this);
+    connect(preview, SIGNAL(paintRequested(QPrinter*)), this, SLOT(slotPrintPreviewPaintRequested(QPrinter*)));
     preview->exec();
     delete preview;
     delete m_printSettings;
@@ -1644,7 +1645,7 @@ void UMLApp::slotFileExportDocbook()
 #else
     docbookGenerator->generateDocbookForProjectInto(path);
 #endif
-    connect(docbookGenerator, &DocbookGenerator::finished, docbookGenerator, &DocbookGenerator::deleteLater);
+    connect(docbookGenerator, SIGNAL(finished(bool)), docbookGenerator, SLOT(deleteLater()));
 }
 
 /**
@@ -1672,7 +1673,7 @@ void UMLApp::slotFileExportXhtml()
 #else
     m_xhtmlGenerator->generateXhtmlForProjectInto(path);
 #endif
-    connect(m_xhtmlGenerator, &XhtmlGenerator::finished, this, &UMLApp::slotXhtmlDocGenerationFinished);
+    connect(m_xhtmlGenerator, SIGNAL(finished(bool)), this, SLOT(slotXhtmlDocGenerationFinished(bool)));
 }
 
 /**
@@ -1993,7 +1994,7 @@ void UMLApp::enablePrint(bool enable)
 void UMLApp::initClip()
 {
     QClipboard* clip = QApplication::clipboard();
-    connect(clip, &QClipboard::dataChanged, this, &UMLApp::slotClipDataChanged);
+    connect(clip, SIGNAL(dataChanged()), this, SLOT(slotClipDataChanged()));
 
     // Don't poll the X11 clipboard every second. This is a little expensive and resulted
     // in very annoying umbrello slowdowns / hangs. Qt will notify us about clipboard
@@ -2007,7 +2008,7 @@ void UMLApp::initClip()
     m_copyTimer = new QTimer(this);
     m_copyTimer->setSingleShot(false);
     m_copyTimer->start(500);
-    connect(m_copyTimer, &QTimer::timeout, this, &UMLApp::slotCopyChanged);
+    connect(m_copyTimer, SIGNAL(timeout()), this, SLOT(slotCopyChanged()));
 }
 
 /**
@@ -2063,7 +2064,7 @@ void UMLApp::slotPrefs(MultiPageDialogBase::PageType page)
 
        m_settingsDialog = new SettingsDialog(this, &optionState);
        m_settingsDialog->setCurrentPage(page);
-       connect(m_settingsDialog, &SettingsDialog::applyClicked, this, &UMLApp::slotApplyPrefs);
+       connect(m_settingsDialog, SIGNAL(applyClicked()), this, SLOT(slotApplyPrefs()));
 
        if (m_settingsDialog->exec() == QDialog::Accepted && m_settingsDialog->getChangesApplied()) {
            slotApplyPrefs();
@@ -2243,7 +2244,7 @@ bool UMLApp::editCutCopy(bool bFromView)
     if ((clipdata = clipboard.copy(bFromView)) != 0) {
         QClipboard* clip = QApplication::clipboard();
         clip->setMimeData(clipdata);//the global clipboard takes ownership of the clipdata memory
-        connect(clip, &QClipboard::dataChanged, this, &UMLApp::slotClipDataChanged);
+        connect(clip, SIGNAL(dataChanged()), this, SLOT(slotClipDataChanged()));
         return true;
     }
     return false;
@@ -2939,8 +2940,10 @@ void UMLApp::slotCurrentViewChanged()
 {
     UMLView *view = currentView();
     if (view) {
-        connect(view->umlScene(), &UMLScene::sigShowGridToggled, this, &UMLApp::slotShowGridToggled);
-        connect(view->umlScene(), &UMLScene::sigSnapToGridToggled, this, &UMLApp::slotSnapToGridToggled);
+        connect(view->umlScene(), SIGNAL(sigShowGridToggled(bool)),
+                this, SLOT(slotShowGridToggled(bool)));
+        connect(view->umlScene(), SIGNAL(sigSnapToGridToggled(bool)),
+                this, SLOT(slotSnapToGridToggled(bool)));
     }
 }
 
@@ -3202,8 +3205,8 @@ void UMLApp::createBirdView(UMLView *view)
         delete m_birdView;
     }
     m_birdView = new BirdView(m_birdViewDock, view);
-    connect(m_birdView, &BirdView::viewPositionChanged, this, &UMLApp::slotBirdViewChanged);
-    connect(m_birdViewDock, &BirdViewDockWidget::sizeChanged, m_birdView, &BirdView::slotDockSizeChanged);
+    connect(m_birdView, SIGNAL(viewPositionChanged(QPointF)), this, SLOT(slotBirdViewChanged(QPointF)));
+    connect(m_birdViewDock, SIGNAL(sizeChanged(QSize)), m_birdView, SLOT(slotDockSizeChanged(QSize)));
 }
 
 /**
@@ -3251,16 +3254,16 @@ void UMLApp::setCurrentView(UMLView* view, bool updateTreeView)
         }
         if (!updateTreeView)
 #if QT_VERSION >= 0x050000
-            disconnect(m_tabWidget, &QTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
+            disconnect(m_tabWidget, SIGNAL(currentChanged(int)), this, SLOT(slotTabChanged(int)));
 #else
-            disconnect(m_tabWidget, &KTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
+            disconnect(m_tabWidget, SIGNAL(currentChanged(QWidget*)), this, SLOT(slotTabChanged(QWidget*)));
 #endif
         m_tabWidget->setCurrentIndex(tabIndex);
         if (!updateTreeView)
 #if QT_VERSION >= 0x050000
-            connect(m_tabWidget, &QTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
+            connect(m_tabWidget, SIGNAL(currentChanged(int)), SLOT(slotTabChanged(int)));
 #else
-            connect(m_tabWidget, &KTabWidget::currentChanged, this, &UMLApp::slotTabChanged);
+            connect(m_tabWidget, SIGNAL(currentChanged(QWidget*)), SLOT(slotTabChanged(QWidget*)));
 #endif
     }
     else {
diff --git a/umbrello/umlappprivate.h b/umbrello/umlappprivate.h
index 3043516dc4391eba0639d3df778fdea780fb7331..90e4fdd84a348af005382aad159c52278c20d71d 100644
--- a/umbrello/umlappprivate.h
+++ b/umbrello/umlappprivate.h
@@ -76,7 +76,7 @@ public:
         editor = KTextEditor::EditorChooser::editor();
 #endif
         logWindow = new QListWidget;
-        connect(logWindow, &QListWidget::itemDoubleClicked, this, &UMLAppPrivate::slotLogWindowItemDoubleClicked);
+        connect(logWindow, SIGNAL(itemDoubleClicked(QListWidgetItem *)), this, SLOT(slotLogWindowItemDoubleClicked(QListWidgetItem *)));
     }
 
     ~UMLAppPrivate()
@@ -133,7 +133,7 @@ public slots:
 
         viewStereotypesWindow = parent->actionCollection()->add<KToggleAction>(QLatin1String("view_stereotypes_window"));
         viewStereotypesWindow->setText(i18n("Stereotypes"));
-        connect(viewStereotypesWindow, &KToggleAction::triggered, stereotypesWindow, &StereotypesWindow::setVisible);
+        connect(viewStereotypesWindow, SIGNAL(triggered(bool)), stereotypesWindow, SLOT(setVisible(bool)));
     }
 
 };
diff --git a/umbrello/umldoc.cpp b/umbrello/umldoc.cpp
index 5f79e6282241f71abf7f3592fb2615e58a690318..d04a43b079cd8f95c503de411b019761188906c4 100644
--- a/umbrello/umldoc.cpp
+++ b/umbrello/umldoc.cpp
@@ -153,10 +153,10 @@ void UMLDoc::init()
 
     // Connect signals.
     UMLApp * pApp = UMLApp::app();
-    connect(this, &UMLDoc::sigDiagramCreated, pApp, &UMLApp::slotUpdateViews);
-    connect(this, &UMLDoc::sigDiagramRemoved, pApp, &UMLApp::slotUpdateViews);
-    connect(this, &UMLDoc::sigDiagramRenamed, pApp, &UMLApp::slotUpdateViews);
-    connect(this, &UMLDoc::sigCurrentViewChanged, pApp, &UMLApp::slotCurrentViewChanged);
+    connect(this, SIGNAL(sigDiagramCreated(Uml::ID::Type)), pApp, SLOT(slotUpdateViews()));
+    connect(this, SIGNAL(sigDiagramRemoved(Uml::ID::Type)), pApp, SLOT(slotUpdateViews()));
+    connect(this, SIGNAL(sigDiagramRenamed(Uml::ID::Type)), pApp, SLOT(slotUpdateViews()));
+    connect(this, SIGNAL(sigCurrentViewChanged()),          pApp, SLOT(slotCurrentViewChanged()));
 }
 
 /**
@@ -178,12 +178,12 @@ void UMLDoc::createDatatypeFolder()
 UMLDoc::~UMLDoc()
 {
     UMLApp * pApp = UMLApp::app();
-    disconnect(this, &UMLDoc::sigDiagramCreated, pApp, &UMLApp::slotUpdateViews);
-    disconnect(this, &UMLDoc::sigDiagramRemoved, pApp, &UMLApp::slotUpdateViews);
-    disconnect(this, &UMLDoc::sigDiagramRenamed, pApp, &UMLApp::slotUpdateViews);
-    disconnect(this, &UMLDoc::sigCurrentViewChanged, pApp, &UMLApp::slotCurrentViewChanged);
+    disconnect(this, SIGNAL(sigDiagramCreated(Uml::ID::Type)), pApp, SLOT(slotUpdateViews()));
+    disconnect(this, SIGNAL(sigDiagramRemoved(Uml::ID::Type)), pApp, SLOT(slotUpdateViews()));
+    disconnect(this, SIGNAL(sigDiagramRenamed(Uml::ID::Type)), pApp, SLOT(slotUpdateViews()));
+    disconnect(this, SIGNAL(sigCurrentViewChanged()),          pApp, SLOT(slotCurrentViewChanged()));
 
-    disconnect(m_pAutoSaveTimer, &QTimer::timeout, this, &UMLDoc::slotAutoSave);
+    disconnect(m_pAutoSaveTimer, SIGNAL(timeout()), this, SLOT(slotAutoSave()));
     delete m_pAutoSaveTimer;
 
     m_root[Uml::ModelType::Logical]->removeObject(m_datatypeRoot);
@@ -221,7 +221,7 @@ void UMLDoc::addView(UMLView *view)
 
     UMLApp * pApp = UMLApp::app();
     if (pApp->listView()) {
-        connect(this,&UMLDoc::sigObjectRemoved, view->umlScene(), &UMLScene::slotObjectRemoved);
+        connect(this, SIGNAL(sigObjectRemoved(UMLObject*)), view->umlScene(), SLOT(slotObjectRemoved(UMLObject*)));
     }
 
     if (!m_bLoading || pApp->currentView() == NULL) {
@@ -251,7 +251,8 @@ void UMLDoc::removeView(UMLView *view, bool enforceCurrentView)
     }
     DEBUG(DBG_SRC) << "<" << view->umlScene()->name() << ">";
     if (UMLApp::app()->listView()) {
-        disconnect(this, &UMLDoc::sigObjectRemoved, view->umlScene(), &UMLScene::slotObjectRemoved);
+        disconnect(this, SIGNAL(sigObjectRemoved(UMLObject*)),
+                   view->umlScene(), SLOT(slotObjectRemoved(UMLObject*)));
     }
     view->hide();
     UMLFolder *f = view->umlScene()->folder();
@@ -956,7 +957,7 @@ bool UMLDoc::saveDocument(const KUrl& url, const char * format)
 void UMLDoc::setupSignals()
 {
     WorkToolBar *tb = UMLApp::app()->workToolBar();
-    connect(this, &UMLDoc::sigDiagramChanged, tb, &WorkToolBar::slotCheckToolBar);
+    connect(this, SIGNAL(sigDiagramChanged(Uml::DiagramType::Enum)), tb, SLOT(slotCheckToolBar(Uml::DiagramType::Enum)));
 }
 
 /**
@@ -3189,14 +3190,14 @@ void UMLDoc::initSaveTimer()
 {
     if (m_pAutoSaveTimer) {
         m_pAutoSaveTimer->stop();
-        disconnect(m_pAutoSaveTimer, &QTimer::timeout, this, &UMLDoc::slotAutoSave);
+        disconnect(m_pAutoSaveTimer, SIGNAL(timeout()), this, SLOT(slotAutoSave()));
         delete m_pAutoSaveTimer;
         m_pAutoSaveTimer = 0;
     }
     Settings::OptionState optionState = Settings::optionState();
     if (optionState.generalState.autosave) {
         m_pAutoSaveTimer = new QTimer(this);
-        connect(m_pAutoSaveTimer, &QTimer::timeout, this, &UMLDoc::slotAutoSave);
+        connect(m_pAutoSaveTimer, SIGNAL(timeout()), this, SLOT(slotAutoSave()));
         m_pAutoSaveTimer->setSingleShot(false);
         m_pAutoSaveTimer->start(optionState.generalState.autosavetime * 60000);
     }
diff --git a/umbrello/umllistview.cpp b/umbrello/umllistview.cpp
index cd244041a4bee24fdc3c1720db1bf2d2181a3164..27a0be7a9ee6888b31873dc7ca4789137c265f09 100644
--- a/umbrello/umllistview.cpp
+++ b/umbrello/umllistview.cpp
@@ -133,10 +133,10 @@ UMLListView::UMLListView(QWidget *parent)
     }
 
     //setup slots/signals
-    connect(this, &UMLListView::itemCollapsed, this, &UMLListView::slotCollapsed);
-    connect(this, &UMLListView::itemExpanded, this, &UMLListView::slotExpanded);
-    connect(UMLApp::app(), &UMLApp::sigCutSuccessful, this, &UMLListView::slotCutSuccessful);
-    connect(this, &UMLListView::itemSelectionChanged, this, &UMLListView::slotItemSelectionChanged);
+    connect(this, SIGNAL(itemCollapsed(QTreeWidgetItem*)), this, SLOT(slotCollapsed(QTreeWidgetItem*)));
+    connect(this, SIGNAL(itemExpanded(QTreeWidgetItem*)), this, SLOT(slotExpanded(QTreeWidgetItem*)));
+    connect(UMLApp::app(), SIGNAL(sigCutSuccessful()), this, SLOT(slotCutSuccessful()));
+    connect(this, SIGNAL(itemSelectionChanged()), this, SLOT(slotItemSelectionChanged()));
 }
 
 /**
@@ -959,7 +959,7 @@ void UMLListView::slotObjectCreated(UMLObject* object)
         UMLClassifier *c = static_cast<UMLClassifier*>(object);
         UMLClassifierListItemList cListItems = c->getFilteredList(UMLObject::ot_UMLObject);
         foreach(UMLClassifierListItem *cli, cListItems)
-            addChildObject(cli, c);
+            childObjectAdded(cli, c);
     }
     if (m_doc->loading())
         return;
@@ -980,30 +980,42 @@ void UMLListView::connectNewObjectsSlots(UMLObject* object)
     case UMLObject::ot_Class:
     case UMLObject::ot_Interface: {
         UMLClassifier *c = static_cast<UMLClassifier*>(object);
-        connect(c, &UMLClassifier::attributeAdded, this, &UMLListView::childObjectAdded);
-        connect(c, &UMLClassifier::attributeRemoved, this, &UMLListView::childObjectRemoved);
-        connect(c, &UMLClassifier::operationAdded, this, &UMLListView::childObjectAdded);
-        connect(c, &UMLClassifier::operationRemoved, this, &UMLListView::childObjectRemoved);
-        connect(c, &UMLClassifier::templateAdded, this, &UMLListView::childObjectAdded);
-        connect(c, &UMLClassifier::templateRemoved, this, &UMLListView::childObjectRemoved);
-        connect(object, &UMLObject::modified, this, &UMLListView::slotObjectChanged);
+        connect(c, SIGNAL(attributeAdded(UMLClassifierListItem*)),
+                this, SLOT(childObjectAdded(UMLClassifierListItem*)));
+        connect(c, SIGNAL(attributeRemoved(UMLClassifierListItem*)),
+                this, SLOT(childObjectRemoved(UMLClassifierListItem*)));
+        connect(c, SIGNAL(operationAdded(UMLClassifierListItem*)),
+                this, SLOT(childObjectAdded(UMLClassifierListItem*)));
+        connect(c, SIGNAL(operationRemoved(UMLClassifierListItem*)),
+                this, SLOT(childObjectRemoved(UMLClassifierListItem*)));
+        connect(c, SIGNAL(templateAdded(UMLClassifierListItem*)),
+                this, SLOT(childObjectAdded(UMLClassifierListItem*)));
+        connect(c, SIGNAL(templateRemoved(UMLClassifierListItem*)),
+                this, SLOT(childObjectRemoved(UMLClassifierListItem*)));
+        connect(object, SIGNAL(modified()), this, SLOT(slotObjectChanged()));
     }
     break;
     case UMLObject::ot_Enum: {
         UMLEnum *e = static_cast<UMLEnum*>(object);
-        connect(e, &UMLEnum::enumLiteralAdded, this, &UMLListView::childObjectAdded);
-        connect(e, &UMLEnum::enumLiteralRemoved, this, &UMLListView::childObjectRemoved);
+        connect(e, SIGNAL(enumLiteralAdded(UMLClassifierListItem*)),
+                this, SLOT(childObjectAdded(UMLClassifierListItem*)));
+        connect(e, SIGNAL(enumLiteralRemoved(UMLClassifierListItem*)),
+                this, SLOT(childObjectRemoved(UMLClassifierListItem*)));
     }
-    connect(object, &UMLObject::modified, this, &UMLListView::slotObjectChanged);
+    connect(object, SIGNAL(modified()), this, SLOT(slotObjectChanged()));
     break;
     case UMLObject::ot_Entity: {
         UMLEntity *ent = static_cast<UMLEntity*>(object);
-        connect(ent, &UMLEntity::entityAttributeAdded, this, &UMLListView::childObjectAdded);
-        connect(ent, &UMLEntity::entityAttributeRemoved, this, &UMLListView::childObjectRemoved);
-        connect(ent, &UMLEntity::entityConstraintAdded, this, &UMLListView::childObjectAdded);
-        connect(ent, &UMLEntity::entityConstraintRemoved, this, &UMLListView::childObjectRemoved);
-    }
-    connect(object, &UMLObject::modified, this, &UMLListView::slotObjectChanged);
+        connect(ent, SIGNAL(entityAttributeAdded(UMLClassifierListItem*)),
+                this, SLOT(childObjectAdded(UMLClassifierListItem*)));
+        connect(ent, SIGNAL(entityAttributeRemoved(UMLClassifierListItem*)),
+                this, SLOT(childObjectRemoved(UMLClassifierListItem*)));
+        connect(ent, SIGNAL(entityConstraintAdded(UMLClassifierListItem*)),
+                this, SLOT(childObjectAdded(UMLClassifierListItem*)));
+        connect(ent, SIGNAL(entityConstraintRemoved(UMLClassifierListItem*)),
+                this, SLOT(childObjectRemoved(UMLClassifierListItem*)));
+    }
+    connect(object, SIGNAL(modified()), this, SLOT(slotObjectChanged()));
     break;
     case UMLObject::ot_Datatype:
     case UMLObject::ot_Attribute:
@@ -1023,7 +1035,7 @@ void UMLListView::connectNewObjectsSlots(UMLObject* object)
     case UMLObject::ot_Node:
     case UMLObject::ot_Folder:
     case UMLObject::ot_Category:
-        connect(object, &UMLObject::modified, this, &UMLListView::slotObjectChanged);
+        connect(object, SIGNAL(modified()), this, SLOT(slotObjectChanged()));
         break;
     case UMLObject::ot_UMLObject:
     case UMLObject::ot_Association:
@@ -1058,7 +1070,7 @@ void UMLListView::slotObjectChanged()
 void UMLListView::childObjectAdded(UMLClassifierListItem* obj)
 {
     UMLClassifier *parent = const_cast<UMLClassifier*>(dynamic_cast<const UMLClassifier*>(sender()));
-    addChildObject(obj, parent);
+    childObjectAdded(obj, parent);
 }
 
 /**
@@ -1067,7 +1079,7 @@ void UMLListView::childObjectAdded(UMLClassifierListItem* obj)
  * @param child the child object
  * @param parent the parent object
  */
-void UMLListView::addChildObject(UMLClassifierListItem* child, UMLClassifier* parent)
+void UMLListView::childObjectAdded(UMLClassifierListItem* child, UMLClassifier* parent)
 {
     if (m_bCreatingChildObject)
         return;
@@ -1139,11 +1151,11 @@ void UMLListView::setDocument(UMLDoc *doc)
     }
     m_doc = doc;
 
-    connect(m_doc, &UMLDoc::sigDiagramCreated, this, &UMLListView::slotDiagramCreated);
-    connect(m_doc, &UMLDoc::sigDiagramRemoved, this, &UMLListView::slotDiagramRemoved);
-    connect(m_doc, &UMLDoc::sigDiagramRenamed, this, &UMLListView::slotDiagramRenamed);
-    connect(m_doc, &UMLDoc::sigObjectCreated, this, &UMLListView::slotObjectCreated);
-    connect(m_doc, &UMLDoc::sigObjectRemoved, this, &UMLListView::slotObjectRemoved);
+    connect(m_doc, SIGNAL(sigDiagramCreated(Uml::ID::Type)), this, SLOT(slotDiagramCreated(Uml::ID::Type)));
+    connect(m_doc, SIGNAL(sigDiagramRemoved(Uml::ID::Type)), this, SLOT(slotDiagramRemoved(Uml::ID::Type)));
+    connect(m_doc, SIGNAL(sigDiagramRenamed(Uml::ID::Type)), this, SLOT(slotDiagramRenamed(Uml::ID::Type)));
+    connect(m_doc, SIGNAL(sigObjectCreated(UMLObject*)),   this, SLOT(slotObjectCreated(UMLObject*)));
+    connect(m_doc, SIGNAL(sigObjectRemoved(UMLObject*)),   this, SLOT(slotObjectRemoved(UMLObject*)));
 }
 
 /**
@@ -1155,7 +1167,7 @@ void UMLListView::slotObjectRemoved(UMLObject* object)
     if (m_doc->loading()) { //needed for class wizard
         return;
     }
-    disconnect(object, &UMLObject::modified, this, &UMLListView::slotObjectChanged);
+    disconnect(object, SIGNAL(modified()), this, SLOT(slotObjectChanged()));
     UMLListViewItem* item = findItem(object->id());
     delete item;
     UMLApp::app()->docWindow()->updateDocumentation(true);
diff --git a/umbrello/umllistview.h b/umbrello/umllistview.h
index 3669502951b0194708021ae6d6f85caaf4eb87ab..e51c1e049431c9b3eee3349ddc06c0f42cffa1da 100644
--- a/umbrello/umllistview.h
+++ b/umbrello/umllistview.h
@@ -136,7 +136,7 @@ protected:
 
     bool deleteItem(UMLListViewItem *temp);
 
-    void addChildObject(UMLClassifierListItem* child, UMLClassifier* parent);
+    void childObjectAdded(UMLClassifierListItem* child, UMLClassifier* parent);
 
     void addAtContainer(UMLListViewItem *item, UMLListViewItem *parent);
 
diff --git a/umbrello/umlmodel/classifier.cpp b/umbrello/umlmodel/classifier.cpp
index 95c46f20855c09ff664920b6542ca91892853575..07a7fb6ea3486ca1311568d2848494b289f2c25a 100644
--- a/umbrello/umlmodel/classifier.cpp
+++ b/umbrello/umlmodel/classifier.cpp
@@ -336,7 +336,7 @@ bool UMLClassifier::addOperation(UMLOperation* op, int position)
     }
     emit operationAdded(op);
     UMLObject::emitModified();
-    connect(op, &UMLOperation::modified, this, &UMLClassifier::modified);
+    connect(op, SIGNAL(modified()), this, SIGNAL(modified()));
     return true;
 }
 
@@ -381,7 +381,7 @@ int UMLClassifier::removeOperation(UMLOperation *op)
     }
     // disconnection needed.
     // note that we don't delete the operation, just remove it from the Classifier
-    disconnect(op, &UMLOperation::modified, this, &UMLClassifier::modified);
+    disconnect(op, SIGNAL(modified()), this, SIGNAL(modified()));
     emit operationRemoved(op);
     UMLObject::emitModified();
     return m_List.count();
@@ -819,7 +819,7 @@ UMLAttribute* UMLClassifier::addAttribute(const QString &name, Uml::ID::Type id
     m_List.append(a);
     emit attributeAdded(a);
     UMLObject::emitModified();
-    connect(a, &UMLAttribute::modified, this, &UMLClassifier::modified);
+    connect(a, SIGNAL(modified()), this, SIGNAL(modified()));
     return a;
 }
 
@@ -844,7 +844,7 @@ UMLAttribute* UMLClassifier::addAttribute(const QString &name, UMLObject *type,
     m_List.append(a);
     emit attributeAdded(a);
     UMLObject::emitModified();
-    connect(a, &UMLAttribute::modified, this, &UMLClassifier::modified);
+    connect(a, SIGNAL(modified()), this, SIGNAL(modified()));
     return a;
 }
 
@@ -874,7 +874,7 @@ bool UMLClassifier::addAttribute(UMLAttribute* att, IDChangeLog* log /* = 0 */,
         }
         emit attributeAdded(att);
         UMLObject::emitModified();
-        connect(att, &UMLAttribute::modified, this, &UMLClassifier::modified);
+        connect(att, SIGNAL(modified()), this, SIGNAL(modified()));
         return true;
     } else if (log) {
         log->removeChangeByNewID(att->id());
@@ -1050,7 +1050,7 @@ UMLTemplate* UMLClassifier::addTemplate(const QString &name, Uml::ID::Type id)
     m_List.append(templt);
     emit templateAdded(templt);
     UMLObject::emitModified();
-    connect(templt, &UMLTemplate::modified, this, &UMLClassifier::modified);
+    connect(templt, SIGNAL(modified()), this, SIGNAL(modified()));
     return templt;
 }
 
@@ -1070,7 +1070,7 @@ bool UMLClassifier::addTemplate(UMLTemplate* newTemplate, IDChangeLog* log /* =
         m_List.append(newTemplate);
         emit templateAdded(newTemplate);
         UMLObject::emitModified();
-        connect(newTemplate, &UMLTemplate::modified, this, &UMLClassifier::modified);
+        connect(newTemplate, SIGNAL(modified()), this, SIGNAL(modified()));
         return true;
     }
     else if (log) {
@@ -1104,7 +1104,7 @@ bool UMLClassifier::addTemplate(UMLTemplate* templt, int position)
         }
         emit templateAdded(templt);
         UMLObject::emitModified();
-        connect(templt, &UMLTemplate::modified, this, &UMLClassifier::modified);
+        connect(templt, SIGNAL(modified()), this, SIGNAL(modified()));
         return true;
     }
     //else
@@ -1126,7 +1126,7 @@ int UMLClassifier::removeTemplate(UMLTemplate* umltemplate)
     }
     emit templateRemoved(umltemplate);
     UMLObject::emitModified();
-    disconnect(umltemplate, &UMLTemplate::modified, this, &UMLClassifier::modified);
+    disconnect(umltemplate, SIGNAL(modified()), this, SIGNAL(modified()));
     return m_List.count();
 }
 
diff --git a/umbrello/umlmodel/classifierlistitem.cpp b/umbrello/umlmodel/classifierlistitem.cpp
index 5c997e309041c27e156c3df8a36fa6990669d01e..24a42f233748c3b0d99f8aa92340fc431aa7df9d 100644
--- a/umbrello/umlmodel/classifierlistitem.cpp
+++ b/umbrello/umlmodel/classifierlistitem.cpp
@@ -80,6 +80,33 @@ void UMLClassifierListItem::copyInto(UMLObject *lhs) const
     UMLObject::copyInto(lhs);
 }
 
+void UMLClassifierListItem::setQualifier(Uml::TypeQualifiers::Enum qualifier)
+{
+    if(m_typeQualifier != qualifier){
+        m_typeQualifier = qualifier;
+        UMLObject::emitModified();
+    }
+
+}
+
+Uml::TypeQualifiers::Enum UMLClassifierListItem::qualifier() const
+{
+    return m_typeQualifier;
+}
+
+void UMLClassifierListItem::setModifier(Uml::TypeModifiers::Enum modifier)
+{
+    if(m_typeModifier != modifier){
+        m_typeModifier = modifier;
+        UMLObject::emitModified();
+    }
+}
+
+Uml::TypeModifiers::Enum UMLClassifierListItem::modifier() const
+{
+    return m_typeModifier;
+}
+
 /**
  * Returns a string representation of the list item.
  *
diff --git a/umbrello/umlmodel/classifierlistitem.h b/umbrello/umlmodel/classifierlistitem.h
index 518aa7fe3ec078b2b85b95ed0802daa5a6d351e0..3fa356dae375a4202080e60acaab42fa234637f3 100644
--- a/umbrello/umlmodel/classifierlistitem.h
+++ b/umbrello/umlmodel/classifierlistitem.h
@@ -53,6 +53,15 @@ public:
      */
     virtual UMLObject* clone() const = 0;
 
+    //TypeQualifiers Methods
+    virtual void setQualifier(Uml::TypeQualifiers::Enum qualifier);
+    //virtual void setQualifierCmd(Uml::TypeQualifiers::Enum qualifier);
+    virtual Uml::TypeQualifiers::Enum qualifier() const;
+
+    //TypeModifiers Methods
+    virtual void setModifier(Uml::TypeModifiers::Enum modifier);
+    virtual Uml::TypeModifiers::Enum modifier() const;
+
 };
 
 #endif
diff --git a/umbrello/umlmodel/entity.cpp b/umbrello/umlmodel/entity.cpp
index ffe43e0a943c6226238b8e9e3613db62ac675644..08e641de9c4e49c199b5392ebc59b6f4fabe24ce 100644
--- a/umbrello/umlmodel/entity.cpp
+++ b/umbrello/umlmodel/entity.cpp
@@ -43,7 +43,8 @@ UMLEntity::UMLEntity(const QString& name, Uml::ID::Type id)
     m_PrimaryKey(0)
 {
     m_BaseType = UMLObject::ot_Entity;
-    connect(this, &UMLEntity::entityAttributeRemoved, this, &UMLEntity::slotEntityAttributeRemoved);
+    connect(this, SIGNAL(entityAttributeRemoved(UMLClassifierListItem*)),
+            this, SLOT(slotEntityAttributeRemoved(UMLClassifierListItem*)));
 }
 
 /**
@@ -307,7 +308,7 @@ UMLObject* UMLEntity::addEntityAttribute(const QString& name, Uml::ID::Type id)
     m_List.append(literal);
     emit entityAttributeAdded(literal);
     UMLObject::emitModified();
-    connect(literal, &UMLEntityAttribute::modified, this, &UMLEntity::modified);
+    connect(literal, SIGNAL(modified()), this, SIGNAL(modified()));
     return literal;
 }
 
@@ -326,7 +327,7 @@ bool UMLEntity::addEntityAttribute(UMLEntityAttribute* att, IDChangeLog* log /*
         m_List.append(att);
         emit entityAttributeAdded(att);
         UMLObject::emitModified();
-        connect(att, &UMLEntityAttribute::modified, this, &UMLEntity::modified);
+        connect(att, SIGNAL(modified()), this, SIGNAL(modified()));
         return true;
     } else if (log) {
         log->removeChangeByNewID(att->id());
@@ -357,7 +358,7 @@ bool UMLEntity::addEntityAttribute(UMLEntityAttribute* att, int position)
         }
         emit entityAttributeAdded(att);
         UMLObject::emitModified();
-        connect(att, &UMLEntityAttribute::modified, this, &UMLEntity::modified);
+        connect(att, SIGNAL(modified()), this, SIGNAL(modified()));
         return true;
     }
     return false;
@@ -582,7 +583,7 @@ bool UMLEntity::addConstraint(UMLEntityConstraint* constr)
 
     emit entityConstraintAdded(constr);
     UMLObject::emitModified();
-    connect(constr, &UMLEntityConstraint::modified, this, &UMLEntity::modified);
+    connect(constr, SIGNAL(modified()), this, SIGNAL(modified()));
 
     return true;
 }
diff --git a/umbrello/umlmodel/enum.cpp b/umbrello/umlmodel/enum.cpp
index 43ef464ca46f62e4d565603f176a907350bbd27e..f640f6cf2a574fe36a10a86aa29152ef6c958976 100644
--- a/umbrello/umlmodel/enum.cpp
+++ b/umbrello/umlmodel/enum.cpp
@@ -140,7 +140,7 @@ UMLObject* UMLEnum::addEnumLiteral(const QString &name, Uml::ID::Type id, const
     m_List.append(literal);
     UMLObject::emitModified();
     emit enumLiteralAdded(literal);
-    connect(literal, &UMLEnumLiteral::modified, this, &UMLEnum::modified);
+    connect(literal, SIGNAL(modified()), this, SIGNAL(modified()));
     return literal;
 }
 
@@ -159,7 +159,7 @@ bool UMLEnum::addEnumLiteral(UMLEnumLiteral* literal, IDChangeLog* Log /* = 0*/)
         m_List.append(literal);
         UMLObject::emitModified();
         emit enumLiteralAdded(literal);
-        connect(literal, &UMLEnumLiteral::modified, this, &UMLEnum::modified);
+        connect(literal, SIGNAL(modified()), this, SIGNAL(modified()));
         return true;
     } else if (Log) {
         Log->removeChangeByNewID(literal->id());
@@ -190,7 +190,7 @@ bool UMLEnum::addEnumLiteral(UMLEnumLiteral* literal, int position)
         }
         UMLObject::emitModified();
         emit enumLiteralAdded(literal);
-        connect(literal, &UMLEnumLiteral::modified, this, &UMLEnum::modified);
+        connect(literal, SIGNAL(modified()), this, SIGNAL(modified()));
         return true;
     }
     return false;
diff --git a/umbrello/umlmodel/foreignkeyconstraint.cpp b/umbrello/umlmodel/foreignkeyconstraint.cpp
index 25f2f10f1ff7dd03cef141250d747559829ea4f4..992c8ac978cd85c37afeea534b0caae66d7fd8d0 100644
--- a/umbrello/umlmodel/foreignkeyconstraint.cpp
+++ b/umbrello/umlmodel/foreignkeyconstraint.cpp
@@ -60,7 +60,7 @@ void UMLForeignKeyConstraint::init()
      m_DeleteAction = uda_NoAction;
 
     // connecte signals and slots
-     connect(this, &UMLForeignKeyConstraint::sigReferencedEntityChanged, this, &UMLForeignKeyConstraint::slotReferencedEntityChanged);
+     connect(this, SIGNAL(sigReferencedEntityChanged()), this, SLOT(slotReferencedEntityChanged()));
 }
 
 /**
diff --git a/umbrello/umlmodel/operation.cpp b/umbrello/umlmodel/operation.cpp
index 90fdb967b2beb39ea9602776a5583de6b56afa84..6803eda61416632b2fda3779a540297d8a7f17a6 100644
--- a/umbrello/umlmodel/operation.cpp
+++ b/umbrello/umlmodel/operation.cpp
@@ -104,7 +104,7 @@ void UMLOperation::moveParmLeft(UMLAttribute * a)
         return;
     }
     uDebug() << "called for " << a->name();
-    disconnect(a, &UMLAttribute::modified, this, &UMLOperation::modified);
+    disconnect(a, SIGNAL(modified()), this, SIGNAL(modified()));
     int idx;
     if ((idx=m_List.indexOf(a)) == -1) {
         uDebug() << "Error move parm left " << a->name();
@@ -128,7 +128,7 @@ void UMLOperation::moveParmRight(UMLAttribute * a)
         return;
     }
     uDebug() << "called for " << a->name();
-    disconnect(a, &UMLAttribute::modified, this, &UMLOperation::modified);
+    disconnect(a, SIGNAL(modified()), this, SIGNAL(modified()));
     int idx;
     if ((idx=m_List.indexOf(a)) == -1) {
         uDebug() << "Error move parm right " << a->name();
@@ -156,7 +156,7 @@ void UMLOperation::removeParm(UMLAttribute * a, bool emitModifiedSignal /* =true
         return;
     }
     uDebug() << "called for " << a->name();
-    disconnect(a, &UMLAttribute::modified, this, &UMLOperation::modified);
+    disconnect(a, SIGNAL(modified()), this, SIGNAL(modified()));
     if(!m_List.removeAll(a))
         uDebug() << "Error removing parm " << a->name();
 
@@ -264,7 +264,7 @@ void UMLOperation::addParm(UMLAttribute *parameter, int position)
     else
         m_List.append(parameter);
     UMLObject::emitModified();
-    connect(parameter, &UMLAttribute::modified, this, &UMLOperation::modified);
+    connect(parameter, SIGNAL(modified()), this, SIGNAL(modified()));
 }
 
 /**
diff --git a/umbrello/umlmodel/umlobject.h b/umbrello/umlmodel/umlobject.h
index 66282b035faa5e3d8ba4655d85a2737e4b9f4dc9..1a33052be5c89fab43634baf1f6fffd862c40781 100644
--- a/umbrello/umlmodel/umlobject.h
+++ b/umbrello/umlmodel/umlobject.h
@@ -176,6 +176,8 @@ protected:
     QString                m_name;         ///< objects name
     ObjectType             m_BaseType;     ///< objects type
     Uml::Visibility::Enum  m_visibility;   ///< objects visibility
+    Uml::TypeQualifiers::Enum m_typeQualifier; ///< object qualifier
+    Uml::TypeModifiers::Enum m_typeModifier; ///< object modifier
     bool                   m_bAbstract;    ///< state of whether the object is abstract or not
     bool                   m_bStatic;      ///< flag for instance scope
     bool                   m_bInPaste;     ///< caller sets this true when in paste operation
diff --git a/umbrello/umlmodel/umlrole.cpp b/umbrello/umlmodel/umlrole.cpp
index 4863b0e0cd087e3d09d483ba41ec42636c246427..266798d1d2300fb75c6b2d20f211695d2a80d1da 100644
--- a/umbrello/umlmodel/umlrole.cpp
+++ b/umbrello/umlmodel/umlrole.cpp
@@ -41,7 +41,7 @@ UMLRole::UMLRole(UMLAssociation * parent, UMLObject * parentObj, Uml::RoleType::
     m_pSecondary = parentObj;
 
     // connect this up to parent
-    connect(this, &UMLRole::modified, parent, &UMLAssociation::modified);
+    connect(this, SIGNAL(modified()), parent, SIGNAL(modified()));
 }
 
 /**
diff --git a/umbrello/umlscene.cpp b/umbrello/umlscene.cpp
index fe4118d1586f2274c4ac5f322efec63ef78664f2..01cbe146b89b182e3b56fb6c345a4e8e378ee000 100644
--- a/umbrello/umlscene.cpp
+++ b/umbrello/umlscene.cpp
@@ -152,7 +152,8 @@ UMLScene::UMLScene(UMLFolder *parentFolder, UMLView *view)
     m_pImageExporter = new UMLViewImageExporter(this);
 
     // setup signals
-    connect(UMLApp::app(), &UMLApp::sigCutSuccessful, this, &UMLScene::slotCutSuccessful);
+    connect(UMLApp::app(), SIGNAL(sigCutSuccessful()),
+            this, SLOT(slotCutSuccessful()));
     // Create the ToolBarState factory. This class is not a singleton, because it
     // needs a pointer to this object.
     m_pToolBarStateFactory = new ToolBarStateFactory();
@@ -598,9 +599,12 @@ void UMLScene::setCreateObject(bool bCreate)
  */
 void UMLScene::showEvent(QShowEvent* /*se*/)
 {
-    connect(m_doc, &UMLDoc::sigObjectCreated, this, &UMLScene::slotObjectCreated);
-    connect(this, &UMLScene::sigAssociationRemoved, UMLApp::app()->docWindow(), &DocWindow::slotAssociationRemoved);
-    connect(this, &UMLScene::sigWidgetRemoved, UMLApp::app()->docWindow(), &DocWindow::slotWidgetRemoved);
+    connect(m_doc, SIGNAL(sigObjectCreated(UMLObject*)),
+            this, SLOT(slotObjectCreated(UMLObject*)));
+    connect(this, SIGNAL(sigAssociationRemoved(AssociationWidget*)),
+            UMLApp::app()->docWindow(), SLOT(slotAssociationRemoved(AssociationWidget*)));
+    connect(this, SIGNAL(sigWidgetRemoved(UMLWidget*)),
+            UMLApp::app()->docWindow(), SLOT(slotWidgetRemoved(UMLWidget*)));
 }
 
 /**
@@ -608,10 +612,11 @@ void UMLScene::showEvent(QShowEvent* /*se*/)
  */
 void UMLScene::hideEvent(QHideEvent* /*he*/)
 {
-
-    disconnect(m_doc, &UMLDoc::sigObjectCreated, this, &UMLScene::slotObjectCreated);
-    disconnect(this, &UMLScene::sigAssociationRemoved, UMLApp::app()->docWindow(), &DocWindow::slotAssociationRemoved);
-    disconnect(this, &UMLScene::sigWidgetRemoved, UMLApp::app()->docWindow(), &DocWindow::slotWidgetRemoved);
+    disconnect(m_doc, SIGNAL(sigObjectCreated(UMLObject*)), this, SLOT(slotObjectCreated(UMLObject*)));
+    disconnect(this, SIGNAL(sigAssociationRemoved(AssociationWidget*)),
+               UMLApp::app()->docWindow(), SLOT(slotAssociationRemoved(AssociationWidget*)));
+    disconnect(this, SIGNAL(sigWidgetRemoved(UMLWidget*)),
+               UMLApp::app()->docWindow(), SLOT(slotWidgetRemoved(UMLWidget*)));
 }
 
 /**
@@ -1182,9 +1187,9 @@ void UMLScene::removeWidgetCmd(UMLWidget * o)
 
     o->cleanup();
     o->setSelectedFlag(false);
-    disconnect(this, &UMLScene::sigFillColorChanged, o, &UMLWidget::slotFillColorChanged);
-    disconnect(this, &UMLScene::sigLineColorChanged, o, &UMLWidget::slotLineColorChanged);
-    disconnect(this, &UMLScene::sigTextColorChanged, o, &UMLWidget::slotTextColorChanged);
+    disconnect(this, SIGNAL(sigFillColorChanged(Uml::ID::Type)), o, SLOT(slotFillColorChanged(Uml::ID::Type)));
+    disconnect(this, SIGNAL(sigLineColorChanged(Uml::ID::Type)), o, SLOT(slotLineColorChanged(Uml::ID::Type)));
+    disconnect(this, SIGNAL(sigTextColorChanged(Uml::ID::Type)), o, SLOT(slotTextColorChanged(Uml::ID::Type)));
     if (t == WidgetBase::wt_Message) {
         m_MessageList.removeAll(static_cast<MessageWidget*>(o));
     } else {
diff --git a/umbrello/umlview.cpp b/umbrello/umlview.cpp
index 69f5cb9a2fa76cfc2f5c2b8c134d1a2ebc24855f..5d6fab89b70933e3361ca7c99e6ae6e9d4090f4e 100644
--- a/umbrello/umlview.cpp
+++ b/umbrello/umlview.cpp
@@ -171,8 +171,8 @@ void UMLView::showEvent(QShowEvent* se)
     UMLApp* theApp = UMLApp::app();
     WorkToolBar* tb = theApp->workToolBar();
     UMLScene *us = umlScene();
-    connect(tb, &WorkToolBar::sigButtonChanged, us, &UMLScene::slotToolBarChanged);
-    connect(us, &UMLScene::sigResetToolBar, tb, &WorkToolBar::slotResetToolBar);
+    connect(tb, SIGNAL(sigButtonChanged(int)), us, SLOT(slotToolBarChanged(int)));
+    connect(us, SIGNAL(sigResetToolBar()), tb, SLOT(slotResetToolBar()));
 
     umlScene()->showEvent(se);
     us->resetToolbar();
@@ -186,8 +186,8 @@ void UMLView::hideEvent(QHideEvent* he)
     UMLApp* theApp = UMLApp::app();
     WorkToolBar* tb = theApp->workToolBar();
     UMLScene *us = umlScene();
-    disconnect(tb, &WorkToolBar::sigButtonChanged, us, &UMLScene::slotToolBarChanged);
-    disconnect(us, &UMLScene::sigResetToolBar, tb, &WorkToolBar::slotResetToolBar);
+    disconnect(tb, SIGNAL(sigButtonChanged(int)), us, SLOT(slotToolBarChanged(int)));
+    disconnect(us, SIGNAL(sigResetToolBar()), tb, SLOT(slotResetToolBar()));
 
     us->hideEvent(he);
 }
diff --git a/umbrello/umlwidgets/associationwidget.cpp b/umbrello/umlwidgets/associationwidget.cpp
index 0c35d393299d47b9fb8753a3e9ac88b7f19a24d4..8cb6307decc60de38380d1d2c9fa484222fbb973 100644
--- a/umbrello/umlwidgets/associationwidget.cpp
+++ b/umbrello/umlwidgets/associationwidget.cpp
@@ -252,17 +252,20 @@ void AssociationWidget::setUMLObject(UMLObject *obj)
             break;
         case UMLObject::ot_Attribute:
             klass = static_cast<UMLClassifier*>(obj->parent());
-            connect(klass, &UMLClassifier::attributeRemoved, this, &AssociationWidget::slotClassifierListItemRemoved);
+            connect(klass, SIGNAL(attributeRemoved(UMLClassifierListItem*)),
+                    this, SLOT(slotClassifierListItemRemoved(UMLClassifierListItem*)));
             attr = static_cast<UMLAttribute*>(obj);
-            connect(attr, &UMLAttribute::attributeChanged, this, &AssociationWidget::slotAttributeChanged);
+            connect(attr, SIGNAL(attributeChanged()), this, SLOT(slotAttributeChanged()));
             break;
         case UMLObject::ot_EntityAttribute:
             ent = static_cast<UMLEntity*>(obj->parent());
-            connect(ent, &UMLEntity::entityAttributeRemoved, this, &AssociationWidget::slotClassifierListItemRemoved);
+            connect(ent, SIGNAL(entityAttributeRemoved(UMLClassifierListItem*)),
+                    this, SLOT(slotClassifierListItemRemoved(UMLClassifierListItem*)));
             break;
         case UMLObject::ot_ForeignKeyConstraint:
             ent = static_cast<UMLEntity*>(obj->parent());
-            connect(ent, &UMLEntity::entityConstraintRemoved, this, &AssociationWidget::slotClassifierListItemRemoved);
+            connect(ent, SIGNAL(entityConstraintRemoved(UMLClassifierListItem*)),
+                    this, SLOT(slotClassifierListItemRemoved(UMLClassifierListItem*)));
             break;
         default:
             uError() << "cannot associate UMLObject of type " << UMLObject::toString(ot);
@@ -331,10 +334,10 @@ UMLOperation *AssociationWidget::operation()
 void AssociationWidget::setOperation(UMLOperation *op)
 {
     if (m_umlObject)
-        disconnect(m_umlObject, &UMLObject::modified, m_nameWidget, &FloatingTextWidget::setMessageText);
+        disconnect(m_umlObject, SIGNAL(modified()), m_nameWidget, SLOT(setMessageText()));
     m_umlObject = op;
     if (m_umlObject)
-        connect(m_umlObject, &UMLObject::modified, m_nameWidget, &FloatingTextWidget::setMessageText);
+        connect(m_umlObject, SIGNAL(modified()), m_nameWidget, SLOT(setMessageText()));
     if (m_nameWidget)
         m_nameWidget->setMessageText();
 }
@@ -1418,7 +1421,7 @@ void AssociationWidget::setUMLAssociation (UMLAssociation * assoc)
             assoc->nrof_parent_widgets = 0;
 
         assoc->nrof_parent_widgets++;
-        connect(assoc, &UMLAssociation::modified, this, &AssociationWidget::syncToModel);
+        connect(assoc, SIGNAL(modified()), this, SLOT(syncToModel()));
     }
 
 }
diff --git a/umbrello/umlwidgets/messagewidget.cpp b/umbrello/umlwidgets/messagewidget.cpp
index 6f051d8fcd1e822654e533d284b6a2a9d35efe83..b2a4bc9461c8f7e1d45c07ed0c263a4bf2bdf2aa 100644
--- a/umbrello/umlwidgets/messagewidget.cpp
+++ b/umbrello/umlwidgets/messagewidget.cpp
@@ -840,11 +840,11 @@ bool MessageWidget::activate(IDChangeLog * /*Log = 0*/)
     QString messageText = m_pFText->text();
     m_pFText->setVisible(messageText.length() > 1);
 
-    connect(m_pOw[Uml::RoleType::A],&ObjectWidget::sigWidgetMoved, this, &MessageWidget::slotWidgetMoved);
-    connect(m_pOw[Uml::RoleType::B], &ObjectWidget::sigWidgetMoved, this, &MessageWidget::slotWidgetMoved);
+    connect(m_pOw[Uml::RoleType::A], SIGNAL(sigWidgetMoved(Uml::ID::Type)), this, SLOT(slotWidgetMoved(Uml::ID::Type)));
+    connect(m_pOw[Uml::RoleType::B], SIGNAL(sigWidgetMoved(Uml::ID::Type)), this, SLOT(slotWidgetMoved(Uml::ID::Type)));
 
-    connect(this, &MessageWidget::sigMessageMoved, m_pOw[Uml::RoleType::A], &ObjectWidget::slotMessageMoved);
-    connect(this, &MessageWidget::sigMessageMoved, m_pOw[Uml::RoleType::B], &ObjectWidget::slotMessageMoved);
+    connect(this, SIGNAL(sigMessageMoved()), m_pOw[Uml::RoleType::A], SLOT(slotMessageMoved()));
+    connect(this, SIGNAL(sigMessageMoved()), m_pOw[Uml::RoleType::B], SLOT(slotMessageMoved()));
     m_pOw[Uml::RoleType::A]->messageAdded(this);
     if (!isSelf())
         m_pOw[Uml::RoleType::B]->messageAdded(this);
@@ -946,10 +946,10 @@ UMLOperation *MessageWidget::operation()
 void MessageWidget::setOperation(UMLOperation *op)
 {
     if (m_umlObject && m_pFText)
-        disconnect(m_umlObject, &UMLObject::modified, m_pFText, &FloatingTextWidget::setMessageText);
+        disconnect(m_umlObject, SIGNAL(modified()), m_pFText, SLOT(setMessageText()));
     m_umlObject = op;
     if (m_umlObject && m_pFText) {
-        connect(m_umlObject, &UMLObject::modified, m_pFText, &FloatingTextWidget::setMessageText);
+        connect(m_umlObject, SIGNAL(modified()), m_pFText, SLOT(setMessageText()));
         m_pFText->setMessageText();
     }
 }
@@ -1181,11 +1181,11 @@ void MessageWidget::calculateDimensionsFound()
 void MessageWidget::cleanup()
 {
     if (m_pOw[Uml::RoleType::A]) {
-        disconnect(this, &MessageWidget::sigMessageMoved, m_pOw[Uml::RoleType::A], &ObjectWidget::slotMessageMoved);
+        disconnect(this, SIGNAL(sigMessageMoved()), m_pOw[Uml::RoleType::A], SLOT(slotMessageMoved()));
         m_pOw[Uml::RoleType::A]->messageRemoved(this);
     }
     if (m_pOw[Uml::RoleType::B]) {
-        disconnect(this, &MessageWidget::sigMessageMoved, m_pOw[Uml::RoleType::B], &ObjectWidget::slotMessageMoved);
+        disconnect(this, SIGNAL(sigMessageMoved()), m_pOw[Uml::RoleType::B], SLOT(slotMessageMoved()));
         m_pOw[Uml::RoleType::B]->messageRemoved(this);
     }
 
diff --git a/umbrello/umlwidgets/pinwidget.cpp b/umbrello/umlwidgets/pinwidget.cpp
index 136f6cafeff4ed6de4a02fbcde3b5fb428648cda..2bebb39667b7e090fb3e9f242eb10d1eeea7d843 100644
--- a/umbrello/umlwidgets/pinwidget.cpp
+++ b/umbrello/umlwidgets/pinwidget.cpp
@@ -65,7 +65,7 @@ PinWidget::~PinWidget()
 void PinWidget::connectOwnerMotion()
 {
     ActivityWidget *owner = static_cast<ActivityWidget*>(ownerWidget());
-    connect(owner, &ActivityWidget::sigActMoved, this, &PinWidget::slotOwnerMoved);
+    connect(owner, SIGNAL(sigActMoved(qreal,qreal)), this, SLOT(slotOwnerMoved(qreal,qreal)));
 }
 
 /**
diff --git a/umbrello/umlwidgets/portwidget.cpp b/umbrello/umlwidgets/portwidget.cpp
index 5f7e176b1ec89ce37eb8ac9543d90a80c58fed18..14513fff17903762805a76c0993c6ed0578bd561 100644
--- a/umbrello/umlwidgets/portwidget.cpp
+++ b/umbrello/umlwidgets/portwidget.cpp
@@ -70,7 +70,7 @@ UMLWidget* PortWidget::ownerWidget()
 void PortWidget::connectOwnerMotion()
 {
     ComponentWidget *owner = static_cast<ComponentWidget*>(ownerWidget());
-    connect(owner, &ComponentWidget::sigCompMoved, this, &PortWidget::slotOwnerMoved);
+    connect(owner, SIGNAL(sigCompMoved(qreal,qreal)), this, SLOT(slotOwnerMoved(qreal,qreal)));
 }
 
 /**
diff --git a/umbrello/umlwidgets/preconditionwidget.cpp b/umbrello/umlwidgets/preconditionwidget.cpp
index 533fdec4dc83476e4ad8f47eb897abbaecfb7414..930bd416164e0715fc175f5cba883b0d95fc75d1 100644
--- a/umbrello/umlwidgets/preconditionwidget.cpp
+++ b/umbrello/umlwidgets/preconditionwidget.cpp
@@ -165,7 +165,7 @@ bool PreconditionWidget::activate(IDChangeLog * Log /*= 0*/)
         return false;
     }
 
-    connect(m_objectWidget, &ObjectWidget::sigWidgetMoved, this, &PreconditionWidget::slotWidgetMoved);
+    connect(m_objectWidget, SIGNAL(sigWidgetMoved(Uml::ID::Type)), this, SLOT(slotWidgetMoved(Uml::ID::Type)));
 
     calculateDimensions();
     return true;
diff --git a/umbrello/umlwidgets/signalwidget.cpp b/umbrello/umlwidgets/signalwidget.cpp
index 158f6ee3c5c05558a4f0ead8104595b2d81af02b..8a5d3e35aa5a2e58f43c753a22aab204e3d769a0 100644
--- a/umbrello/umlwidgets/signalwidget.cpp
+++ b/umbrello/umlwidgets/signalwidget.cpp
@@ -55,7 +55,7 @@ SignalWidget::SignalWidget(UMLScene *scene, SignalType signalType, Uml::ID::Type
         scene->setupNewWidget(m_pName);
         m_pName->setX(0);
         m_pName->setY(0);
-        connect(m_pName, &FloatingTextWidget::destroyed, this, &SignalWidget::slotTextDestroyed);
+        connect(m_pName, SIGNAL(destroyed()), this, SLOT(slotTextDestroyed()));
     }
 }
 
@@ -199,7 +199,7 @@ void SignalWidget::setName(const QString &strName)
             umlScene()->setupNewWidget(m_pName);
             m_pName->setX(0);
             m_pName->setY(0);
-            connect(m_pName, &FloatingTextWidget::destroyed, this, &SignalWidget::slotTextDestroyed);
+            connect(m_pName, SIGNAL(destroyed()), this, SLOT(slotTextDestroyed()));
         }
         else
             m_pName->setText(m_Text);
@@ -293,7 +293,7 @@ bool SignalWidget::loadFromXMI(QDomElement & qElement)
                 m_pName = NULL;
             }
             else
-                connect(m_pName, &FloatingTextWidget::destroyed, this, &SignalWidget::slotTextDestroyed);
+                connect(m_pName, SIGNAL(destroyed()), this, SLOT(slotTextDestroyed()));
         } else {
             uError() << "unknown tag " << tag;
         }
diff --git a/umbrello/umlwidgets/umlwidget.cpp b/umbrello/umlwidgets/umlwidget.cpp
index fbed4facd9a633677cb615ab2313e0b4b5039112..7cdc89b82c3d149e7a6ace04ef66cf9fc051d8bd 100644
--- a/umbrello/umlwidgets/umlwidget.cpp
+++ b/umbrello/umlwidgets/umlwidget.cpp
@@ -61,7 +61,7 @@ UMLWidget::UMLWidget(UMLScene * scene, WidgetType type, UMLObject * o)
     init();
     m_umlObject = o;
     if (m_umlObject) {
-        connect(m_umlObject, &UMLObject::modified, this, &UMLWidget::updateWidget);
+        connect(m_umlObject, SIGNAL(modified()), this, SLOT(updateWidget()));
         m_nId = m_umlObject->id();
     }
 }
@@ -739,10 +739,10 @@ void UMLWidget::init()
     m_ignoreSnapComponentSizeToGrid = false;
     m_doc = UMLApp::app()->document();
     m_nPosX = 0;
-    connect(m_scene, &UMLScene::sigFillColorChanged, this, &UMLWidget::slotFillColorChanged);
-    connect(m_scene, &UMLScene::sigLineColorChanged, this, &UMLWidget::slotLineColorChanged);
-    connect(m_scene, &UMLScene::sigTextColorChanged, this, &UMLWidget::slotTextColorChanged);
-    connect(m_scene, &UMLScene::sigLineWidthChanged, this, &UMLWidget::slotLineWidthChanged);
+    connect(m_scene, SIGNAL(sigFillColorChanged(Uml::ID::Type)), this, SLOT(slotFillColorChanged(Uml::ID::Type)));
+    connect(m_scene, SIGNAL(sigLineColorChanged(Uml::ID::Type)), this, SLOT(slotLineColorChanged(Uml::ID::Type)));
+    connect(m_scene, SIGNAL(sigTextColorChanged(Uml::ID::Type)), this, SLOT(slotTextColorChanged(Uml::ID::Type)));
+    connect(m_scene, SIGNAL(sigLineWidthChanged(Uml::ID::Type)), this, SLOT(slotLineWidthChanged(Uml::ID::Type)));
 
     m_umlObject = 0;
 
@@ -1424,13 +1424,13 @@ void UMLWidget::deselect(QGraphicsSceneMouseEvent *me)
 void UMLWidget::setScene(UMLScene *scene)
 {
     //remove signals from old view - was probably 0 anyway
-    disconnect(m_scene, &UMLScene::sigFillColorChanged, this, &UMLWidget::slotFillColorChanged);
-    disconnect(m_scene, &UMLScene::sigTextColorChanged, this, &UMLWidget::slotTextColorChanged);
-    disconnect(m_scene, &UMLScene::sigLineWidthChanged, this, &UMLWidget::slotLineWidthChanged);
+    disconnect(m_scene, SIGNAL(sigFillColorChanged(Uml::ID::Type)), this, SLOT(slotFillColorChanged(Uml::ID::Type)));
+    disconnect(m_scene, SIGNAL(sigTextColorChanged(Uml::ID::Type)), this, SLOT(slotTextColorChanged(Uml::ID::Type)));
+    disconnect(m_scene, SIGNAL(sigLineWidthChanged(Uml::ID::Type)), this, SLOT(slotLineWidthChanged(Uml::ID::Type)));
     m_scene = scene;
-    connect(m_scene, &UMLScene::sigFillColorChanged, this, &UMLWidget::slotFillColorChanged);
-    connect(m_scene, &UMLScene::sigTextColorChanged, this, &UMLWidget::slotTextColorChanged);
-    connect(m_scene, &UMLScene::sigLineWidthChanged, this, &UMLWidget::slotLineWidthChanged);
+    connect(m_scene, SIGNAL(sigFillColorChanged(Uml::ID::Type)), this, SLOT(slotFillColorChanged(Uml::ID::Type)));
+    connect(m_scene, SIGNAL(sigTextColorChanged(Uml::ID::Type)), this, SLOT(slotTextColorChanged(Uml::ID::Type)));
+    connect(m_scene, SIGNAL(sigLineWidthChanged(Uml::ID::Type)), this, SLOT(slotLineWidthChanged(Uml::ID::Type)));
 }
 
 /**

